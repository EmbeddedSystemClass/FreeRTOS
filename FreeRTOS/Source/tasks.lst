ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"tasks.c"
  14              	@ GNU C (Sourcery CodeBench Lite 2012.09-63) version 4.7.2 (arm-none-eabi)
  15              	@	compiled by GNU C version 4.3.2, GMP version 5.0.5, MPFR version 3.1.1-p2, MPC version 1.0.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./STCode -I ./Source/include
  18              	@ -I ./Source/portable/GCC/ARM_CM3 -I ./Common/include
  19              	@ -I ./Common/drivers/ST/STM32F10xFWLib/v3_2_0/Libraries/STM32F10x_StdPeriph_Driver/inc
  20              	@ -I ./Common/drivers/ST/STM32F10xFWLib/v3_2_0/Libraries/CMSIS/CM3/CoreSupport
  21              	@ -I ./Common/drivers/ST/STM32F10xFWLib/v3_2_0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x
  22              	@ -imultilib thumb2
  23              	@ -iprefix c:\codesourcery\sourcery_codebench_lite_for_arm_eabi\bin\../lib/gcc/arm-none-eabi/4.7.2/
  24              	@ -isysroot c:\codesourcery\sourcery_codebench_lite_for_arm_eabi\bin\../arm-none-eabi
  25              	@ -D__USES_INITFINI__ -D STM32F10X_HD -D USE_STDPERIPH_DRIVER
  26              	@ -D VECT_TAB_FLASH -D GCC_ARMCM3 -D inline=
  27              	@ -D PACK_STRUCT_END=__attribute((packed))
  28              	@ -D ALIGN_STRUCT_END=__attribute((aligned(4)))
  29              	@ -D __CS_SOURCERYGXX_MAJ__=2012 -D __CS_SOURCERYGXX_MIN__=9
  30              	@ -D __CS_SOURCERYGXX_REV__=63 Source/tasks.c -mthumb -mcpu=cortex-m3
  31              	@ -auxbase-strip Debug/tasks.o -g3 -gdwarf-2 -O0 -std=gnu99
  32              	@ -ffunction-sections -fdata-sections -fmessage-length=0 -fverbose-asm
  33              	@ options enabled:  -fauto-inc-dec -fbranch-count-reg -fcommon
  34              	@ -fdata-sections -fdebug-types-section -fdelete-null-pointer-checks
  35              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  36              	@ -ffunction-cse -ffunction-sections -fgcse-lm -fgnu-runtime -fident
  37              	@ -finline-atomics -fira-share-save-slots -fira-share-spill-slots -fivopts
  38              	@ -fkeep-static-consts -fleading-underscore -fmath-errno
  39              	@ -fmerge-debug-strings -fmove-loop-invariants -fpeephole
  40              	@ -fprefetch-loop-arrays -freg-struct-return
  41              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  42              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  43              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  44              	@ -fsched-stalled-insns-dep -fshow-column -fsigned-zeros
  45              	@ -fsplit-ivs-in-unroller -fstrict-volatile-bitfields -ftrapping-math
  46              	@ -ftree-cselim -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im
  47              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-parallelize-loops=
  48              	@ -ftree-phiprop -ftree-pta -ftree-reassoc -ftree-scev-cprop
  49              	@ -ftree-slp-vectorize -ftree-vect-loop-version -funit-at-a-time
  50              	@ -fverbose-asm -fzero-initialized-in-bss -mfix-cortex-m3-ldrd
  51              	@ -mlittle-endian -msched-prolog -mthumb -munaligned-access
  52              	@ -mvectorize-with-neon-quad
  53              	
  54              		.text
  55              	.Ltext0:
  56              		.cfi_sections	.debug_frame
  57              		.global	pxCurrentTCB
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 2


  58              		.section	.bss.pxCurrentTCB,"aw",%nobits
  59              		.align	2
  60              		.type	pxCurrentTCB, %object
  61              		.size	pxCurrentTCB, 4
  62              	pxCurrentTCB:
  63 0000 00000000 		.space	4
  64              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  65              		.align	2
  66              		.type	pxReadyTasksLists, %object
  67              		.size	pxReadyTasksLists, 100
  68              	pxReadyTasksLists:
  69 0000 00000000 		.space	100
  69      00000000 
  69      00000000 
  69      00000000 
  69      00000000 
  70              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  71              		.align	2
  72              		.type	xDelayedTaskList1, %object
  73              		.size	xDelayedTaskList1, 20
  74              	xDelayedTaskList1:
  75 0000 00000000 		.space	20
  75      00000000 
  75      00000000 
  75      00000000 
  75      00000000 
  76              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  77              		.align	2
  78              		.type	xDelayedTaskList2, %object
  79              		.size	xDelayedTaskList2, 20
  80              	xDelayedTaskList2:
  81 0000 00000000 		.space	20
  81      00000000 
  81      00000000 
  81      00000000 
  81      00000000 
  82              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  83              		.align	2
  84              		.type	pxDelayedTaskList, %object
  85              		.size	pxDelayedTaskList, 4
  86              	pxDelayedTaskList:
  87 0000 00000000 		.space	4
  88              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  89              		.align	2
  90              		.type	pxOverflowDelayedTaskList, %object
  91              		.size	pxOverflowDelayedTaskList, 4
  92              	pxOverflowDelayedTaskList:
  93 0000 00000000 		.space	4
  94              		.section	.bss.xPendingReadyList,"aw",%nobits
  95              		.align	2
  96              		.type	xPendingReadyList, %object
  97              		.size	xPendingReadyList, 20
  98              	xPendingReadyList:
  99 0000 00000000 		.space	20
  99      00000000 
  99      00000000 
  99      00000000 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 3


  99      00000000 
 100              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 101              		.align	2
 102              		.type	xTasksWaitingTermination, %object
 103              		.size	xTasksWaitingTermination, 20
 104              	xTasksWaitingTermination:
 105 0000 00000000 		.space	20
 105      00000000 
 105      00000000 
 105      00000000 
 105      00000000 
 106              		.section	.bss.uxTasksDeleted,"aw",%nobits
 107              		.align	2
 108              		.type	uxTasksDeleted, %object
 109              		.size	uxTasksDeleted, 4
 110              	uxTasksDeleted:
 111 0000 00000000 		.space	4
 112              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 113              		.align	2
 114              		.type	xSuspendedTaskList, %object
 115              		.size	xSuspendedTaskList, 20
 116              	xSuspendedTaskList:
 117 0000 00000000 		.space	20
 117      00000000 
 117      00000000 
 117      00000000 
 117      00000000 
 118              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 119              		.align	2
 120              		.type	uxCurrentNumberOfTasks, %object
 121              		.size	uxCurrentNumberOfTasks, 4
 122              	uxCurrentNumberOfTasks:
 123 0000 00000000 		.space	4
 124              		.section	.bss.xTickCount,"aw",%nobits
 125              		.align	2
 126              		.type	xTickCount, %object
 127              		.size	xTickCount, 4
 128              	xTickCount:
 129 0000 00000000 		.space	4
 130              		.section	.bss.uxTopUsedPriority,"aw",%nobits
 131              		.align	2
 132              		.type	uxTopUsedPriority, %object
 133              		.size	uxTopUsedPriority, 4
 134              	uxTopUsedPriority:
 135 0000 00000000 		.space	4
 136              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 137              		.align	2
 138              		.type	uxTopReadyPriority, %object
 139              		.size	uxTopReadyPriority, 4
 140              	uxTopReadyPriority:
 141 0000 00000000 		.space	4
 142              		.section	.bss.xSchedulerRunning,"aw",%nobits
 143              		.align	2
 144              		.type	xSchedulerRunning, %object
 145              		.size	xSchedulerRunning, 4
 146              	xSchedulerRunning:
 147 0000 00000000 		.space	4
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 4


 148              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 149              		.align	2
 150              		.type	uxSchedulerSuspended, %object
 151              		.size	uxSchedulerSuspended, 4
 152              	uxSchedulerSuspended:
 153 0000 00000000 		.space	4
 154              		.section	.bss.uxMissedTicks,"aw",%nobits
 155              		.align	2
 156              		.type	uxMissedTicks, %object
 157              		.size	uxMissedTicks, 4
 158              	uxMissedTicks:
 159 0000 00000000 		.space	4
 160              		.section	.bss.xMissedYield,"aw",%nobits
 161              		.align	2
 162              		.type	xMissedYield, %object
 163              		.size	xMissedYield, 4
 164              	xMissedYield:
 165 0000 00000000 		.space	4
 166              		.section	.bss.xNumOfOverflows,"aw",%nobits
 167              		.align	2
 168              		.type	xNumOfOverflows, %object
 169              		.size	xNumOfOverflows, 4
 170              	xNumOfOverflows:
 171 0000 00000000 		.space	4
 172              		.section	.bss.uxTaskNumber,"aw",%nobits
 173              		.align	2
 174              		.type	uxTaskNumber, %object
 175              		.size	uxTaskNumber, 4
 176              	uxTaskNumber:
 177 0000 00000000 		.space	4
 178              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 179              		.align	2
 180              		.type	xNextTaskUnblockTime, %object
 181              		.size	xNextTaskUnblockTime, 4
 182              	xNextTaskUnblockTime:
 183 0000 FFFFFFFF 		.word	-1
 184              		.section	.text.xTaskGenericCreate,"ax",%progbits
 185              		.align	2
 186              		.global	xTaskGenericCreate
 187              		.thumb
 188              		.thumb_func
 189              		.type	xTaskGenericCreate, %function
 190              	xTaskGenericCreate:
 191              	.LFB0:
 192              		.file 1 "Source/tasks.c"
   1:Source/tasks.c **** /*
   2:Source/tasks.c ****     FreeRTOS V7.3.0 - Copyright (C) 2012 Real Time Engineers Ltd.
   3:Source/tasks.c **** 
   4:Source/tasks.c ****     FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
   5:Source/tasks.c ****     http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Source/tasks.c **** 
   7:Source/tasks.c ****     ***************************************************************************
   8:Source/tasks.c ****      *                                                                       *
   9:Source/tasks.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
  10:Source/tasks.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
  11:Source/tasks.c ****      *    available.                                                         *
  12:Source/tasks.c ****      *                                                                       *
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 5


  13:Source/tasks.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  14:Source/tasks.c ****      *    ensuring you get running as quickly as possible and with an        *
  15:Source/tasks.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  16:Source/tasks.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  17:Source/tasks.c ****      *    professional grade, cross platform, de facto standard solutions    *
  18:Source/tasks.c ****      *    for microcontrollers - completely free of charge!                  *
  19:Source/tasks.c ****      *                                                                       *
  20:Source/tasks.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  21:Source/tasks.c ****      *                                                                       *
  22:Source/tasks.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  23:Source/tasks.c ****      *                                                                       *
  24:Source/tasks.c ****     ***************************************************************************
  25:Source/tasks.c **** 
  26:Source/tasks.c **** 
  27:Source/tasks.c ****     This file is part of the FreeRTOS distribution.
  28:Source/tasks.c **** 
  29:Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  30:Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  31:Source/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  32:Source/tasks.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  33:Source/tasks.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  34:Source/tasks.c ****     provide the source code for proprietary components outside of the FreeRTOS
  35:Source/tasks.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  36:Source/tasks.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  37:Source/tasks.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  38:Source/tasks.c ****     more details. You should have received a copy of the GNU General Public
  39:Source/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  40:Source/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  41:Source/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  42:Source/tasks.c ****     FreeRTOS WEB site.
  43:Source/tasks.c **** 
  44:Source/tasks.c ****     1 tab == 4 spaces!
  45:Source/tasks.c **** 
  46:Source/tasks.c ****     ***************************************************************************
  47:Source/tasks.c ****      *                                                                       *
  48:Source/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  49:Source/tasks.c ****      *    not run, what could be wrong?"                                     *
  50:Source/tasks.c ****      *                                                                       *
  51:Source/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  52:Source/tasks.c ****      *                                                                       *
  53:Source/tasks.c ****     ***************************************************************************
  54:Source/tasks.c **** 
  55:Source/tasks.c **** 
  56:Source/tasks.c ****     http://www.FreeRTOS.org - Documentation, training, latest versions, license
  57:Source/tasks.c ****     and contact details.
  58:Source/tasks.c **** 
  59:Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  60:Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool.
  61:Source/tasks.c **** 
  62:Source/tasks.c ****     Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell
  63:Source/tasks.c ****     the code with commercial support, indemnification, and middleware, under
  64:Source/tasks.c ****     the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
  65:Source/tasks.c ****     provide a safety engineered and independently SIL3 certified version under
  66:Source/tasks.c ****     the SafeRTOS brand: http://www.SafeRTOS.com.
  67:Source/tasks.c **** */
  68:Source/tasks.c **** 
  69:Source/tasks.c **** /* Standard includes. */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 6


  70:Source/tasks.c **** #include <stdio.h>
  71:Source/tasks.c **** #include <stdlib.h>
  72:Source/tasks.c **** #include <string.h>
  73:Source/tasks.c **** 
  74:Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Source/tasks.c **** task.h is included from an application file. */
  77:Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Source/tasks.c **** 
  79:Source/tasks.c **** /* FreeRTOS includes. */
  80:Source/tasks.c **** #include "FreeRTOS.h"
  81:Source/tasks.c **** #include "task.h"
  82:Source/tasks.c **** #include "timers.h"
  83:Source/tasks.c **** #include "StackMacros.h"
  84:Source/tasks.c **** 
  85:Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  86:Source/tasks.c **** 
  87:Source/tasks.c **** /*
  88:Source/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
  89:Source/tasks.c ****  */
  90:Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  91:Source/tasks.c **** 
  92:Source/tasks.c **** /*
  93:Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
  94:Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
  95:Source/tasks.c ****  * (the task's run time environment, including register values)
  96:Source/tasks.c ****  */
  97:Source/tasks.c **** typedef struct tskTaskControlBlock
  98:Source/tasks.c **** {
  99:Source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
 100:Source/tasks.c **** 
 101:Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 102:Source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
 103:Source/tasks.c **** 	#endif
 104:Source/tasks.c **** 
 105:Source/tasks.c **** 	xListItem				xGenericListItem;		/*< The list that the state list item of a task is reference from 
 106:Source/tasks.c **** 	xListItem				xEventListItem;		/*< Used to reference a task from an event list. */
 107:Source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 108:Source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
 109:Source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
 110:Source/tasks.c **** 
 111:Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 112:Source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Points to the end of the stack on architectures where the sta
 113:Source/tasks.c **** 	#endif
 114:Source/tasks.c **** 
 115:Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 116:Source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting; /*< Holds the critical section nesting depth for ports 
 117:Source/tasks.c **** 	#endif
 118:Source/tasks.c **** 
 119:Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 120:Source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< Stores a number that increments each time a TCB is create
 121:Source/tasks.c **** 		unsigned portBASE_TYPE  uxTaskNumber;	/*< Stores a number specifically for use by third party tra
 122:Source/tasks.c **** 	#endif
 123:Source/tasks.c **** 
 124:Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 125:Source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 126:Source/tasks.c **** 	#endif
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 7


 127:Source/tasks.c **** 
 128:Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 129:Source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 130:Source/tasks.c **** 	#endif
 131:Source/tasks.c **** 
 132:Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 133:Source/tasks.c **** 		unsigned long ulRunTimeCounter;			/*< Stores the amount of time the task has spent in the Running
 134:Source/tasks.c **** 	#endif
 135:Source/tasks.c **** 
 136:Source/tasks.c **** } tskTCB;
 137:Source/tasks.c **** 
 138:Source/tasks.c **** 
 139:Source/tasks.c **** /*
 140:Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 141:Source/tasks.c ****  * be global, rather than file scope.
 142:Source/tasks.c ****  */
 143:Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 144:Source/tasks.c **** 	#define static
 145:Source/tasks.c **** #endif
 146:Source/tasks.c **** 
 147:Source/tasks.c **** /*lint -e956 */
 148:Source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 149:Source/tasks.c **** 
 150:Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 151:Source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 152:Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 153:Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 154:Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 155:Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 156:Source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 157:Source/tasks.c **** 
 158:Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 159:Source/tasks.c **** 
 160:Source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 161:Source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 162:Source/tasks.c **** 
 163:Source/tasks.c **** #endif
 164:Source/tasks.c **** 
 165:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 166:Source/tasks.c **** 
 167:Source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 168:Source/tasks.c **** 
 169:Source/tasks.c **** #endif
 170:Source/tasks.c **** 
 171:Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 172:Source/tasks.c **** 
 173:Source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;			/*< Holds the handle of the idle task
 174:Source/tasks.c **** 
 175:Source/tasks.c **** #endif
 176:Source/tasks.c **** 
 177:Source/tasks.c **** /* File private variables. --------------------------------*/
 178:Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 179:Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 180:Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 181:Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 182:Source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 183:Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 8


 184:Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 185:Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 186:Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 187:Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 188:Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xNextTaskUnblockTime				= ( portTickType ) portMAX_DEL
 189:Source/tasks.c **** 
 190:Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 191:Source/tasks.c **** 
 192:Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 193:Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 194:Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 195:Source/tasks.c **** 
 196:Source/tasks.c **** #endif
 197:Source/tasks.c **** 
 198:Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 199:Source/tasks.c **** 
 200:Source/tasks.c **** /*
 201:Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 202:Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 203:Source/tasks.c ****  */
 204:Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 205:Source/tasks.c **** 
 206:Source/tasks.c **** /*
 207:Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 208:Source/tasks.c ****  */
 209:Source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 210:Source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 211:Source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 212:Source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 213:Source/tasks.c **** 
 214:Source/tasks.c **** /*-----------------------------------------------------------*/
 215:Source/tasks.c **** 
 216:Source/tasks.c **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 0
 217:Source/tasks.c **** 
 218:Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 219:Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 220:Source/tasks.c **** 	microcontroller architecture. */
 221:Source/tasks.c **** 
 222:Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 223:Source/tasks.c **** 	state task. */
 224:Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )																		\
 225:Source/tasks.c **** 	{																													\
 226:Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )																		\
 227:Source/tasks.c **** 		{																												\
 228:Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );																		\
 229:Source/tasks.c **** 		}																												\
 230:Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 231:Source/tasks.c **** 
 232:Source/tasks.c **** 	/*-----------------------------------------------------------*/
 233:Source/tasks.c **** 
 234:Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()																			\
 235:Source/tasks.c **** 	{																													\
 236:Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */												\
 237:Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )										\
 238:Source/tasks.c **** 		{																												\
 239:Source/tasks.c **** 			configASSERT( uxTopReadyPriority );																			\
 240:Source/tasks.c **** 			--uxTopReadyPriority;																						\
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 9


 241:Source/tasks.c **** 		}																												\
 242:Source/tasks.c **** 																														\
 243:Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of										\
 244:Source/tasks.c **** 		the	same priority get an equal share of the processor time. */													\
 245:Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );						\
 246:Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 247:Source/tasks.c **** 
 248:Source/tasks.c **** 	/*-----------------------------------------------------------*/
 249:Source/tasks.c **** 
 250:Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 251:Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 252:Source/tasks.c **** 	being used. */
 253:Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 254:Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 255:Source/tasks.c **** 
 256:Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 257:Source/tasks.c **** 
 258:Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 259:Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 260:Source/tasks.c **** 	architecture being used. */
 261:Source/tasks.c **** 
 262:Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 263:Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 264:Source/tasks.c **** 
 265:Source/tasks.c **** 	/*-----------------------------------------------------------*/
 266:Source/tasks.c **** 
 267:Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 268:Source/tasks.c **** 	{																								\
 269:Source/tasks.c **** 	unsigned portBASE_TYPE uxTopPriority;															\
 270:Source/tasks.c **** 																									\
 271:Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 272:Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 273:Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 274:Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 275:Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 276:Source/tasks.c **** 
 277:Source/tasks.c **** 	/*-----------------------------------------------------------*/
 278:Source/tasks.c **** 
 279:Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 280:Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 281:Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 282:Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )													\
 283:Source/tasks.c **** 	{																								\
 284:Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == 0 )				\
 285:Source/tasks.c **** 		{																							\
 286:Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );						\
 287:Source/tasks.c **** 		}																							\
 288:Source/tasks.c **** 	}
 289:Source/tasks.c **** 
 290:Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 291:Source/tasks.c **** 
 292:Source/tasks.c **** /*
 293:Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 294:Source/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 295:Source/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 296:Source/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 297:Source/tasks.c ****  * executing task has been rescheduled.
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 10


 298:Source/tasks.c ****  */
 299:Source/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																				\
 300:Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )																			\
 301:Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );																\
 302:Source/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGeneri
 303:Source/tasks.c **** /*-----------------------------------------------------------*/
 304:Source/tasks.c **** 
 305:Source/tasks.c **** /*
 306:Source/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 307:Source/tasks.c ****  * any require waking.
 308:Source/tasks.c ****  *
 309:Source/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 310:Source/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 311:Source/tasks.c ****  * any further down the list.
 312:Source/tasks.c ****  */
 313:Source/tasks.c **** #define prvCheckDelayedTasks()															\
 314:Source/tasks.c **** {																						\
 315:Source/tasks.c **** portTickType xItemValue;																\
 316:Source/tasks.c **** 																						\
 317:Source/tasks.c **** 	/* Is the tick count greater than or equal to the wake time of the first			\
 318:Source/tasks.c **** 	task referenced from the delayed tasks list? */										\
 319:Source/tasks.c **** 	if( xTickCount >= xNextTaskUnblockTime )											\
 320:Source/tasks.c **** 	{																					\
 321:Source/tasks.c **** 		for( ;; )																		\
 322:Source/tasks.c **** 		{																				\
 323:Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
 324:Source/tasks.c **** 			{																			\
 325:Source/tasks.c **** 				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
 326:Source/tasks.c **** 				maximum possible value so it is extremely unlikely that the				\
 327:Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
 328:Source/tasks.c **** 				time through. */														\
 329:Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;									\
 330:Source/tasks.c **** 				break;																	\
 331:Source/tasks.c **** 			}																			\
 332:Source/tasks.c **** 			else																		\
 333:Source/tasks.c **** 			{																			\
 334:Source/tasks.c **** 				/* The delayed list is not empty, get the value of the item at			\
 335:Source/tasks.c **** 				the head of the delayed list.  This is the time at which the			\
 336:Source/tasks.c **** 				task at the head of the delayed list should be removed from				\
 337:Source/tasks.c **** 				the Blocked state. */													\
 338:Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
 339:Source/tasks.c **** 				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
 340:Source/tasks.c **** 																						\
 341:Source/tasks.c **** 				if( xTickCount < xItemValue )											\
 342:Source/tasks.c **** 				{																		\
 343:Source/tasks.c **** 					/* It is not time to unblock this item yet, but the item			\
 344:Source/tasks.c **** 					value is the time at which the task at the head of the				\
 345:Source/tasks.c **** 					blocked list should be removed from the Blocked state -				\
 346:Source/tasks.c **** 					so record the item value in xNextTaskUnblockTime. */				\
 347:Source/tasks.c **** 					xNextTaskUnblockTime = xItemValue;									\
 348:Source/tasks.c **** 					break;																\
 349:Source/tasks.c **** 				}																		\
 350:Source/tasks.c **** 																						\
 351:Source/tasks.c **** 				/* It is time to remove the item from the Blocked state. */				\
 352:Source/tasks.c **** 				uxListRemove( &( pxTCB->xGenericListItem ) );							\
 353:Source/tasks.c **** 																						\
 354:Source/tasks.c **** 				/* Is the task waiting on an event also? */								\
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 11


 355:Source/tasks.c **** 				if( pxTCB->xEventListItem.pvContainer != NULL )							\
 356:Source/tasks.c **** 				{																		\
 357:Source/tasks.c **** 					uxListRemove( &( pxTCB->xEventListItem ) );							\
 358:Source/tasks.c **** 				}																		\
 359:Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );										\
 360:Source/tasks.c **** 			}																			\
 361:Source/tasks.c **** 		}																				\
 362:Source/tasks.c **** 	}																					\
 363:Source/tasks.c **** }
 364:Source/tasks.c **** /*-----------------------------------------------------------*/
 365:Source/tasks.c **** 
 366:Source/tasks.c **** /*
 367:Source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 368:Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 369:Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 370:Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 371:Source/tasks.c ****  */
 372:Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 373:Source/tasks.c **** 
 374:Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 375:Source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName );
 376:Source/tasks.c **** extern void vApplicationTickHook( void );
 377:Source/tasks.c **** 
 378:Source/tasks.c **** /* File private functions. --------------------------------*/
 379:Source/tasks.c **** 
 380:Source/tasks.c **** /*
 381:Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 382:Source/tasks.c ****  * into the TCB structure.
 383:Source/tasks.c ****  */
 384:Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 385:Source/tasks.c **** 
 386:Source/tasks.c **** /*
 387:Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 388:Source/tasks.c ****  * automatically upon the creation of the first task.
 389:Source/tasks.c ****  */
 390:Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 391:Source/tasks.c **** 
 392:Source/tasks.c **** /*
 393:Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 394:Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 395:Source/tasks.c ****  * creation of the first user task.
 396:Source/tasks.c ****  *
 397:Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 398:Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 399:Source/tasks.c ****  *
 400:Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 401:Source/tasks.c ****  *
 402:Source/tasks.c ****  */
 403:Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 404:Source/tasks.c **** 
 405:Source/tasks.c **** /*
 406:Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 407:Source/tasks.c ****  * including the stack pointed to by the TCB.
 408:Source/tasks.c ****  *
 409:Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 410:Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 411:Source/tasks.c ****  */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 12


 412:Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 413:Source/tasks.c **** 
 414:Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 415:Source/tasks.c **** 
 416:Source/tasks.c **** #endif
 417:Source/tasks.c **** 
 418:Source/tasks.c **** /*
 419:Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 420:Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 421:Source/tasks.c ****  * and its TCB deleted.
 422:Source/tasks.c ****  */
 423:Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 424:Source/tasks.c **** 
 425:Source/tasks.c **** /*
 426:Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 427:Source/tasks.c ****  * either the current or the overflow delayed task list.
 428:Source/tasks.c ****  */
 429:Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 430:Source/tasks.c **** 
 431:Source/tasks.c **** /*
 432:Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 433:Source/tasks.c ****  * allocation was successful.
 434:Source/tasks.c ****  */
 435:Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 436:Source/tasks.c **** 
 437:Source/tasks.c **** /*
 438:Source/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 439:Source/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 440:Source/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 441:Source/tasks.c ****  * within just that list.
 442:Source/tasks.c ****  *
 443:Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 444:Source/tasks.c ****  * NORMAL APPLICATION CODE.
 445:Source/tasks.c ****  */
 446:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 447:Source/tasks.c **** 
 448:Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 449:Source/tasks.c **** 
 450:Source/tasks.c **** #endif
 451:Source/tasks.c **** 
 452:Source/tasks.c **** /*
 453:Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 454:Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 455:Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 456:Source/tasks.c ****  */
 457:Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 458:Source/tasks.c **** 
 459:Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 460:Source/tasks.c **** 
 461:Source/tasks.c **** #endif
 462:Source/tasks.c **** 
 463:Source/tasks.c **** /*
 464:Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 465:Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 466:Source/tasks.c ****  *
 467:Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 468:Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 13


 469:Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 470:Source/tasks.c ****  * set to a value other than 1.
 471:Source/tasks.c ****  */
 472:Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 473:Source/tasks.c **** 
 474:Source/tasks.c **** 	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 475:Source/tasks.c **** 
 476:Source/tasks.c **** #endif
 477:Source/tasks.c **** 
 478:Source/tasks.c **** /*lint +e956 */
 479:Source/tasks.c **** 
 480:Source/tasks.c **** 
 481:Source/tasks.c **** 
 482:Source/tasks.c **** /*-----------------------------------------------------------
 483:Source/tasks.c ****  * TASK CREATION API documented in task.h
 484:Source/tasks.c ****  *----------------------------------------------------------*/
 485:Source/tasks.c **** 
 486:Source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 487:Source/tasks.c **** {
 193              		.loc 1 487 0
 194              		.cfi_startproc
 195              		@ args = 16, pretend = 0, frame = 32
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197 0000 80B5     		push	{r7, lr}	@
 198              	.LCFI0:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 7, -8
 201              		.cfi_offset 14, -4
 202 0002 8AB0     		sub	sp, sp, #40	@,,
 203              	.LCFI1:
 204              		.cfi_def_cfa_offset 48
 205 0004 02AF     		add	r7, sp, #8	@,,
 206              	.LCFI2:
 207              		.cfi_def_cfa 7, 40
 208 0006 F860     		str	r0, [r7, #12]	@ pxTaskCode, pxTaskCode
 209 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 210 000a 3B60     		str	r3, [r7, #0]	@ pvParameters, pvParameters
 211 000c 1346     		mov	r3, r2	@ movhi	@ tmp165, tmp164
 212 000e FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp165, usStackDepth
 488:Source/tasks.c **** signed portBASE_TYPE xReturn;
 489:Source/tasks.c **** tskTCB * pxNewTCB;
 490:Source/tasks.c **** 
 491:Source/tasks.c **** 	configASSERT( pxTaskCode );
 492:Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 493:Source/tasks.c **** 
 494:Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 495:Source/tasks.c **** 	checking that the allocation was successful. */
 496:Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 213              		.loc 1 496 0
 214 0010 FB88     		ldrh	r3, [r7, #6]	@ tmp166, usStackDepth
 215 0012 1846     		mov	r0, r3	@, tmp166
 216 0014 396B     		ldr	r1, [r7, #48]	@, puxStackBuffer
 217 0016 FFF7FEFF 		bl	prvAllocateTCBAndStack	@
 218 001a B861     		str	r0, [r7, #24]	@, pxNewTCB
 497:Source/tasks.c **** 
 498:Source/tasks.c **** 	if( pxNewTCB != NULL )
 219              		.loc 1 498 0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 14


 220 001c BB69     		ldr	r3, [r7, #24]	@ tmp167, pxNewTCB
 221 001e 002B     		cmp	r3, #0	@ tmp167,
 222 0020 76D0     		beq	.L2	@,
 223              	.LBB2:
 499:Source/tasks.c **** 	{
 500:Source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 501:Source/tasks.c **** 
 502:Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 503:Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 504:Source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 505:Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 506:Source/tasks.c **** 			{
 507:Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 508:Source/tasks.c **** 			}
 509:Source/tasks.c **** 			else
 510:Source/tasks.c **** 			{
 511:Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 512:Source/tasks.c **** 			}
 513:Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 514:Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 515:Source/tasks.c **** 
 516:Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 517:Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 518:Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 519:Source/tasks.c **** 		required by the port. */
 520:Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 521:Source/tasks.c **** 		{
 522:Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 224              		.loc 1 522 0
 225 0022 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxNewTCB
 226 0024 1A6B     		ldr	r2, [r3, #48]	@ D.6493, pxNewTCB_4->pxStack
 227 0026 FB88     		ldrh	r3, [r7, #6]	@ D.6494, usStackDepth
 228 0028 03F1FF33 		add	r3, r3, #-1	@ D.6495, D.6494,
 229 002c 4FEA8303 		lsl	r3, r3, #2	@ D.6496, D.6495,
 230 0030 D318     		adds	r3, r2, r3	@ tmp169, D.6493, D.6496
 231 0032 7B61     		str	r3, [r7, #20]	@ tmp169, pxTopOfStack
 523:Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 232              		.loc 1 523 0
 233 0034 7B69     		ldr	r3, [r7, #20]	@ pxTopOfStack.112, pxTopOfStack
 234 0036 23F00703 		bic	r3, r3, #7	@ D.6498, pxTopOfStack.112,
 235 003a 7B61     		str	r3, [r7, #20]	@ D.6498, pxTopOfStack
 524:Source/tasks.c **** 
 525:Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 526:Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 527:Source/tasks.c **** 		}
 528:Source/tasks.c **** 		#else
 529:Source/tasks.c **** 		{
 530:Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 531:Source/tasks.c **** 
 532:Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 533:Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 534:Source/tasks.c **** 
 535:Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 536:Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 537:Source/tasks.c **** 			other extreme of the stack space. */
 538:Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 539:Source/tasks.c **** 		}
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 15


 540:Source/tasks.c **** 		#endif
 541:Source/tasks.c **** 
 542:Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 543:Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 236              		.loc 1 543 0
 237 003c FB88     		ldrh	r3, [r7, #6]	@ tmp170, usStackDepth
 238 003e 0093     		str	r3, [sp, #0]	@ tmp170,
 239 0040 B869     		ldr	r0, [r7, #24]	@, pxNewTCB
 240 0042 B968     		ldr	r1, [r7, #8]	@, pcName
 241 0044 BA6A     		ldr	r2, [r7, #40]	@, uxPriority
 242 0046 7B6B     		ldr	r3, [r7, #52]	@, xRegions
 243 0048 FFF7FEFF 		bl	prvInitialiseTCBVariables	@
 544:Source/tasks.c **** 
 545:Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 546:Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 547:Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 548:Source/tasks.c **** 		the	top of stack variable is updated. */
 549:Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 550:Source/tasks.c **** 		{
 551:Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 552:Source/tasks.c **** 		}
 553:Source/tasks.c **** 		#else
 554:Source/tasks.c **** 		{
 555:Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 244              		.loc 1 555 0
 245 004c 7869     		ldr	r0, [r7, #20]	@, pxTopOfStack
 246 004e F968     		ldr	r1, [r7, #12]	@, pxTaskCode
 247 0050 3A68     		ldr	r2, [r7, #0]	@, pvParameters
 248 0052 FFF7FEFF 		bl	pxPortInitialiseStack	@
 249 0056 0246     		mov	r2, r0	@ D.6499,
 250 0058 BB69     		ldr	r3, [r7, #24]	@ tmp171, pxNewTCB
 251 005a 1A60     		str	r2, [r3, #0]	@ D.6499, pxNewTCB_4->pxTopOfStack
 556:Source/tasks.c **** 		}
 557:Source/tasks.c **** 		#endif
 558:Source/tasks.c **** 
 559:Source/tasks.c **** 		/* Check the alignment of the initialised stack. */
 560:Source/tasks.c **** 		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long
 561:Source/tasks.c **** 
 562:Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 252              		.loc 1 562 0
 253 005c FB6A     		ldr	r3, [r7, #44]	@ tmp172, pxCreatedTask
 254 005e 002B     		cmp	r3, #0	@ tmp172,
 255 0060 02D0     		beq	.L3	@,
 563:Source/tasks.c **** 		{
 564:Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 565:Source/tasks.c **** 			task can use this as a handle to delete the task later if
 566:Source/tasks.c **** 			required.*/
 567:Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 256              		.loc 1 567 0
 257 0062 FB6A     		ldr	r3, [r7, #44]	@ tmp173, pxCreatedTask
 258 0064 BA69     		ldr	r2, [r7, #24]	@ tmp174, pxNewTCB
 259 0066 1A60     		str	r2, [r3, #0]	@ tmp174, *pxCreatedTask_19(D)
 260              	.L3:
 568:Source/tasks.c **** 		}
 569:Source/tasks.c **** 
 570:Source/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 571:Source/tasks.c **** 		ready list, so must make sure no interrupts occur. */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 16


 572:Source/tasks.c **** 		taskENTER_CRITICAL();
 261              		.loc 1 572 0
 262 0068 FFF7FEFF 		bl	vPortEnterCritical	@
 573:Source/tasks.c **** 		{
 574:Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 263              		.loc 1 574 0
 264 006c 344B     		ldr	r3, .L11	@ tmp175,
 265 006e 1B68     		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.113, uxCurrentNumberOfTasks
 266 0070 03F10102 		add	r2, r3, #1	@ uxCurrentNumberOfTasks.114, uxCurrentNumberOfTasks.113,
 267 0074 324B     		ldr	r3, .L11	@ tmp176,
 268 0076 1A60     		str	r2, [r3, #0]	@ uxCurrentNumberOfTasks.114, uxCurrentNumberOfTasks
 575:Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 269              		.loc 1 575 0
 270 0078 324B     		ldr	r3, .L11+4	@ tmp177,
 271 007a 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.115, pxCurrentTCB
 272 007c 002B     		cmp	r3, #0	@ pxCurrentTCB.115,
 273 007e 09D1     		bne	.L4	@,
 576:Source/tasks.c **** 			{
 577:Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 578:Source/tasks.c **** 				the suspended state - make this the current task. */
 579:Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 274              		.loc 1 579 0
 275 0080 304B     		ldr	r3, .L11+4	@ tmp178,
 276 0082 BA69     		ldr	r2, [r7, #24]	@ tmp179, pxNewTCB
 277 0084 1A60     		str	r2, [r3, #0]	@ tmp179, pxCurrentTCB
 580:Source/tasks.c **** 
 581:Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 278              		.loc 1 581 0
 279 0086 2E4B     		ldr	r3, .L11	@ tmp180,
 280 0088 1B68     		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.116, uxCurrentNumberOfTasks
 281 008a 012B     		cmp	r3, #1	@ uxCurrentNumberOfTasks.116,
 282 008c 0FD1     		bne	.L5	@,
 582:Source/tasks.c **** 				{
 583:Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 584:Source/tasks.c **** 					initialisation required.  We will not recover if this call
 585:Source/tasks.c **** 					fails, but we will report the failure. */
 586:Source/tasks.c **** 					prvInitialiseTaskLists();
 283              		.loc 1 586 0
 284 008e FFF7FEFF 		bl	prvInitialiseTaskLists	@
 285 0092 0CE0     		b	.L5	@
 286              	.L4:
 587:Source/tasks.c **** 				}
 588:Source/tasks.c **** 			}
 589:Source/tasks.c **** 			else
 590:Source/tasks.c **** 			{
 591:Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 592:Source/tasks.c **** 				current task if it is the highest priority task to be created
 593:Source/tasks.c **** 				so far. */
 594:Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 287              		.loc 1 594 0
 288 0094 2C4B     		ldr	r3, .L11+8	@ tmp181,
 289 0096 1B68     		ldr	r3, [r3, #0]	@ xSchedulerRunning.117, xSchedulerRunning
 290 0098 002B     		cmp	r3, #0	@ xSchedulerRunning.117,
 291 009a 08D1     		bne	.L5	@,
 595:Source/tasks.c **** 				{
 596:Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 292              		.loc 1 596 0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 17


 293 009c 294B     		ldr	r3, .L11+4	@ tmp182,
 294 009e 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.118, pxCurrentTCB
 295 00a0 DA6A     		ldr	r2, [r3, #44]	@ D.6515, pxCurrentTCB.118_25->uxPriority
 296 00a2 BB6A     		ldr	r3, [r7, #40]	@ tmp183, uxPriority
 297 00a4 9A42     		cmp	r2, r3	@ D.6515, tmp183
 298 00a6 02D8     		bhi	.L5	@,
 597:Source/tasks.c **** 					{
 598:Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 299              		.loc 1 598 0
 300 00a8 264B     		ldr	r3, .L11+4	@ tmp184,
 301 00aa BA69     		ldr	r2, [r7, #24]	@ tmp185, pxNewTCB
 302 00ac 1A60     		str	r2, [r3, #0]	@ tmp185, pxCurrentTCB
 303              	.L5:
 599:Source/tasks.c **** 					}
 600:Source/tasks.c **** 				}
 601:Source/tasks.c **** 			}
 602:Source/tasks.c **** 
 603:Source/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 604:Source/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 605:Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 304              		.loc 1 605 0
 305 00ae BB69     		ldr	r3, [r7, #24]	@ tmp186, pxNewTCB
 306 00b0 DA6A     		ldr	r2, [r3, #44]	@ D.6518, pxNewTCB_4->uxPriority
 307 00b2 264B     		ldr	r3, .L11+12	@ tmp187,
 308 00b4 1B68     		ldr	r3, [r3, #0]	@ uxTopUsedPriority.119, uxTopUsedPriority
 309 00b6 9A42     		cmp	r2, r3	@ D.6518, uxTopUsedPriority.119
 310 00b8 03D9     		bls	.L6	@,
 606:Source/tasks.c **** 			{
 607:Source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 311              		.loc 1 607 0
 312 00ba BB69     		ldr	r3, [r7, #24]	@ tmp188, pxNewTCB
 313 00bc DA6A     		ldr	r2, [r3, #44]	@ uxTopUsedPriority.120, pxNewTCB_4->uxPriority
 314 00be 234B     		ldr	r3, .L11+12	@ tmp189,
 315 00c0 1A60     		str	r2, [r3, #0]	@ uxTopUsedPriority.120, uxTopUsedPriority
 316              	.L6:
 608:Source/tasks.c **** 			}
 609:Source/tasks.c **** 
 610:Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 611:Source/tasks.c **** 			{
 612:Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 613:Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 614:Source/tasks.c **** 			}
 615:Source/tasks.c **** 			#endif
 616:Source/tasks.c **** 			uxTaskNumber++;
 317              		.loc 1 616 0
 318 00c2 234B     		ldr	r3, .L11+16	@ tmp190,
 319 00c4 1B68     		ldr	r3, [r3, #0]	@ uxTaskNumber.121, uxTaskNumber
 320 00c6 03F10102 		add	r2, r3, #1	@ uxTaskNumber.122, uxTaskNumber.121,
 321 00ca 214B     		ldr	r3, .L11+16	@ tmp191,
 322 00cc 1A60     		str	r2, [r3, #0]	@ uxTaskNumber.122, uxTaskNumber
 617:Source/tasks.c **** 
 618:Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 323              		.loc 1 618 0
 324 00ce BB69     		ldr	r3, [r7, #24]	@ tmp192, pxNewTCB
 325 00d0 DA6A     		ldr	r2, [r3, #44]	@ D.6525, pxNewTCB_4->uxPriority
 326 00d2 204B     		ldr	r3, .L11+20	@ tmp193,
 327 00d4 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.123, uxTopReadyPriority
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 18


 328 00d6 9A42     		cmp	r2, r3	@ D.6525, uxTopReadyPriority.123
 329 00d8 03D9     		bls	.L7	@,
 330              		.loc 1 618 0 is_stmt 0 discriminator 1
 331 00da BB69     		ldr	r3, [r7, #24]	@ tmp194, pxNewTCB
 332 00dc DA6A     		ldr	r2, [r3, #44]	@ uxTopReadyPriority.124, pxNewTCB_4->uxPriority
 333 00de 1D4B     		ldr	r3, .L11+20	@ tmp195,
 334 00e0 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.124, uxTopReadyPriority
 335              	.L7:
 336              		.loc 1 618 0 discriminator 2
 337 00e2 BB69     		ldr	r3, [r7, #24]	@ tmp196, pxNewTCB
 338 00e4 DA6A     		ldr	r2, [r3, #44]	@ D.6530, pxNewTCB_4->uxPriority
 339 00e6 1346     		mov	r3, r2	@ tmp197, D.6530
 340 00e8 4FEA8303 		lsl	r3, r3, #2	@ tmp197, tmp197,
 341 00ec 9B18     		adds	r3, r3, r2	@ tmp197, tmp197, D.6530
 342 00ee 4FEA8303 		lsl	r3, r3, #2	@ tmp198, tmp197,
 343 00f2 194A     		ldr	r2, .L11+24	@ tmp199,
 344 00f4 9A18     		adds	r2, r3, r2	@ D.6531, tmp197, tmp199
 345 00f6 BB69     		ldr	r3, [r7, #24]	@ tmp200, pxNewTCB
 346 00f8 03F10403 		add	r3, r3, #4	@ D.6532, tmp200,
 347 00fc 1046     		mov	r0, r2	@, D.6531
 348 00fe 1946     		mov	r1, r3	@, D.6532
 349 0100 FFF7FEFF 		bl	vListInsertEnd	@
 619:Source/tasks.c **** 
 620:Source/tasks.c **** 			xReturn = pdPASS;
 350              		.loc 1 620 0 is_stmt 1 discriminator 2
 351 0104 4FF00103 		mov	r3, #1	@ tmp201,
 352 0108 FB61     		str	r3, [r7, #28]	@ tmp201, xReturn
 621:Source/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 622:Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 623:Source/tasks.c **** 		}
 624:Source/tasks.c **** 		taskEXIT_CRITICAL();
 353              		.loc 1 624 0 discriminator 2
 354 010a FFF7FEFF 		bl	vPortExitCritical	@
 355 010e 02E0     		b	.L8	@
 356              	.L2:
 357              	.LBE2:
 625:Source/tasks.c **** 	}
 626:Source/tasks.c **** 	else
 627:Source/tasks.c **** 	{
 628:Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 358              		.loc 1 628 0
 359 0110 4FF0FF33 		mov	r3, #-1	@ tmp202,
 360 0114 FB61     		str	r3, [r7, #28]	@ tmp202, xReturn
 361              	.L8:
 629:Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 630:Source/tasks.c **** 	}
 631:Source/tasks.c **** 
 632:Source/tasks.c **** 	if( xReturn == pdPASS )
 362              		.loc 1 632 0
 363 0116 FB69     		ldr	r3, [r7, #28]	@ tmp203, xReturn
 364 0118 012B     		cmp	r3, #1	@ tmp203,
 365 011a 0BD1     		bne	.L9	@,
 633:Source/tasks.c **** 	{
 634:Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 366              		.loc 1 634 0
 367 011c 0A4B     		ldr	r3, .L11+8	@ tmp204,
 368 011e 1B68     		ldr	r3, [r3, #0]	@ xSchedulerRunning.125, xSchedulerRunning
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 19


 369 0120 002B     		cmp	r3, #0	@ xSchedulerRunning.125,
 370 0122 07D0     		beq	.L9	@,
 635:Source/tasks.c **** 		{
 636:Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 637:Source/tasks.c **** 			then it should run now. */
 638:Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 371              		.loc 1 638 0
 372 0124 074B     		ldr	r3, .L11+4	@ tmp205,
 373 0126 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.126, pxCurrentTCB
 374 0128 DA6A     		ldr	r2, [r3, #44]	@ D.6540, pxCurrentTCB.126_41->uxPriority
 375 012a BB6A     		ldr	r3, [r7, #40]	@ tmp206, uxPriority
 376 012c 9A42     		cmp	r2, r3	@ D.6540, tmp206
 377 012e 01D2     		bcs	.L9	@,
 639:Source/tasks.c **** 			{
 640:Source/tasks.c **** 				portYIELD_WITHIN_API();
 378              		.loc 1 640 0
 379 0130 FFF7FEFF 		bl	vPortYieldFromISR	@
 380              	.L9:
 641:Source/tasks.c **** 			}
 642:Source/tasks.c **** 		}
 643:Source/tasks.c **** 	}
 644:Source/tasks.c **** 
 645:Source/tasks.c **** 	return xReturn;
 381              		.loc 1 645 0
 382 0134 FB69     		ldr	r3, [r7, #28]	@ D.6543, xReturn
 646:Source/tasks.c **** }
 383              		.loc 1 646 0
 384 0136 1846     		mov	r0, r3	@, <retval>
 385 0138 07F12007 		add	r7, r7, #32	@,,
 386 013c BD46     		mov	sp, r7
 387 013e 80BD     		pop	{r7, pc}
 388              	.L12:
 389              		.align	2
 390              	.L11:
 391 0140 00000000 		.word	uxCurrentNumberOfTasks
 392 0144 00000000 		.word	pxCurrentTCB
 393 0148 00000000 		.word	xSchedulerRunning
 394 014c 00000000 		.word	uxTopUsedPriority
 395 0150 00000000 		.word	uxTaskNumber
 396 0154 00000000 		.word	uxTopReadyPriority
 397 0158 00000000 		.word	pxReadyTasksLists
 398              		.cfi_endproc
 399              	.LFE0:
 400              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 401              		.section	.text.vTaskDelete,"ax",%progbits
 402              		.align	2
 403              		.global	vTaskDelete
 404              		.thumb
 405              		.thumb_func
 406              		.type	vTaskDelete, %function
 407              	vTaskDelete:
 408              	.LFB1:
 647:Source/tasks.c **** /*-----------------------------------------------------------*/
 648:Source/tasks.c **** 
 649:Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 650:Source/tasks.c **** 
 651:Source/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 20


 652:Source/tasks.c **** 	{
 409              		.loc 1 652 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 16
 412              		@ frame_needed = 1, uses_anonymous_args = 0
 413 0000 80B5     		push	{r7, lr}	@
 414              	.LCFI3:
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 7, -8
 417              		.cfi_offset 14, -4
 418 0002 84B0     		sub	sp, sp, #16	@,,
 419              	.LCFI4:
 420              		.cfi_def_cfa_offset 24
 421 0004 00AF     		add	r7, sp, #0	@,,
 422              	.LCFI5:
 423              		.cfi_def_cfa_register 7
 424 0006 7860     		str	r0, [r7, #4]	@ pxTaskToDelete, pxTaskToDelete
 653:Source/tasks.c **** 	tskTCB *pxTCB;
 654:Source/tasks.c **** 
 655:Source/tasks.c **** 		taskENTER_CRITICAL();
 425              		.loc 1 655 0
 426 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 656:Source/tasks.c **** 		{
 657:Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 658:Source/tasks.c **** 			deleted. */
 659:Source/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 427              		.loc 1 659 0
 428 000c 204B     		ldr	r3, .L19	@ tmp146,
 429 000e 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.105, pxCurrentTCB
 430 0010 7A68     		ldr	r2, [r7, #4]	@ tmp147, pxTaskToDelete
 431 0012 9A42     		cmp	r2, r3	@ tmp147, pxCurrentTCB.105
 432 0014 02D1     		bne	.L14	@,
 660:Source/tasks.c **** 			{
 661:Source/tasks.c **** 				pxTaskToDelete = NULL;
 433              		.loc 1 661 0
 434 0016 4FF00003 		mov	r3, #0	@ tmp148,
 435 001a 7B60     		str	r3, [r7, #4]	@ tmp148, pxTaskToDelete
 436              	.L14:
 662:Source/tasks.c **** 			}
 663:Source/tasks.c **** 
 664:Source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 665:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 437              		.loc 1 665 0
 438 001c 7B68     		ldr	r3, [r7, #4]	@ tmp149, pxTaskToDelete
 439 001e 002B     		cmp	r3, #0	@ tmp149,
 440 0020 02D1     		bne	.L15	@,
 441              		.loc 1 665 0 is_stmt 0 discriminator 1
 442 0022 1B4B     		ldr	r3, .L19	@ tmp150,
 443 0024 1B68     		ldr	r3, [r3, #0]	@ iftmp.106, pxCurrentTCB
 444 0026 00E0     		b	.L16	@
 445              	.L15:
 446              		.loc 1 665 0 discriminator 2
 447 0028 7B68     		ldr	r3, [r7, #4]	@ iftmp.106, pxTaskToDelete
 448              	.L16:
 449              		.loc 1 665 0 discriminator 3
 450 002a FB60     		str	r3, [r7, #12]	@ iftmp.106, pxTCB
 666:Source/tasks.c **** 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 21


 667:Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 668:Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 669:Source/tasks.c **** 			the termination list and free up any memory allocated by the
 670:Source/tasks.c **** 			scheduler for the TCB and stack. */
 671:Source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 451              		.loc 1 671 0 is_stmt 1 discriminator 3
 452 002c FB68     		ldr	r3, [r7, #12]	@ tmp151, pxTCB
 453 002e 03F10403 		add	r3, r3, #4	@ D.6473, tmp151,
 454 0032 1846     		mov	r0, r3	@, D.6473
 455 0034 FFF7FEFF 		bl	uxListRemove	@
 672:Source/tasks.c **** 			{
 673:Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 674:Source/tasks.c **** 			}
 675:Source/tasks.c **** 
 676:Source/tasks.c **** 			/* Is the task waiting on an event also? */
 677:Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 456              		.loc 1 677 0 discriminator 3
 457 0038 FB68     		ldr	r3, [r7, #12]	@ tmp152, pxTCB
 458 003a 9B6A     		ldr	r3, [r3, #40]	@ D.6477, pxTCB_8->xEventListItem.pvContainer
 459 003c 002B     		cmp	r3, #0	@ D.6477,
 460 003e 05D0     		beq	.L17	@,
 678:Source/tasks.c **** 			{
 679:Source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
 461              		.loc 1 679 0
 462 0040 FB68     		ldr	r3, [r7, #12]	@ tmp153, pxTCB
 463 0042 03F11803 		add	r3, r3, #24	@ D.6480, tmp153,
 464 0046 1846     		mov	r0, r3	@, D.6480
 465 0048 FFF7FEFF 		bl	uxListRemove	@
 466              	.L17:
 680:Source/tasks.c **** 			}
 681:Source/tasks.c **** 
 682:Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 467              		.loc 1 682 0
 468 004c FB68     		ldr	r3, [r7, #12]	@ tmp154, pxTCB
 469 004e 03F10403 		add	r3, r3, #4	@ D.6481, tmp154,
 470 0052 1048     		ldr	r0, .L19+4	@,
 471 0054 1946     		mov	r1, r3	@, D.6481
 472 0056 FFF7FEFF 		bl	vListInsertEnd	@
 683:Source/tasks.c **** 
 684:Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 685:Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 686:Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 687:Source/tasks.c **** 			++uxTasksDeleted;
 473              		.loc 1 687 0
 474 005a 0F4B     		ldr	r3, .L19+8	@ tmp155,
 475 005c 1B68     		ldr	r3, [r3, #0]	@ uxTasksDeleted.107, uxTasksDeleted
 476 005e 03F10102 		add	r2, r3, #1	@ uxTasksDeleted.108, uxTasksDeleted.107,
 477 0062 0D4B     		ldr	r3, .L19+8	@ tmp156,
 478 0064 1A60     		str	r2, [r3, #0]	@ uxTasksDeleted.108, uxTasksDeleted
 688:Source/tasks.c **** 
 689:Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 690:Source/tasks.c **** 			can detect that the task lists need re-generating. */
 691:Source/tasks.c **** 			uxTaskNumber++;
 479              		.loc 1 691 0
 480 0066 0D4B     		ldr	r3, .L19+12	@ tmp157,
 481 0068 1B68     		ldr	r3, [r3, #0]	@ uxTaskNumber.109, uxTaskNumber
 482 006a 03F10102 		add	r2, r3, #1	@ uxTaskNumber.110, uxTaskNumber.109,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 22


 483 006e 0B4B     		ldr	r3, .L19+12	@ tmp158,
 484 0070 1A60     		str	r2, [r3, #0]	@ uxTaskNumber.110, uxTaskNumber
 692:Source/tasks.c **** 
 693:Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 694:Source/tasks.c **** 		}
 695:Source/tasks.c **** 		taskEXIT_CRITICAL();
 485              		.loc 1 695 0
 486 0072 FFF7FEFF 		bl	vPortExitCritical	@
 696:Source/tasks.c **** 
 697:Source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 698:Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 487              		.loc 1 698 0
 488 0076 0A4B     		ldr	r3, .L19+16	@ tmp159,
 489 0078 1B68     		ldr	r3, [r3, #0]	@ xSchedulerRunning.111, xSchedulerRunning
 490 007a 002B     		cmp	r3, #0	@ xSchedulerRunning.111,
 491 007c 04D0     		beq	.L13	@,
 699:Source/tasks.c **** 		{
 700:Source/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 492              		.loc 1 700 0
 493 007e 7B68     		ldr	r3, [r7, #4]	@ tmp160, pxTaskToDelete
 494 0080 002B     		cmp	r3, #0	@ tmp160,
 495 0082 01D1     		bne	.L13	@,
 701:Source/tasks.c **** 			{
 702:Source/tasks.c **** 				portYIELD_WITHIN_API();
 496              		.loc 1 702 0
 497 0084 FFF7FEFF 		bl	vPortYieldFromISR	@
 498              	.L13:
 703:Source/tasks.c **** 			}
 704:Source/tasks.c **** 		}
 705:Source/tasks.c **** 	}
 499              		.loc 1 705 0
 500 0088 07F11007 		add	r7, r7, #16	@,,
 501 008c BD46     		mov	sp, r7
 502 008e 80BD     		pop	{r7, pc}
 503              	.L20:
 504              		.align	2
 505              	.L19:
 506 0090 00000000 		.word	pxCurrentTCB
 507 0094 00000000 		.word	xTasksWaitingTermination
 508 0098 00000000 		.word	uxTasksDeleted
 509 009c 00000000 		.word	uxTaskNumber
 510 00a0 00000000 		.word	xSchedulerRunning
 511              		.cfi_endproc
 512              	.LFE1:
 513              		.size	vTaskDelete, .-vTaskDelete
 514              		.section	.text.vTaskDelayUntil,"ax",%progbits
 515              		.align	2
 516              		.global	vTaskDelayUntil
 517              		.thumb
 518              		.thumb_func
 519              		.type	vTaskDelayUntil, %function
 520              	vTaskDelayUntil:
 521              	.LFB2:
 706:Source/tasks.c **** 
 707:Source/tasks.c **** #endif
 708:Source/tasks.c **** 
 709:Source/tasks.c **** 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 23


 710:Source/tasks.c **** 
 711:Source/tasks.c **** 
 712:Source/tasks.c **** 
 713:Source/tasks.c **** 
 714:Source/tasks.c **** /*-----------------------------------------------------------
 715:Source/tasks.c ****  * TASK CONTROL API documented in task.h
 716:Source/tasks.c ****  *----------------------------------------------------------*/
 717:Source/tasks.c **** 
 718:Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 719:Source/tasks.c **** 
 720:Source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 721:Source/tasks.c **** 	{
 522              		.loc 1 721 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 24
 525              		@ frame_needed = 1, uses_anonymous_args = 0
 526 0000 80B5     		push	{r7, lr}	@
 527              	.LCFI6:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 7, -8
 530              		.cfi_offset 14, -4
 531 0002 86B0     		sub	sp, sp, #24	@,,
 532              	.LCFI7:
 533              		.cfi_def_cfa_offset 32
 534 0004 00AF     		add	r7, sp, #0	@,,
 535              	.LCFI8:
 536              		.cfi_def_cfa_register 7
 537 0006 7860     		str	r0, [r7, #4]	@ pxPreviousWakeTime, pxPreviousWakeTime
 538 0008 3960     		str	r1, [r7, #0]	@ xTimeIncrement, xTimeIncrement
 722:Source/tasks.c **** 	portTickType xTimeToWake;
 723:Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 539              		.loc 1 723 0
 540 000a 4FF00003 		mov	r3, #0	@ tmp144,
 541 000e 7B61     		str	r3, [r7, #20]	@ tmp144, xShouldDelay
 724:Source/tasks.c **** 
 725:Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 726:Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 727:Source/tasks.c **** 
 728:Source/tasks.c **** 		vTaskSuspendAll();
 542              		.loc 1 728 0
 543 0010 FFF7FEFF 		bl	vTaskSuspendAll	@
 729:Source/tasks.c **** 		{
 730:Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 731:Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 544              		.loc 1 731 0
 545 0014 7B68     		ldr	r3, [r7, #4]	@ tmp145, pxPreviousWakeTime
 546 0016 1A68     		ldr	r2, [r3, #0]	@ D.6440, *pxPreviousWakeTime_3(D)
 547 0018 3B68     		ldr	r3, [r7, #0]	@ tmp147, xTimeIncrement
 548 001a D318     		adds	r3, r2, r3	@ tmp146, D.6440, tmp147
 549 001c 3B61     		str	r3, [r7, #16]	@ tmp146, xTimeToWake
 732:Source/tasks.c **** 
 733:Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 550              		.loc 1 733 0
 551 001e 7B68     		ldr	r3, [r7, #4]	@ tmp148, pxPreviousWakeTime
 552 0020 1A68     		ldr	r2, [r3, #0]	@ D.6441, *pxPreviousWakeTime_3(D)
 553 0022 1D4B     		ldr	r3, .L27	@ tmp149,
 554 0024 1B68     		ldr	r3, [r3, #0]	@ xTickCount.101, xTickCount
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 24


 555 0026 9A42     		cmp	r2, r3	@ D.6441, xTickCount.101
 556 0028 0DD9     		bls	.L22	@,
 734:Source/tasks.c **** 			{
 735:Source/tasks.c **** 				/* The tick count has overflowed since this function was
 736:Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 737:Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 738:Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 739:Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 740:Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 557              		.loc 1 740 0
 558 002a 7B68     		ldr	r3, [r7, #4]	@ tmp150, pxPreviousWakeTime
 559 002c 1A68     		ldr	r2, [r3, #0]	@ D.6445, *pxPreviousWakeTime_3(D)
 560 002e 3B69     		ldr	r3, [r7, #16]	@ tmp151, xTimeToWake
 561 0030 9A42     		cmp	r2, r3	@ D.6445, tmp151
 562 0032 15D9     		bls	.L23	@,
 563              		.loc 1 740 0 is_stmt 0 discriminator 1
 564 0034 184B     		ldr	r3, .L27	@ tmp152,
 565 0036 1B68     		ldr	r3, [r3, #0]	@ xTickCount.102, xTickCount
 566 0038 3A69     		ldr	r2, [r7, #16]	@ tmp153, xTimeToWake
 567 003a 9A42     		cmp	r2, r3	@ tmp153, xTickCount.102
 568 003c 10D9     		bls	.L23	@,
 741:Source/tasks.c **** 				{
 742:Source/tasks.c **** 					xShouldDelay = pdTRUE;
 569              		.loc 1 742 0 is_stmt 1
 570 003e 4FF00103 		mov	r3, #1	@ tmp154,
 571 0042 7B61     		str	r3, [r7, #20]	@ tmp154, xShouldDelay
 572 0044 0CE0     		b	.L23	@
 573              	.L22:
 743:Source/tasks.c **** 				}
 744:Source/tasks.c **** 			}
 745:Source/tasks.c **** 			else
 746:Source/tasks.c **** 			{
 747:Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 748:Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 749:Source/tasks.c **** 				tick time is less than the wake time. */
 750:Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 574              		.loc 1 750 0
 575 0046 7B68     		ldr	r3, [r7, #4]	@ tmp155, pxPreviousWakeTime
 576 0048 1A68     		ldr	r2, [r3, #0]	@ D.6454, *pxPreviousWakeTime_3(D)
 577 004a 3B69     		ldr	r3, [r7, #16]	@ tmp156, xTimeToWake
 578 004c 9A42     		cmp	r2, r3	@ D.6454, tmp156
 579 004e 04D8     		bhi	.L24	@,
 580              		.loc 1 750 0 is_stmt 0 discriminator 1
 581 0050 114B     		ldr	r3, .L27	@ tmp157,
 582 0052 1B68     		ldr	r3, [r3, #0]	@ xTickCount.103, xTickCount
 583 0054 3A69     		ldr	r2, [r7, #16]	@ tmp158, xTimeToWake
 584 0056 9A42     		cmp	r2, r3	@ tmp158, xTickCount.103
 585 0058 02D9     		bls	.L23	@,
 586              	.L24:
 751:Source/tasks.c **** 				{
 752:Source/tasks.c **** 					xShouldDelay = pdTRUE;
 587              		.loc 1 752 0 is_stmt 1
 588 005a 4FF00103 		mov	r3, #1	@ tmp159,
 589 005e 7B61     		str	r3, [r7, #20]	@ tmp159, xShouldDelay
 590              	.L23:
 753:Source/tasks.c **** 				}
 754:Source/tasks.c **** 			}
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 25


 755:Source/tasks.c **** 
 756:Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 757:Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 591              		.loc 1 757 0
 592 0060 7B68     		ldr	r3, [r7, #4]	@ tmp160, pxPreviousWakeTime
 593 0062 3A69     		ldr	r2, [r7, #16]	@ tmp161, xTimeToWake
 594 0064 1A60     		str	r2, [r3, #0]	@ tmp161, *pxPreviousWakeTime_3(D)
 758:Source/tasks.c **** 
 759:Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 595              		.loc 1 759 0
 596 0066 7B69     		ldr	r3, [r7, #20]	@ tmp162, xShouldDelay
 597 0068 002B     		cmp	r3, #0	@ tmp162,
 598 006a 09D0     		beq	.L25	@,
 760:Source/tasks.c **** 			{
 761:Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 762:Source/tasks.c **** 
 763:Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 764:Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 765:Source/tasks.c **** 				both lists. */
 766:Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 599              		.loc 1 766 0
 600 006c 0B4B     		ldr	r3, .L27+4	@ tmp163,
 601 006e 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.104, pxCurrentTCB
 602 0070 03F10403 		add	r3, r3, #4	@ D.6460, pxCurrentTCB.104,
 603 0074 1846     		mov	r0, r3	@, D.6460
 604 0076 FFF7FEFF 		bl	uxListRemove	@
 767:Source/tasks.c **** 				{
 768:Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 769:Source/tasks.c **** 					no need to check, and the port reset macro can be called
 770:Source/tasks.c **** 					directly. */
 771:Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 772:Source/tasks.c **** 				}
 773:Source/tasks.c **** 
 774:Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 605              		.loc 1 774 0
 606 007a 3869     		ldr	r0, [r7, #16]	@, xTimeToWake
 607 007c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 608              	.L25:
 775:Source/tasks.c **** 			}
 776:Source/tasks.c **** 		}
 777:Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 609              		.loc 1 777 0
 610 0080 FFF7FEFF 		bl	xTaskResumeAll	@
 611 0084 F860     		str	r0, [r7, #12]	@, xAlreadyYielded
 778:Source/tasks.c **** 
 779:Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 780:Source/tasks.c **** 		have put ourselves to sleep. */
 781:Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 612              		.loc 1 781 0
 613 0086 FB68     		ldr	r3, [r7, #12]	@ tmp164, xAlreadyYielded
 614 0088 002B     		cmp	r3, #0	@ tmp164,
 615 008a 01D1     		bne	.L21	@,
 782:Source/tasks.c **** 		{
 783:Source/tasks.c **** 			portYIELD_WITHIN_API();
 616              		.loc 1 783 0
 617 008c FFF7FEFF 		bl	vPortYieldFromISR	@
 618              	.L21:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 26


 784:Source/tasks.c **** 		}
 785:Source/tasks.c **** 	}
 619              		.loc 1 785 0
 620 0090 07F11807 		add	r7, r7, #24	@,,
 621 0094 BD46     		mov	sp, r7
 622 0096 80BD     		pop	{r7, pc}
 623              	.L28:
 624              		.align	2
 625              	.L27:
 626 0098 00000000 		.word	xTickCount
 627 009c 00000000 		.word	pxCurrentTCB
 628              		.cfi_endproc
 629              	.LFE2:
 630              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 631              		.section	.text.vTaskDelay,"ax",%progbits
 632              		.align	2
 633              		.global	vTaskDelay
 634              		.thumb
 635              		.thumb_func
 636              		.type	vTaskDelay, %function
 637              	vTaskDelay:
 638              	.LFB3:
 786:Source/tasks.c **** 
 787:Source/tasks.c **** #endif
 788:Source/tasks.c **** /*-----------------------------------------------------------*/
 789:Source/tasks.c **** 
 790:Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 791:Source/tasks.c **** 
 792:Source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 793:Source/tasks.c **** 	{
 639              		.loc 1 793 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 16
 642              		@ frame_needed = 1, uses_anonymous_args = 0
 643 0000 80B5     		push	{r7, lr}	@
 644              	.LCFI9:
 645              		.cfi_def_cfa_offset 8
 646              		.cfi_offset 7, -8
 647              		.cfi_offset 14, -4
 648 0002 84B0     		sub	sp, sp, #16	@,,
 649              	.LCFI10:
 650              		.cfi_def_cfa_offset 24
 651 0004 00AF     		add	r7, sp, #0	@,,
 652              	.LCFI11:
 653              		.cfi_def_cfa_register 7
 654 0006 7860     		str	r0, [r7, #4]	@ xTicksToDelay, xTicksToDelay
 794:Source/tasks.c **** 	portTickType xTimeToWake;
 795:Source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 655              		.loc 1 795 0
 656 0008 4FF00003 		mov	r3, #0	@ tmp138,
 657 000c FB60     		str	r3, [r7, #12]	@ tmp138, xAlreadyYielded
 796:Source/tasks.c **** 
 797:Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 798:Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 658              		.loc 1 798 0
 659 000e 7B68     		ldr	r3, [r7, #4]	@ tmp139, xTicksToDelay
 660 0010 002B     		cmp	r3, #0	@ tmp139,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 27


 661 0012 13D0     		beq	.L30	@,
 799:Source/tasks.c **** 		{
 800:Source/tasks.c **** 			vTaskSuspendAll();
 662              		.loc 1 800 0
 663 0014 FFF7FEFF 		bl	vTaskSuspendAll	@
 801:Source/tasks.c **** 			{
 802:Source/tasks.c **** 				traceTASK_DELAY();
 803:Source/tasks.c **** 
 804:Source/tasks.c **** 				/* A task that is removed from the event list while the
 805:Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 806:Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 807:Source/tasks.c **** 				is resumed.
 808:Source/tasks.c **** 
 809:Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 810:Source/tasks.c **** 				executing task. */
 811:Source/tasks.c **** 
 812:Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 813:Source/tasks.c **** 				not a problem. */
 814:Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 664              		.loc 1 814 0
 665 0018 0D4B     		ldr	r3, .L32	@ tmp140,
 666 001a 1A68     		ldr	r2, [r3, #0]	@ xTickCount.99, xTickCount
 667 001c 7B68     		ldr	r3, [r7, #4]	@ tmp142, xTicksToDelay
 668 001e D318     		adds	r3, r2, r3	@ tmp141, xTickCount.99, tmp142
 669 0020 BB60     		str	r3, [r7, #8]	@ tmp141, xTimeToWake
 815:Source/tasks.c **** 
 816:Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 817:Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 818:Source/tasks.c **** 				both lists. */
 819:Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 670              		.loc 1 819 0
 671 0022 0C4B     		ldr	r3, .L32+4	@ tmp143,
 672 0024 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.100, pxCurrentTCB
 673 0026 03F10403 		add	r3, r3, #4	@ D.6434, pxCurrentTCB.100,
 674 002a 1846     		mov	r0, r3	@, D.6434
 675 002c FFF7FEFF 		bl	uxListRemove	@
 820:Source/tasks.c **** 				{
 821:Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 822:Source/tasks.c **** 					no need to check, and the port reset macro can be called
 823:Source/tasks.c **** 					directly. */
 824:Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 825:Source/tasks.c **** 				}
 826:Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 676              		.loc 1 826 0
 677 0030 B868     		ldr	r0, [r7, #8]	@, xTimeToWake
 678 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 827:Source/tasks.c **** 			}
 828:Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 679              		.loc 1 828 0
 680 0036 FFF7FEFF 		bl	xTaskResumeAll	@
 681 003a F860     		str	r0, [r7, #12]	@, xAlreadyYielded
 682              	.L30:
 829:Source/tasks.c **** 		}
 830:Source/tasks.c **** 
 831:Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 832:Source/tasks.c **** 		have put ourselves to sleep. */
 833:Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 28


 683              		.loc 1 833 0
 684 003c FB68     		ldr	r3, [r7, #12]	@ tmp144, xAlreadyYielded
 685 003e 002B     		cmp	r3, #0	@ tmp144,
 686 0040 01D1     		bne	.L29	@,
 834:Source/tasks.c **** 		{
 835:Source/tasks.c **** 			portYIELD_WITHIN_API();
 687              		.loc 1 835 0
 688 0042 FFF7FEFF 		bl	vPortYieldFromISR	@
 689              	.L29:
 836:Source/tasks.c **** 		}
 837:Source/tasks.c **** 	}
 690              		.loc 1 837 0
 691 0046 07F11007 		add	r7, r7, #16	@,,
 692 004a BD46     		mov	sp, r7
 693 004c 80BD     		pop	{r7, pc}
 694              	.L33:
 695 004e 00BF     		.align	2
 696              	.L32:
 697 0050 00000000 		.word	xTickCount
 698 0054 00000000 		.word	pxCurrentTCB
 699              		.cfi_endproc
 700              	.LFE3:
 701              		.size	vTaskDelay, .-vTaskDelay
 702              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 703              		.align	2
 704              		.global	uxTaskPriorityGet
 705              		.thumb
 706              		.thumb_func
 707              		.type	uxTaskPriorityGet, %function
 708              	uxTaskPriorityGet:
 709              	.LFB4:
 838:Source/tasks.c **** 
 839:Source/tasks.c **** #endif
 840:Source/tasks.c **** /*-----------------------------------------------------------*/
 841:Source/tasks.c **** 
 842:Source/tasks.c **** #if ( INCLUDE_eTaskStateGet == 1 )
 843:Source/tasks.c **** 
 844:Source/tasks.c **** 	eTaskState eTaskStateGet( xTaskHandle pxTask )
 845:Source/tasks.c **** 	{
 846:Source/tasks.c **** 	eTaskState eReturn;
 847:Source/tasks.c **** 	xList *pxStateList;
 848:Source/tasks.c **** 	tskTCB *pxTCB;
 849:Source/tasks.c **** 
 850:Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTask;
 851:Source/tasks.c **** 
 852:Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 853:Source/tasks.c **** 		{
 854:Source/tasks.c **** 			/* The task calling this function is querying its own state. */
 855:Source/tasks.c **** 			eReturn = eRunning;
 856:Source/tasks.c **** 		}
 857:Source/tasks.c **** 		else
 858:Source/tasks.c **** 		{
 859:Source/tasks.c **** 			taskENTER_CRITICAL();
 860:Source/tasks.c **** 			{
 861:Source/tasks.c **** 				pxStateList = ( xList * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 862:Source/tasks.c **** 			}
 863:Source/tasks.c **** 			taskEXIT_CRITICAL();
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 29


 864:Source/tasks.c **** 
 865:Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 866:Source/tasks.c **** 			{
 867:Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 868:Source/tasks.c **** 				lists. */
 869:Source/tasks.c **** 				eReturn = eBlocked;
 870:Source/tasks.c **** 			}
 871:Source/tasks.c **** 
 872:Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 873:Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 874:Source/tasks.c **** 				{
 875:Source/tasks.c **** 					/* The task being queried is referenced from the suspended
 876:Source/tasks.c **** 					list. */
 877:Source/tasks.c **** 					eReturn = eSuspended;
 878:Source/tasks.c **** 				}
 879:Source/tasks.c **** 			#endif
 880:Source/tasks.c **** 
 881:Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 882:Source/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 883:Source/tasks.c **** 				{
 884:Source/tasks.c **** 					/* The task being queried is referenced from the deleted
 885:Source/tasks.c **** 					tasks list. */
 886:Source/tasks.c **** 					eReturn = eDeleted;
 887:Source/tasks.c **** 				}
 888:Source/tasks.c **** 			#endif
 889:Source/tasks.c **** 
 890:Source/tasks.c **** 			else
 891:Source/tasks.c **** 			{
 892:Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
 893:Source/tasks.c **** 				Ready (including pending ready) state. */
 894:Source/tasks.c **** 				eReturn = eReady;
 895:Source/tasks.c **** 			}
 896:Source/tasks.c **** 		}
 897:Source/tasks.c **** 
 898:Source/tasks.c **** 		return eReturn;
 899:Source/tasks.c **** 	}
 900:Source/tasks.c **** 
 901:Source/tasks.c **** #endif
 902:Source/tasks.c **** /*-----------------------------------------------------------*/
 903:Source/tasks.c **** 
 904:Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 905:Source/tasks.c **** 
 906:Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 907:Source/tasks.c **** 	{
 710              		.loc 1 907 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 16
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714 0000 80B5     		push	{r7, lr}	@
 715              	.LCFI12:
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0002 84B0     		sub	sp, sp, #16	@,,
 720              	.LCFI13:
 721              		.cfi_def_cfa_offset 24
 722 0004 00AF     		add	r7, sp, #0	@,,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 30


 723              	.LCFI14:
 724              		.cfi_def_cfa_register 7
 725 0006 7860     		str	r0, [r7, #4]	@ pxTask, pxTask
 908:Source/tasks.c **** 	tskTCB *pxTCB;
 909:Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 910:Source/tasks.c **** 
 911:Source/tasks.c **** 		taskENTER_CRITICAL();
 726              		.loc 1 911 0
 727 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 912:Source/tasks.c **** 		{
 913:Source/tasks.c **** 			/* If null is passed in here then we are changing the
 914:Source/tasks.c **** 			priority of the calling function. */
 915:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 728              		.loc 1 915 0
 729 000c 7B68     		ldr	r3, [r7, #4]	@ tmp137, pxTask
 730 000e 002B     		cmp	r3, #0	@ tmp137,
 731 0010 02D1     		bne	.L35	@,
 732              		.loc 1 915 0 is_stmt 0 discriminator 1
 733 0012 084B     		ldr	r3, .L38	@ tmp138,
 734 0014 1B68     		ldr	r3, [r3, #0]	@ iftmp.98, pxCurrentTCB
 735 0016 00E0     		b	.L36	@
 736              	.L35:
 737              		.loc 1 915 0 discriminator 2
 738 0018 7B68     		ldr	r3, [r7, #4]	@ iftmp.98, pxTask
 739              	.L36:
 740              		.loc 1 915 0 discriminator 3
 741 001a FB60     		str	r3, [r7, #12]	@ iftmp.98, pxTCB
 916:Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 742              		.loc 1 916 0 is_stmt 1 discriminator 3
 743 001c FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 744 001e DB6A     		ldr	r3, [r3, #44]	@ tmp140, pxTCB_5->uxPriority
 745 0020 BB60     		str	r3, [r7, #8]	@ tmp140, uxReturn
 917:Source/tasks.c **** 		}
 918:Source/tasks.c **** 		taskEXIT_CRITICAL();
 746              		.loc 1 918 0 discriminator 3
 747 0022 FFF7FEFF 		bl	vPortExitCritical	@
 919:Source/tasks.c **** 
 920:Source/tasks.c **** 		return uxReturn;
 748              		.loc 1 920 0 discriminator 3
 749 0026 BB68     		ldr	r3, [r7, #8]	@ D.6428, uxReturn
 921:Source/tasks.c **** 	}
 750              		.loc 1 921 0 discriminator 3
 751 0028 1846     		mov	r0, r3	@, <retval>
 752 002a 07F11007 		add	r7, r7, #16	@,,
 753 002e BD46     		mov	sp, r7
 754 0030 80BD     		pop	{r7, pc}
 755              	.L39:
 756 0032 00BF     		.align	2
 757              	.L38:
 758 0034 00000000 		.word	pxCurrentTCB
 759              		.cfi_endproc
 760              	.LFE4:
 761              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 762              		.section	.text.vTaskPrioritySet,"ax",%progbits
 763              		.align	2
 764              		.global	vTaskPrioritySet
 765              		.thumb
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 31


 766              		.thumb_func
 767              		.type	vTaskPrioritySet, %function
 768              	vTaskPrioritySet:
 769              	.LFB5:
 922:Source/tasks.c **** 
 923:Source/tasks.c **** #endif
 924:Source/tasks.c **** /*-----------------------------------------------------------*/
 925:Source/tasks.c **** 
 926:Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 927:Source/tasks.c **** 
 928:Source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 929:Source/tasks.c **** 	{
 770              		.loc 1 929 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 24
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774 0000 80B5     		push	{r7, lr}	@
 775              	.LCFI15:
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 0002 86B0     		sub	sp, sp, #24	@,,
 780              	.LCFI16:
 781              		.cfi_def_cfa_offset 32
 782 0004 00AF     		add	r7, sp, #0	@,,
 783              	.LCFI17:
 784              		.cfi_def_cfa_register 7
 785 0006 7860     		str	r0, [r7, #4]	@ pxTask, pxTask
 786 0008 3960     		str	r1, [r7, #0]	@ uxNewPriority, uxNewPriority
 930:Source/tasks.c **** 	tskTCB *pxTCB;
 931:Source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority, uxPriorityUsedOnEntry;
 932:Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 787              		.loc 1 932 0
 788 000a 4FF00003 		mov	r3, #0	@ tmp149,
 789 000e 7B61     		str	r3, [r7, #20]	@ tmp149, xYieldRequired
 933:Source/tasks.c **** 
 934:Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 935:Source/tasks.c **** 
 936:Source/tasks.c **** 		/* Ensure the new priority is valid. */
 937:Source/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 790              		.loc 1 937 0
 791 0010 3B68     		ldr	r3, [r7, #0]	@ tmp150, uxNewPriority
 792 0012 042B     		cmp	r3, #4	@ tmp150,
 793 0014 02D9     		bls	.L41	@,
 938:Source/tasks.c **** 		{
 939:Source/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 794              		.loc 1 939 0
 795 0016 4FF00403 		mov	r3, #4	@ tmp151,
 796 001a 3B60     		str	r3, [r7, #0]	@ tmp151, uxNewPriority
 797              	.L41:
 940:Source/tasks.c **** 		}
 941:Source/tasks.c **** 
 942:Source/tasks.c **** 		taskENTER_CRITICAL();
 798              		.loc 1 942 0
 799 001c FFF7FEFF 		bl	vPortEnterCritical	@
 943:Source/tasks.c **** 		{
 944:Source/tasks.c **** 			if( pxTask == pxCurrentTCB )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 32


 800              		.loc 1 944 0
 801 0020 3A4B     		ldr	r3, .L51	@ tmp152,
 802 0022 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.94, pxCurrentTCB
 803 0024 7A68     		ldr	r2, [r7, #4]	@ tmp153, pxTask
 804 0026 9A42     		cmp	r2, r3	@ tmp153, pxCurrentTCB.94
 805 0028 02D1     		bne	.L42	@,
 945:Source/tasks.c **** 			{
 946:Source/tasks.c **** 				pxTask = NULL;
 806              		.loc 1 946 0
 807 002a 4FF00003 		mov	r3, #0	@ tmp154,
 808 002e 7B60     		str	r3, [r7, #4]	@ tmp154, pxTask
 809              	.L42:
 947:Source/tasks.c **** 			}
 948:Source/tasks.c **** 
 949:Source/tasks.c **** 			/* If null is passed in here then we are changing the
 950:Source/tasks.c **** 			priority of the calling function. */
 951:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 810              		.loc 1 951 0
 811 0030 7B68     		ldr	r3, [r7, #4]	@ tmp155, pxTask
 812 0032 002B     		cmp	r3, #0	@ tmp155,
 813 0034 02D1     		bne	.L43	@,
 814              		.loc 1 951 0 is_stmt 0 discriminator 1
 815 0036 354B     		ldr	r3, .L51	@ tmp156,
 816 0038 1B68     		ldr	r3, [r3, #0]	@ iftmp.95, pxCurrentTCB
 817 003a 00E0     		b	.L44	@
 818              	.L43:
 819              		.loc 1 951 0 discriminator 2
 820 003c 7B68     		ldr	r3, [r7, #4]	@ iftmp.95, pxTask
 821              	.L44:
 822              		.loc 1 951 0 discriminator 3
 823 003e 3B61     		str	r3, [r7, #16]	@ iftmp.95, pxTCB
 952:Source/tasks.c **** 
 953:Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 954:Source/tasks.c **** 
 955:Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 956:Source/tasks.c **** 			{
 957:Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 824              		.loc 1 957 0 is_stmt 1 discriminator 3
 825 0040 3B69     		ldr	r3, [r7, #16]	@ tmp157, pxTCB
 826 0042 5B6C     		ldr	r3, [r3, #68]	@ tmp158, pxTCB_13->uxBasePriority
 827 0044 FB60     		str	r3, [r7, #12]	@ tmp158, uxCurrentPriority
 958:Source/tasks.c **** 			}
 959:Source/tasks.c **** 			#else
 960:Source/tasks.c **** 			{
 961:Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 962:Source/tasks.c **** 			}
 963:Source/tasks.c **** 			#endif
 964:Source/tasks.c **** 
 965:Source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 828              		.loc 1 965 0 discriminator 3
 829 0046 FA68     		ldr	r2, [r7, #12]	@ tmp159, uxCurrentPriority
 830 0048 3B68     		ldr	r3, [r7, #0]	@ tmp160, uxNewPriority
 831 004a 9A42     		cmp	r2, r3	@ tmp159, tmp160
 832 004c 57D0     		beq	.L45	@,
 966:Source/tasks.c **** 			{
 967:Source/tasks.c **** 				/* The priority change may have readied a task of higher
 968:Source/tasks.c **** 				priority than the calling task. */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 33


 969:Source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 833              		.loc 1 969 0
 834 004e 3A68     		ldr	r2, [r7, #0]	@ tmp161, uxNewPriority
 835 0050 FB68     		ldr	r3, [r7, #12]	@ tmp162, uxCurrentPriority
 836 0052 9A42     		cmp	r2, r3	@ tmp161, tmp162
 837 0054 06D9     		bls	.L46	@,
 970:Source/tasks.c **** 				{
 971:Source/tasks.c **** 					if( pxTask != NULL )
 838              		.loc 1 971 0
 839 0056 7B68     		ldr	r3, [r7, #4]	@ tmp163, pxTask
 840 0058 002B     		cmp	r3, #0	@ tmp163,
 841 005a 09D0     		beq	.L47	@,
 972:Source/tasks.c **** 					{
 973:Source/tasks.c **** 						/* The priority of another task is being raised.  If we
 974:Source/tasks.c **** 						were raising the priority of the currently running task
 975:Source/tasks.c **** 						there would be no need to switch as it must have already
 976:Source/tasks.c **** 						been the highest priority task. */
 977:Source/tasks.c **** 						xYieldRequired = pdTRUE;
 842              		.loc 1 977 0
 843 005c 4FF00103 		mov	r3, #1	@ tmp164,
 844 0060 7B61     		str	r3, [r7, #20]	@ tmp164, xYieldRequired
 845 0062 05E0     		b	.L47	@
 846              	.L46:
 978:Source/tasks.c **** 					}
 979:Source/tasks.c **** 				}
 980:Source/tasks.c **** 				else if( pxTask == NULL )
 847              		.loc 1 980 0
 848 0064 7B68     		ldr	r3, [r7, #4]	@ tmp165, pxTask
 849 0066 002B     		cmp	r3, #0	@ tmp165,
 850 0068 02D1     		bne	.L47	@,
 981:Source/tasks.c **** 				{
 982:Source/tasks.c **** 					/* Setting our own priority down means there may now be another
 983:Source/tasks.c **** 					task of higher priority that is ready to execute. */
 984:Source/tasks.c **** 					xYieldRequired = pdTRUE;
 851              		.loc 1 984 0
 852 006a 4FF00103 		mov	r3, #1	@ tmp166,
 853 006e 7B61     		str	r3, [r7, #20]	@ tmp166, xYieldRequired
 854              	.L47:
 985:Source/tasks.c **** 				}
 986:Source/tasks.c **** 
 987:Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
 988:Source/tasks.c **** 				before its uxPriority member is changed so the
 989:Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
 990:Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 855              		.loc 1 990 0
 856 0070 3B69     		ldr	r3, [r7, #16]	@ tmp167, pxTCB
 857 0072 DB6A     		ldr	r3, [r3, #44]	@ tmp168, pxTCB_13->uxPriority
 858 0074 BB60     		str	r3, [r7, #8]	@ tmp168, uxPriorityUsedOnEntry
 991:Source/tasks.c **** 
 992:Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 993:Source/tasks.c **** 				{
 994:Source/tasks.c **** 					/* Only change the priority being used if the task is not
 995:Source/tasks.c **** 					currently using an inherited priority. */
 996:Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 859              		.loc 1 996 0
 860 0076 3B69     		ldr	r3, [r7, #16]	@ tmp169, pxTCB
 861 0078 5A6C     		ldr	r2, [r3, #68]	@ D.6401, pxTCB_13->uxBasePriority
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 34


 862 007a 3B69     		ldr	r3, [r7, #16]	@ tmp170, pxTCB
 863 007c DB6A     		ldr	r3, [r3, #44]	@ D.6402, pxTCB_13->uxPriority
 864 007e 9A42     		cmp	r2, r3	@ D.6401, D.6402
 865 0080 02D1     		bne	.L48	@,
 997:Source/tasks.c **** 					{
 998:Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 866              		.loc 1 998 0
 867 0082 3B69     		ldr	r3, [r7, #16]	@ tmp171, pxTCB
 868 0084 3A68     		ldr	r2, [r7, #0]	@ tmp172, uxNewPriority
 869 0086 DA62     		str	r2, [r3, #44]	@ tmp172, pxTCB_13->uxPriority
 870              	.L48:
 999:Source/tasks.c **** 					}
1000:Source/tasks.c **** 
1001:Source/tasks.c **** 					/* The base priority gets set whatever. */
1002:Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 871              		.loc 1 1002 0
 872 0088 3B69     		ldr	r3, [r7, #16]	@ tmp173, pxTCB
 873 008a 3A68     		ldr	r2, [r7, #0]	@ tmp174, uxNewPriority
 874 008c 5A64     		str	r2, [r3, #68]	@ tmp174, pxTCB_13->uxBasePriority
1003:Source/tasks.c **** 				}
1004:Source/tasks.c **** 				#else
1005:Source/tasks.c **** 				{
1006:Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1007:Source/tasks.c **** 				}
1008:Source/tasks.c **** 				#endif
1009:Source/tasks.c **** 
1010:Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 875              		.loc 1 1010 0
 876 008e 3B68     		ldr	r3, [r7, #0]	@ tmp175, uxNewPriority
 877 0090 C3F10502 		rsb	r2, r3, #5	@ D.6405, tmp175,
 878 0094 3B69     		ldr	r3, [r7, #16]	@ tmp176, pxTCB
 879 0096 9A61     		str	r2, [r3, #24]	@ D.6405, pxTCB_13->xEventListItem.xItemValue
1011:Source/tasks.c **** 
1012:Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1013:Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1014:Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1015:Source/tasks.c **** 				in the queue appropriate to its new priority. */
1016:Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 880              		.loc 1 1016 0
 881 0098 3B69     		ldr	r3, [r7, #16]	@ tmp177, pxTCB
 882 009a 5969     		ldr	r1, [r3, #20]	@ D.6406, pxTCB_13->xGenericListItem.pvContainer
 883 009c FA68     		ldr	r2, [r7, #12]	@ tmp178, uxCurrentPriority
 884 009e 1346     		mov	r3, r2	@ tmp179, tmp178
 885 00a0 4FEA8303 		lsl	r3, r3, #2	@ tmp179, tmp179,
 886 00a4 9B18     		adds	r3, r3, r2	@ tmp179, tmp179, tmp178
 887 00a6 4FEA8303 		lsl	r3, r3, #2	@ tmp180, tmp179,
 888 00aa 194A     		ldr	r2, .L51+4	@ tmp181,
 889 00ac 9B18     		adds	r3, r3, r2	@ D.6407, tmp179, tmp181
 890 00ae 9942     		cmp	r1, r3	@ D.6406, D.6407
 891 00b0 20D1     		bne	.L49	@,
1017:Source/tasks.c **** 				{
1018:Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1019:Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1020:Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1021:Source/tasks.c **** 					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 892              		.loc 1 1021 0
 893 00b2 3B69     		ldr	r3, [r7, #16]	@ tmp182, pxTCB
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 35


 894 00b4 03F10403 		add	r3, r3, #4	@ D.6410, tmp182,
 895 00b8 1846     		mov	r0, r3	@, D.6410
 896 00ba FFF7FEFF 		bl	uxListRemove	@
1022:Source/tasks.c **** 					{
1023:Source/tasks.c **** 						taskRESET_READY_PRIORITY( uxPriorityUsedOnEntry );
1024:Source/tasks.c **** 					}
1025:Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 897              		.loc 1 1025 0
 898 00be 3B69     		ldr	r3, [r7, #16]	@ tmp183, pxTCB
 899 00c0 DA6A     		ldr	r2, [r3, #44]	@ D.6414, pxTCB_13->uxPriority
 900 00c2 144B     		ldr	r3, .L51+8	@ tmp184,
 901 00c4 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.96, uxTopReadyPriority
 902 00c6 9A42     		cmp	r2, r3	@ D.6414, uxTopReadyPriority.96
 903 00c8 03D9     		bls	.L50	@,
 904              		.loc 1 1025 0 is_stmt 0 discriminator 1
 905 00ca 3B69     		ldr	r3, [r7, #16]	@ tmp185, pxTCB
 906 00cc DA6A     		ldr	r2, [r3, #44]	@ uxTopReadyPriority.97, pxTCB_13->uxPriority
 907 00ce 114B     		ldr	r3, .L51+8	@ tmp186,
 908 00d0 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.97, uxTopReadyPriority
 909              	.L50:
 910              		.loc 1 1025 0 discriminator 2
 911 00d2 3B69     		ldr	r3, [r7, #16]	@ tmp187, pxTCB
 912 00d4 DA6A     		ldr	r2, [r3, #44]	@ D.6419, pxTCB_13->uxPriority
 913 00d6 1346     		mov	r3, r2	@ tmp188, D.6419
 914 00d8 4FEA8303 		lsl	r3, r3, #2	@ tmp188, tmp188,
 915 00dc 9B18     		adds	r3, r3, r2	@ tmp188, tmp188, D.6419
 916 00de 4FEA8303 		lsl	r3, r3, #2	@ tmp189, tmp188,
 917 00e2 0B4A     		ldr	r2, .L51+4	@ tmp190,
 918 00e4 9A18     		adds	r2, r3, r2	@ D.6420, tmp188, tmp190
 919 00e6 3B69     		ldr	r3, [r7, #16]	@ tmp191, pxTCB
 920 00e8 03F10403 		add	r3, r3, #4	@ D.6421, tmp191,
 921 00ec 1046     		mov	r0, r2	@, D.6420
 922 00ee 1946     		mov	r1, r3	@, D.6421
 923 00f0 FFF7FEFF 		bl	vListInsertEnd	@
 924              	.L49:
1026:Source/tasks.c **** 				}
1027:Source/tasks.c **** 
1028:Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 925              		.loc 1 1028 0 is_stmt 1
 926 00f4 7B69     		ldr	r3, [r7, #20]	@ tmp192, xYieldRequired
 927 00f6 012B     		cmp	r3, #1	@ tmp192,
 928 00f8 01D1     		bne	.L45	@,
1029:Source/tasks.c **** 				{
1030:Source/tasks.c **** 					portYIELD_WITHIN_API();
 929              		.loc 1 1030 0
 930 00fa FFF7FEFF 		bl	vPortYieldFromISR	@
 931              	.L45:
1031:Source/tasks.c **** 				}
1032:Source/tasks.c **** 			}
1033:Source/tasks.c **** 		}
1034:Source/tasks.c **** 		taskEXIT_CRITICAL();
 932              		.loc 1 1034 0
 933 00fe FFF7FEFF 		bl	vPortExitCritical	@
1035:Source/tasks.c **** 
1036:Source/tasks.c **** 		/* Remove compiler warning about unused parameter when the port
1037:Source/tasks.c **** 		optimised task selection is not being used. */
1038:Source/tasks.c **** 		( void ) uxPriorityUsedOnEntry;
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 36


1039:Source/tasks.c **** 	}
 934              		.loc 1 1039 0
 935 0102 07F11807 		add	r7, r7, #24	@,,
 936 0106 BD46     		mov	sp, r7
 937 0108 80BD     		pop	{r7, pc}
 938              	.L52:
 939 010a 00BF     		.align	2
 940              	.L51:
 941 010c 00000000 		.word	pxCurrentTCB
 942 0110 00000000 		.word	pxReadyTasksLists
 943 0114 00000000 		.word	uxTopReadyPriority
 944              		.cfi_endproc
 945              	.LFE5:
 946              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 947              		.section	.text.vTaskSuspend,"ax",%progbits
 948              		.align	2
 949              		.global	vTaskSuspend
 950              		.thumb
 951              		.thumb_func
 952              		.type	vTaskSuspend, %function
 953              	vTaskSuspend:
 954              	.LFB6:
1040:Source/tasks.c **** 
1041:Source/tasks.c **** #endif
1042:Source/tasks.c **** /*-----------------------------------------------------------*/
1043:Source/tasks.c **** 
1044:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1045:Source/tasks.c **** 
1046:Source/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
1047:Source/tasks.c **** 	{
 955              		.loc 1 1047 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 16
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959 0000 80B5     		push	{r7, lr}	@
 960              	.LCFI18:
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 84B0     		sub	sp, sp, #16	@,,
 965              	.LCFI19:
 966              		.cfi_def_cfa_offset 24
 967 0004 00AF     		add	r7, sp, #0	@,,
 968              	.LCFI20:
 969              		.cfi_def_cfa_register 7
 970 0006 7860     		str	r0, [r7, #4]	@ pxTaskToSuspend, pxTaskToSuspend
1048:Source/tasks.c **** 	tskTCB *pxTCB;
1049:Source/tasks.c **** 
1050:Source/tasks.c **** 		taskENTER_CRITICAL();
 971              		.loc 1 1050 0
 972 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1051:Source/tasks.c **** 		{
1052:Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
1053:Source/tasks.c **** 			suspended. */
1054:Source/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 973              		.loc 1 1054 0
 974 000c 214B     		ldr	r3, .L61	@ tmp144,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 37


 975 000e 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.90, pxCurrentTCB
 976 0010 7A68     		ldr	r2, [r7, #4]	@ tmp145, pxTaskToSuspend
 977 0012 9A42     		cmp	r2, r3	@ tmp145, pxCurrentTCB.90
 978 0014 02D1     		bne	.L54	@,
1055:Source/tasks.c **** 			{
1056:Source/tasks.c **** 				pxTaskToSuspend = NULL;
 979              		.loc 1 1056 0
 980 0016 4FF00003 		mov	r3, #0	@ tmp146,
 981 001a 7B60     		str	r3, [r7, #4]	@ tmp146, pxTaskToSuspend
 982              	.L54:
1057:Source/tasks.c **** 			}
1058:Source/tasks.c **** 
1059:Source/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
1060:Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 983              		.loc 1 1060 0
 984 001c 7B68     		ldr	r3, [r7, #4]	@ tmp147, pxTaskToSuspend
 985 001e 002B     		cmp	r3, #0	@ tmp147,
 986 0020 02D1     		bne	.L55	@,
 987              		.loc 1 1060 0 is_stmt 0 discriminator 1
 988 0022 1C4B     		ldr	r3, .L61	@ tmp148,
 989 0024 1B68     		ldr	r3, [r3, #0]	@ iftmp.91, pxCurrentTCB
 990 0026 00E0     		b	.L56	@
 991              	.L55:
 992              		.loc 1 1060 0 discriminator 2
 993 0028 7B68     		ldr	r3, [r7, #4]	@ iftmp.91, pxTaskToSuspend
 994              	.L56:
 995              		.loc 1 1060 0 discriminator 3
 996 002a FB60     		str	r3, [r7, #12]	@ iftmp.91, pxTCB
1061:Source/tasks.c **** 
1062:Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1063:Source/tasks.c **** 
1064:Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
1065:Source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 997              		.loc 1 1065 0 is_stmt 1 discriminator 3
 998 002c FB68     		ldr	r3, [r7, #12]	@ tmp149, pxTCB
 999 002e 03F10403 		add	r3, r3, #4	@ D.6363, tmp149,
 1000 0032 1846     		mov	r0, r3	@, D.6363
 1001 0034 FFF7FEFF 		bl	uxListRemove	@
1066:Source/tasks.c **** 			{
1067:Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1068:Source/tasks.c **** 			}
1069:Source/tasks.c **** 
1070:Source/tasks.c **** 			/* Is the task waiting on an event also? */
1071:Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 1002              		.loc 1 1071 0 discriminator 3
 1003 0038 FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 1004 003a 9B6A     		ldr	r3, [r3, #40]	@ D.6367, pxTCB_8->xEventListItem.pvContainer
 1005 003c 002B     		cmp	r3, #0	@ D.6367,
 1006 003e 05D0     		beq	.L57	@,
1072:Source/tasks.c **** 			{
1073:Source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
 1007              		.loc 1 1073 0
 1008 0040 FB68     		ldr	r3, [r7, #12]	@ tmp151, pxTCB
 1009 0042 03F11803 		add	r3, r3, #24	@ D.6370, tmp151,
 1010 0046 1846     		mov	r0, r3	@, D.6370
 1011 0048 FFF7FEFF 		bl	uxListRemove	@
 1012              	.L57:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 38


1074:Source/tasks.c **** 			}
1075:Source/tasks.c **** 
1076:Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1013              		.loc 1 1076 0
 1014 004c FB68     		ldr	r3, [r7, #12]	@ tmp152, pxTCB
 1015 004e 03F10403 		add	r3, r3, #4	@ D.6371, tmp152,
 1016 0052 1148     		ldr	r0, .L61+4	@,
 1017 0054 1946     		mov	r1, r3	@, D.6371
 1018 0056 FFF7FEFF 		bl	vListInsertEnd	@
1077:Source/tasks.c **** 		}
1078:Source/tasks.c **** 		taskEXIT_CRITICAL();
 1019              		.loc 1 1078 0
 1020 005a FFF7FEFF 		bl	vPortExitCritical	@
1079:Source/tasks.c **** 
1080:Source/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 1021              		.loc 1 1080 0
 1022 005e 7B68     		ldr	r3, [r7, #4]	@ tmp153, pxTaskToSuspend
 1023 0060 002B     		cmp	r3, #0	@ tmp153,
 1024 0062 13D1     		bne	.L53	@,
1081:Source/tasks.c **** 		{
1082:Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1025              		.loc 1 1082 0
 1026 0064 0D4B     		ldr	r3, .L61+8	@ tmp154,
 1027 0066 1B68     		ldr	r3, [r3, #0]	@ xSchedulerRunning.92, xSchedulerRunning
 1028 0068 002B     		cmp	r3, #0	@ xSchedulerRunning.92,
 1029 006a 02D0     		beq	.L59	@,
1083:Source/tasks.c **** 			{
1084:Source/tasks.c **** 				/* We have just suspended the current task. */
1085:Source/tasks.c **** 				portYIELD_WITHIN_API();
 1030              		.loc 1 1085 0
 1031 006c FFF7FEFF 		bl	vPortYieldFromISR	@
 1032 0070 0CE0     		b	.L53	@
 1033              	.L59:
1086:Source/tasks.c **** 			}
1087:Source/tasks.c **** 			else
1088:Source/tasks.c **** 			{
1089:Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1090:Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1091:Source/tasks.c **** 				must be adjusted to point to a different task. */
1092:Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1034              		.loc 1 1092 0
 1035 0072 094B     		ldr	r3, .L61+4	@ tmp155,
 1036 0074 1A68     		ldr	r2, [r3, #0]	@ D.6378, xSuspendedTaskList.uxNumberOfItems
 1037 0076 0A4B     		ldr	r3, .L61+12	@ tmp156,
 1038 0078 1B68     		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.93, uxCurrentNumberOfTasks
 1039 007a 9A42     		cmp	r2, r3	@ D.6378, uxCurrentNumberOfTasks.93
 1040 007c 04D1     		bne	.L60	@,
1093:Source/tasks.c **** 				{
1094:Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1095:Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1096:Source/tasks.c **** 					be set to point to it no matter what its relative priority
1097:Source/tasks.c **** 					is. */
1098:Source/tasks.c **** 					pxCurrentTCB = NULL;
 1041              		.loc 1 1098 0
 1042 007e 054B     		ldr	r3, .L61	@ tmp157,
 1043 0080 4FF00002 		mov	r2, #0	@ tmp158,
 1044 0084 1A60     		str	r2, [r3, #0]	@ tmp158, pxCurrentTCB
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 39


 1045 0086 01E0     		b	.L53	@
 1046              	.L60:
1099:Source/tasks.c **** 				}
1100:Source/tasks.c **** 				else
1101:Source/tasks.c **** 				{
1102:Source/tasks.c **** 					vTaskSwitchContext();
 1047              		.loc 1 1102 0
 1048 0088 FFF7FEFF 		bl	vTaskSwitchContext	@
 1049              	.L53:
1103:Source/tasks.c **** 				}
1104:Source/tasks.c **** 			}
1105:Source/tasks.c **** 		}
1106:Source/tasks.c **** 	}
 1050              		.loc 1 1106 0
 1051 008c 07F11007 		add	r7, r7, #16	@,,
 1052 0090 BD46     		mov	sp, r7
 1053 0092 80BD     		pop	{r7, pc}
 1054              	.L62:
 1055              		.align	2
 1056              	.L61:
 1057 0094 00000000 		.word	pxCurrentTCB
 1058 0098 00000000 		.word	xSuspendedTaskList
 1059 009c 00000000 		.word	xSchedulerRunning
 1060 00a0 00000000 		.word	uxCurrentNumberOfTasks
 1061              		.cfi_endproc
 1062              	.LFE6:
 1063              		.size	vTaskSuspend, .-vTaskSuspend
 1064              		.section	.text.xTaskIsTaskSuspended,"ax",%progbits
 1065              		.align	2
 1066              		.global	xTaskIsTaskSuspended
 1067              		.thumb
 1068              		.thumb_func
 1069              		.type	xTaskIsTaskSuspended, %function
 1070              	xTaskIsTaskSuspended:
 1071              	.LFB7:
1107:Source/tasks.c **** 
1108:Source/tasks.c **** #endif
1109:Source/tasks.c **** /*-----------------------------------------------------------*/
1110:Source/tasks.c **** 
1111:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1112:Source/tasks.c **** 
1113:Source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
1114:Source/tasks.c **** 	{
 1072              		.loc 1 1114 0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 16
 1075              		@ frame_needed = 1, uses_anonymous_args = 0
 1076              		@ link register save eliminated.
 1077 0000 80B4     		push	{r7}	@
 1078              	.LCFI21:
 1079              		.cfi_def_cfa_offset 4
 1080              		.cfi_offset 7, -4
 1081 0002 85B0     		sub	sp, sp, #20	@,,
 1082              	.LCFI22:
 1083              		.cfi_def_cfa_offset 24
 1084 0004 00AF     		add	r7, sp, #0	@,,
 1085              	.LCFI23:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 40


 1086              		.cfi_def_cfa_register 7
 1087 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1115:Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 1088              		.loc 1 1115 0
 1089 0008 4FF00003 		mov	r3, #0	@ tmp139,
 1090 000c FB60     		str	r3, [r7, #12]	@ tmp139, xReturn
1116:Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 1091              		.loc 1 1116 0
 1092 000e 7B68     		ldr	r3, [r7, #4]	@ tmp140, xTask
 1093 0010 BB60     		str	r3, [r7, #8]	@ tmp140, pxTCB
1117:Source/tasks.c **** 
1118:Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1119:Source/tasks.c **** 		configASSERT( xTask );
1120:Source/tasks.c **** 
1121:Source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
1122:Source/tasks.c **** 		suspended list? */
1123:Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1094              		.loc 1 1123 0
 1095 0012 BB68     		ldr	r3, [r7, #8]	@ tmp141, pxTCB
 1096 0014 5A69     		ldr	r2, [r3, #20]	@ D.6345, pxTCB_4->xGenericListItem.pvContainer
 1097 0016 0B4B     		ldr	r3, .L66	@ tmp142,
 1098 0018 9A42     		cmp	r2, r3	@ D.6345, tmp142
 1099 001a 0BD1     		bne	.L64	@,
1124:Source/tasks.c **** 		{
1125:Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1126:Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 1100              		.loc 1 1126 0
 1101 001c BB68     		ldr	r3, [r7, #8]	@ tmp143, pxTCB
 1102 001e 9A6A     		ldr	r2, [r3, #40]	@ D.6348, pxTCB_4->xEventListItem.pvContainer
 1103 0020 094B     		ldr	r3, .L66+4	@ tmp144,
 1104 0022 9A42     		cmp	r2, r3	@ D.6348, tmp144
 1105 0024 06D0     		beq	.L64	@,
1127:Source/tasks.c **** 			{
1128:Source/tasks.c **** 				/* Is it in the suspended list because it is in the
1129:Source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
1130:Source/tasks.c **** 				list because it is blocked on a task with no timeout
1131:Source/tasks.c **** 				specified. */
1132:Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 1106              		.loc 1 1132 0
 1107 0026 BB68     		ldr	r3, [r7, #8]	@ tmp145, pxTCB
 1108 0028 9B6A     		ldr	r3, [r3, #40]	@ D.6351, pxTCB_4->xEventListItem.pvContainer
 1109 002a 002B     		cmp	r3, #0	@ D.6351,
 1110 002c 02D1     		bne	.L64	@,
1133:Source/tasks.c **** 				{
1134:Source/tasks.c **** 					xReturn = pdTRUE;
 1111              		.loc 1 1134 0
 1112 002e 4FF00103 		mov	r3, #1	@ tmp146,
 1113 0032 FB60     		str	r3, [r7, #12]	@ tmp146, xReturn
 1114              	.L64:
1135:Source/tasks.c **** 				}
1136:Source/tasks.c **** 			}
1137:Source/tasks.c **** 		}
1138:Source/tasks.c **** 
1139:Source/tasks.c **** 		return xReturn;
 1115              		.loc 1 1139 0
 1116 0034 FB68     		ldr	r3, [r7, #12]	@ D.6354, xReturn
1140:Source/tasks.c **** 	}
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 41


 1117              		.loc 1 1140 0
 1118 0036 1846     		mov	r0, r3	@, <retval>
 1119 0038 07F11407 		add	r7, r7, #20	@,,
 1120 003c BD46     		mov	sp, r7
 1121 003e 80BC     		pop	{r7}
 1122 0040 7047     		bx	lr
 1123              	.L67:
 1124 0042 00BF     		.align	2
 1125              	.L66:
 1126 0044 00000000 		.word	xSuspendedTaskList
 1127 0048 00000000 		.word	xPendingReadyList
 1128              		.cfi_endproc
 1129              	.LFE7:
 1130              		.size	xTaskIsTaskSuspended, .-xTaskIsTaskSuspended
 1131              		.section	.text.vTaskResume,"ax",%progbits
 1132              		.align	2
 1133              		.global	vTaskResume
 1134              		.thumb
 1135              		.thumb_func
 1136              		.type	vTaskResume, %function
 1137              	vTaskResume:
 1138              	.LFB8:
1141:Source/tasks.c **** 
1142:Source/tasks.c **** #endif
1143:Source/tasks.c **** /*-----------------------------------------------------------*/
1144:Source/tasks.c **** 
1145:Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1146:Source/tasks.c **** 
1147:Source/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
1148:Source/tasks.c **** 	{
 1139              		.loc 1 1148 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 16
 1142              		@ frame_needed = 1, uses_anonymous_args = 0
 1143 0000 80B5     		push	{r7, lr}	@
 1144              	.LCFI24:
 1145              		.cfi_def_cfa_offset 8
 1146              		.cfi_offset 7, -8
 1147              		.cfi_offset 14, -4
 1148 0002 84B0     		sub	sp, sp, #16	@,,
 1149              	.LCFI25:
 1150              		.cfi_def_cfa_offset 24
 1151 0004 00AF     		add	r7, sp, #0	@,,
 1152              	.LCFI26:
 1153              		.cfi_def_cfa_register 7
 1154 0006 7860     		str	r0, [r7, #4]	@ pxTaskToResume, pxTaskToResume
1149:Source/tasks.c **** 	tskTCB *pxTCB;
1150:Source/tasks.c **** 
1151:Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1152:Source/tasks.c **** 		configASSERT( pxTaskToResume );
1153:Source/tasks.c **** 
1154:Source/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
1155:Source/tasks.c **** 		it in the ready list. */
1156:Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1155              		.loc 1 1156 0
 1156 0008 7B68     		ldr	r3, [r7, #4]	@ tmp146, pxTaskToResume
 1157 000a FB60     		str	r3, [r7, #12]	@ tmp146, pxTCB
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 42


1157:Source/tasks.c **** 
1158:Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1159:Source/tasks.c **** 		currently executing task. */
1160:Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1158              		.loc 1 1160 0
 1159 000c FB68     		ldr	r3, [r7, #12]	@ tmp147, pxTCB
 1160 000e 002B     		cmp	r3, #0	@ tmp147,
 1161 0010 38D0     		beq	.L68	@,
 1162              		.loc 1 1160 0 is_stmt 0 discriminator 1
 1163 0012 1E4B     		ldr	r3, .L72	@ tmp148,
 1164 0014 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.86, pxCurrentTCB
 1165 0016 FA68     		ldr	r2, [r7, #12]	@ tmp149, pxTCB
 1166 0018 9A42     		cmp	r2, r3	@ tmp149, pxCurrentTCB.86
 1167 001a 33D0     		beq	.L68	@,
1161:Source/tasks.c **** 		{
1162:Source/tasks.c **** 			taskENTER_CRITICAL();
 1168              		.loc 1 1162 0 is_stmt 1
 1169 001c FFF7FEFF 		bl	vPortEnterCritical	@
1163:Source/tasks.c **** 			{
1164:Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1170              		.loc 1 1164 0
 1171 0020 F868     		ldr	r0, [r7, #12]	@, pxTCB
 1172 0022 FFF7FEFF 		bl	xTaskIsTaskSuspended	@
 1173 0026 0346     		mov	r3, r0	@ D.6328,
 1174 0028 012B     		cmp	r3, #1	@ D.6328,
 1175 002a 29D1     		bne	.L70	@,
1165:Source/tasks.c **** 				{
1166:Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1167:Source/tasks.c **** 
1168:Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1169:Source/tasks.c **** 					lists even if the scheduler is suspended. */
1170:Source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
 1176              		.loc 1 1170 0
 1177 002c FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 1178 002e 03F10403 		add	r3, r3, #4	@ D.6331, tmp150,
 1179 0032 1846     		mov	r0, r3	@, D.6331
 1180 0034 FFF7FEFF 		bl	uxListRemove	@
1171:Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1181              		.loc 1 1171 0
 1182 0038 FB68     		ldr	r3, [r7, #12]	@ tmp151, pxTCB
 1183 003a DA6A     		ldr	r2, [r3, #44]	@ D.6332, pxTCB_2->uxPriority
 1184 003c 144B     		ldr	r3, .L72+4	@ tmp152,
 1185 003e 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.87, uxTopReadyPriority
 1186 0040 9A42     		cmp	r2, r3	@ D.6332, uxTopReadyPriority.87
 1187 0042 03D9     		bls	.L71	@,
 1188              		.loc 1 1171 0 is_stmt 0 discriminator 1
 1189 0044 FB68     		ldr	r3, [r7, #12]	@ tmp153, pxTCB
 1190 0046 DA6A     		ldr	r2, [r3, #44]	@ uxTopReadyPriority.88, pxTCB_2->uxPriority
 1191 0048 114B     		ldr	r3, .L72+4	@ tmp154,
 1192 004a 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.88, uxTopReadyPriority
 1193              	.L71:
 1194              		.loc 1 1171 0 discriminator 2
 1195 004c FB68     		ldr	r3, [r7, #12]	@ tmp155, pxTCB
 1196 004e DA6A     		ldr	r2, [r3, #44]	@ D.6337, pxTCB_2->uxPriority
 1197 0050 1346     		mov	r3, r2	@ tmp156, D.6337
 1198 0052 4FEA8303 		lsl	r3, r3, #2	@ tmp156, tmp156,
 1199 0056 9B18     		adds	r3, r3, r2	@ tmp156, tmp156, D.6337
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 43


 1200 0058 4FEA8303 		lsl	r3, r3, #2	@ tmp157, tmp156,
 1201 005c 0D4A     		ldr	r2, .L72+8	@ tmp158,
 1202 005e 9A18     		adds	r2, r3, r2	@ D.6338, tmp156, tmp158
 1203 0060 FB68     		ldr	r3, [r7, #12]	@ tmp159, pxTCB
 1204 0062 03F10403 		add	r3, r3, #4	@ D.6339, tmp159,
 1205 0066 1046     		mov	r0, r2	@, D.6338
 1206 0068 1946     		mov	r1, r3	@, D.6339
 1207 006a FFF7FEFF 		bl	vListInsertEnd	@
1172:Source/tasks.c **** 
1173:Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1174:Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1208              		.loc 1 1174 0 is_stmt 1 discriminator 2
 1209 006e FB68     		ldr	r3, [r7, #12]	@ tmp160, pxTCB
 1210 0070 DA6A     		ldr	r2, [r3, #44]	@ D.6340, pxTCB_2->uxPriority
 1211 0072 064B     		ldr	r3, .L72	@ tmp161,
 1212 0074 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.89, pxCurrentTCB
 1213 0076 DB6A     		ldr	r3, [r3, #44]	@ D.6342, pxCurrentTCB.89_13->uxPriority
 1214 0078 9A42     		cmp	r2, r3	@ D.6340, D.6342
 1215 007a 01D3     		bcc	.L70	@,
1175:Source/tasks.c **** 					{
1176:Source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1177:Source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1178:Source/tasks.c **** 						portYIELD_WITHIN_API();
 1216              		.loc 1 1178 0
 1217 007c FFF7FEFF 		bl	vPortYieldFromISR	@
 1218              	.L70:
1179:Source/tasks.c **** 					}
1180:Source/tasks.c **** 				}
1181:Source/tasks.c **** 			}
1182:Source/tasks.c **** 			taskEXIT_CRITICAL();
 1219              		.loc 1 1182 0
 1220 0080 FFF7FEFF 		bl	vPortExitCritical	@
 1221              	.L68:
1183:Source/tasks.c **** 		}
1184:Source/tasks.c **** 	}
 1222              		.loc 1 1184 0
 1223 0084 07F11007 		add	r7, r7, #16	@,,
 1224 0088 BD46     		mov	sp, r7
 1225 008a 80BD     		pop	{r7, pc}
 1226              	.L73:
 1227              		.align	2
 1228              	.L72:
 1229 008c 00000000 		.word	pxCurrentTCB
 1230 0090 00000000 		.word	uxTopReadyPriority
 1231 0094 00000000 		.word	pxReadyTasksLists
 1232              		.cfi_endproc
 1233              	.LFE8:
 1234              		.size	vTaskResume, .-vTaskResume
 1235              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1236              		.align	2
 1237              		.global	xTaskResumeFromISR
 1238              		.thumb
 1239              		.thumb_func
 1240              		.type	xTaskResumeFromISR, %function
 1241              	xTaskResumeFromISR:
 1242              	.LFB9:
1185:Source/tasks.c **** 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 44


1186:Source/tasks.c **** #endif
1187:Source/tasks.c **** 
1188:Source/tasks.c **** /*-----------------------------------------------------------*/
1189:Source/tasks.c **** 
1190:Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1191:Source/tasks.c **** 
1192:Source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
1193:Source/tasks.c **** 	{
 1243              		.loc 1 1193 0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 24
 1246              		@ frame_needed = 1, uses_anonymous_args = 0
 1247 0000 80B5     		push	{r7, lr}	@
 1248              	.LCFI27:
 1249              		.cfi_def_cfa_offset 8
 1250              		.cfi_offset 7, -8
 1251              		.cfi_offset 14, -4
 1252 0002 86B0     		sub	sp, sp, #24	@,,
 1253              	.LCFI28:
 1254              		.cfi_def_cfa_offset 32
 1255 0004 00AF     		add	r7, sp, #0	@,,
 1256              	.LCFI29:
 1257              		.cfi_def_cfa_register 7
 1258 0006 7860     		str	r0, [r7, #4]	@ pxTaskToResume, pxTaskToResume
1194:Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 1259              		.loc 1 1194 0
 1260 0008 4FF00003 		mov	r3, #0	@ tmp150,
 1261 000c 7B61     		str	r3, [r7, #20]	@ tmp150, xYieldRequired
1195:Source/tasks.c **** 	tskTCB *pxTCB;
1196:Source/tasks.c **** 	unsigned portBASE_TYPE uxSavedInterruptStatus;
1197:Source/tasks.c **** 
1198:Source/tasks.c **** 		configASSERT( pxTaskToResume );
1199:Source/tasks.c **** 
1200:Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1262              		.loc 1 1200 0
 1263 000e 7B68     		ldr	r3, [r7, #4]	@ tmp151, pxTaskToResume
 1264 0010 3B61     		str	r3, [r7, #16]	@ tmp151, pxTCB
1201:Source/tasks.c **** 
1202:Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1265              		.loc 1 1202 0
 1266 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1267 0016 F860     		str	r0, [r7, #12]	@, uxSavedInterruptStatus
1203:Source/tasks.c **** 		{
1204:Source/tasks.c **** 			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1268              		.loc 1 1204 0
 1269 0018 3869     		ldr	r0, [r7, #16]	@, pxTCB
 1270 001a FFF7FEFF 		bl	xTaskIsTaskSuspended	@
 1271 001e 0346     		mov	r3, r0	@ D.6300,
 1272 0020 012B     		cmp	r3, #1	@ D.6300,
 1273 0022 37D1     		bne	.L75	@,
1205:Source/tasks.c **** 			{
1206:Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1207:Source/tasks.c **** 
1208:Source/tasks.c **** 				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1274              		.loc 1 1208 0
 1275 0024 204B     		ldr	r3, .L79	@ tmp152,
 1276 0026 1B68     		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.82, uxSchedulerSuspended
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 45


 1277 0028 002B     		cmp	r3, #0	@ uxSchedulerSuspended.82,
 1278 002a 2CD1     		bne	.L76	@,
1209:Source/tasks.c **** 				{
1210:Source/tasks.c **** 					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 1279              		.loc 1 1210 0
 1280 002c 3B69     		ldr	r3, [r7, #16]	@ tmp153, pxTCB
 1281 002e DA6A     		ldr	r2, [r3, #44]	@ D.6306, pxTCB_4->uxPriority
 1282 0030 1E4B     		ldr	r3, .L79+4	@ tmp154,
 1283 0032 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.83, pxCurrentTCB
 1284 0034 DB6A     		ldr	r3, [r3, #44]	@ D.6308, pxCurrentTCB.83_9->uxPriority
 1285 0036 9A42     		cmp	r2, r3	@ D.6306, D.6308
 1286 0038 34BF     		ite	cc	@
 1287 003a 0023     		movcc	r3, #0	@, tmp156
 1288 003c 0123     		movcs	r3, #1	@, tmp156
 1289 003e DBB2     		uxtb	r3, r3	@ D.6309, tmp155
 1290 0040 7B61     		str	r3, [r7, #20]	@ D.6309, xYieldRequired
1211:Source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
 1291              		.loc 1 1211 0
 1292 0042 3B69     		ldr	r3, [r7, #16]	@ tmp157, pxTCB
 1293 0044 03F10403 		add	r3, r3, #4	@ D.6310, tmp157,
 1294 0048 1846     		mov	r0, r3	@, D.6310
 1295 004a FFF7FEFF 		bl	uxListRemove	@
1212:Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1296              		.loc 1 1212 0
 1297 004e 3B69     		ldr	r3, [r7, #16]	@ tmp158, pxTCB
 1298 0050 DA6A     		ldr	r2, [r3, #44]	@ D.6311, pxTCB_4->uxPriority
 1299 0052 174B     		ldr	r3, .L79+8	@ tmp159,
 1300 0054 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.84, uxTopReadyPriority
 1301 0056 9A42     		cmp	r2, r3	@ D.6311, uxTopReadyPriority.84
 1302 0058 03D9     		bls	.L77	@,
 1303              		.loc 1 1212 0 is_stmt 0 discriminator 1
 1304 005a 3B69     		ldr	r3, [r7, #16]	@ tmp160, pxTCB
 1305 005c DA6A     		ldr	r2, [r3, #44]	@ uxTopReadyPriority.85, pxTCB_4->uxPriority
 1306 005e 144B     		ldr	r3, .L79+8	@ tmp161,
 1307 0060 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.85, uxTopReadyPriority
 1308              	.L77:
 1309              		.loc 1 1212 0 discriminator 2
 1310 0062 3B69     		ldr	r3, [r7, #16]	@ tmp162, pxTCB
 1311 0064 DA6A     		ldr	r2, [r3, #44]	@ D.6316, pxTCB_4->uxPriority
 1312 0066 1346     		mov	r3, r2	@ tmp163, D.6316
 1313 0068 4FEA8303 		lsl	r3, r3, #2	@ tmp163, tmp163,
 1314 006c 9B18     		adds	r3, r3, r2	@ tmp163, tmp163, D.6316
 1315 006e 4FEA8303 		lsl	r3, r3, #2	@ tmp164, tmp163,
 1316 0072 104A     		ldr	r2, .L79+12	@ tmp165,
 1317 0074 9A18     		adds	r2, r3, r2	@ D.6317, tmp163, tmp165
 1318 0076 3B69     		ldr	r3, [r7, #16]	@ tmp166, pxTCB
 1319 0078 03F10403 		add	r3, r3, #4	@ D.6318, tmp166,
 1320 007c 1046     		mov	r0, r2	@, D.6317
 1321 007e 1946     		mov	r1, r3	@, D.6318
 1322 0080 FFF7FEFF 		bl	vListInsertEnd	@
 1323 0084 06E0     		b	.L75	@
 1324              	.L76:
1213:Source/tasks.c **** 				}
1214:Source/tasks.c **** 				else
1215:Source/tasks.c **** 				{
1216:Source/tasks.c **** 					/* We cannot access the delayed or ready lists, so will hold this
1217:Source/tasks.c **** 					task pending until the scheduler is resumed, at which point a
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 46


1218:Source/tasks.c **** 					yield will be performed if necessary. */
1219:Source/tasks.c **** 					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1325              		.loc 1 1219 0 is_stmt 1
 1326 0086 3B69     		ldr	r3, [r7, #16]	@ tmp167, pxTCB
 1327 0088 03F11803 		add	r3, r3, #24	@ D.6320, tmp167,
 1328 008c 0A48     		ldr	r0, .L79+16	@,
 1329 008e 1946     		mov	r1, r3	@, D.6320
 1330 0090 FFF7FEFF 		bl	vListInsertEnd	@
 1331              	.L75:
1220:Source/tasks.c **** 				}
1221:Source/tasks.c **** 			}
1222:Source/tasks.c **** 		}
1223:Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1332              		.loc 1 1223 0
 1333 0094 F868     		ldr	r0, [r7, #12]	@, uxSavedInterruptStatus
 1334 0096 FFF7FEFF 		bl	vPortClearInterruptMask	@
1224:Source/tasks.c **** 
1225:Source/tasks.c **** 		return xYieldRequired;
 1335              		.loc 1 1225 0
 1336 009a 7B69     		ldr	r3, [r7, #20]	@ D.6321, xYieldRequired
1226:Source/tasks.c **** 	}
 1337              		.loc 1 1226 0
 1338 009c 1846     		mov	r0, r3	@, <retval>
 1339 009e 07F11807 		add	r7, r7, #24	@,,
 1340 00a2 BD46     		mov	sp, r7
 1341 00a4 80BD     		pop	{r7, pc}
 1342              	.L80:
 1343 00a6 00BF     		.align	2
 1344              	.L79:
 1345 00a8 00000000 		.word	uxSchedulerSuspended
 1346 00ac 00000000 		.word	pxCurrentTCB
 1347 00b0 00000000 		.word	uxTopReadyPriority
 1348 00b4 00000000 		.word	pxReadyTasksLists
 1349 00b8 00000000 		.word	xPendingReadyList
 1350              		.cfi_endproc
 1351              	.LFE9:
 1352              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1353              		.section	.rodata
 1354              		.align	2
 1355              	.LC0:
 1356 0000 49444C45 		.ascii	"IDLE\000"
 1356      00
 1357 0005 000000   		.section	.text.vTaskStartScheduler,"ax",%progbits
 1358              		.align	2
 1359              		.global	vTaskStartScheduler
 1360              		.thumb
 1361              		.thumb_func
 1362              		.type	vTaskStartScheduler, %function
 1363              	vTaskStartScheduler:
 1364              	.LFB10:
1227:Source/tasks.c **** 
1228:Source/tasks.c **** #endif
1229:Source/tasks.c **** 
1230:Source/tasks.c **** 
1231:Source/tasks.c **** 
1232:Source/tasks.c **** 
1233:Source/tasks.c **** /*-----------------------------------------------------------
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 47


1234:Source/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1235:Source/tasks.c ****  *----------------------------------------------------------*/
1236:Source/tasks.c **** 
1237:Source/tasks.c **** 
1238:Source/tasks.c **** void vTaskStartScheduler( void )
1239:Source/tasks.c **** {
 1365              		.loc 1 1239 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 8
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369 0000 80B5     		push	{r7, lr}	@
 1370              	.LCFI30:
 1371              		.cfi_def_cfa_offset 8
 1372              		.cfi_offset 7, -8
 1373              		.cfi_offset 14, -4
 1374 0002 86B0     		sub	sp, sp, #24	@,,
 1375              	.LCFI31:
 1376              		.cfi_def_cfa_offset 32
 1377 0004 04AF     		add	r7, sp, #16	@,,
 1378              	.LCFI32:
 1379              		.cfi_def_cfa 7, 16
1240:Source/tasks.c **** portBASE_TYPE xReturn;
1241:Source/tasks.c **** 
1242:Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1243:Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1244:Source/tasks.c **** 	{
1245:Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1246:Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1247:Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1248:Source/tasks.c **** 	}
1249:Source/tasks.c **** 	#else
1250:Source/tasks.c **** 	{
1251:Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1252:Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 1380              		.loc 1 1252 0
 1381 0006 4FF00003 		mov	r3, #0	@ tmp135,
 1382 000a 0093     		str	r3, [sp, #0]	@ tmp135,
 1383 000c 4FF00003 		mov	r3, #0	@ tmp136,
 1384 0010 0193     		str	r3, [sp, #4]	@ tmp136,
 1385 0012 4FF00003 		mov	r3, #0	@ tmp137,
 1386 0016 0293     		str	r3, [sp, #8]	@ tmp137,
 1387 0018 4FF00003 		mov	r3, #0	@ tmp138,
 1388 001c 0393     		str	r3, [sp, #12]	@ tmp138,
 1389 001e 0E48     		ldr	r0, .L83	@,
 1390 0020 0E49     		ldr	r1, .L83+4	@,
 1391 0022 4FF08002 		mov	r2, #128	@,
 1392 0026 4FF00003 		mov	r3, #0	@,
 1393 002a FFF7FEFF 		bl	xTaskGenericCreate	@
 1394 002e 7860     		str	r0, [r7, #4]	@, xReturn
1253:Source/tasks.c **** 	}
1254:Source/tasks.c **** 	#endif
1255:Source/tasks.c **** 
1256:Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1257:Source/tasks.c **** 	{
1258:Source/tasks.c **** 		if( xReturn == pdPASS )
1259:Source/tasks.c **** 		{
1260:Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 48


1261:Source/tasks.c **** 		}
1262:Source/tasks.c **** 	}
1263:Source/tasks.c **** 	#endif
1264:Source/tasks.c **** 
1265:Source/tasks.c **** 	if( xReturn == pdPASS )
 1395              		.loc 1 1265 0
 1396 0030 7B68     		ldr	r3, [r7, #4]	@ tmp139, xReturn
 1397 0032 012B     		cmp	r3, #1	@ tmp139,
 1398 0034 0BD1     		bne	.L81	@,
1266:Source/tasks.c **** 	{
1267:Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1268:Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1269:Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1270:Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1271:Source/tasks.c **** 		starts to run.
1272:Source/tasks.c **** 
1273:Source/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1274:Source/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1275:Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 1399              		.loc 1 1275 0
 1400 0036 FFF7FEFF 		bl	ulPortSetInterruptMask	@
1276:Source/tasks.c **** 
1277:Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1401              		.loc 1 1277 0
 1402 003a 094B     		ldr	r3, .L83+8	@ tmp140,
 1403 003c 4FF00102 		mov	r2, #1	@ tmp141,
 1404 0040 1A60     		str	r2, [r3, #0]	@ tmp141, xSchedulerRunning
1278:Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 1405              		.loc 1 1278 0
 1406 0042 084B     		ldr	r3, .L83+12	@ tmp142,
 1407 0044 4FF00002 		mov	r2, #0	@ tmp143,
 1408 0048 1A60     		str	r2, [r3, #0]	@ tmp143, xTickCount
1279:Source/tasks.c **** 
1280:Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1281:Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1282:Source/tasks.c **** 		the run time counter time base. */
1283:Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1284:Source/tasks.c **** 
1285:Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1286:Source/tasks.c **** 		portable interface. */
1287:Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1409              		.loc 1 1287 0
 1410 004a FFF7FEFF 		bl	xPortStartScheduler	@
 1411              	.L81:
1288:Source/tasks.c **** 		{
1289:Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1290:Source/tasks.c **** 			function will not return. */
1291:Source/tasks.c **** 		}
1292:Source/tasks.c **** 		else
1293:Source/tasks.c **** 		{
1294:Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1295:Source/tasks.c **** 		}
1296:Source/tasks.c **** 	}
1297:Source/tasks.c **** 
1298:Source/tasks.c **** 	/* This line will only be reached if the kernel could not be started. */
1299:Source/tasks.c **** 	configASSERT( xReturn );
1300:Source/tasks.c **** }
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 49


 1412              		.loc 1 1300 0
 1413 004e 07F10807 		add	r7, r7, #8	@,,
 1414 0052 BD46     		mov	sp, r7
 1415 0054 80BD     		pop	{r7, pc}
 1416              	.L84:
 1417 0056 00BF     		.align	2
 1418              	.L83:
 1419 0058 00000000 		.word	prvIdleTask
 1420 005c 00000000 		.word	.LC0
 1421 0060 00000000 		.word	xSchedulerRunning
 1422 0064 00000000 		.word	xTickCount
 1423              		.cfi_endproc
 1424              	.LFE10:
 1425              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1426              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1427              		.align	2
 1428              		.global	vTaskEndScheduler
 1429              		.thumb
 1430              		.thumb_func
 1431              		.type	vTaskEndScheduler, %function
 1432              	vTaskEndScheduler:
 1433              	.LFB11:
1301:Source/tasks.c **** /*-----------------------------------------------------------*/
1302:Source/tasks.c **** 
1303:Source/tasks.c **** void vTaskEndScheduler( void )
1304:Source/tasks.c **** {
 1434              		.loc 1 1304 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 1, uses_anonymous_args = 0
 1438 0000 80B5     		push	{r7, lr}	@
 1439              	.LCFI33:
 1440              		.cfi_def_cfa_offset 8
 1441              		.cfi_offset 7, -8
 1442              		.cfi_offset 14, -4
 1443 0002 00AF     		add	r7, sp, #0	@,,
 1444              	.LCFI34:
 1445              		.cfi_def_cfa_register 7
1305:Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1306:Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1307:Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1308:Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1446              		.loc 1 1308 0
 1447 0004 FFF7FEFF 		bl	ulPortSetInterruptMask	@
1309:Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1448              		.loc 1 1309 0
 1449 0008 034B     		ldr	r3, .L86	@ tmp134,
 1450 000a 4FF00002 		mov	r2, #0	@ tmp135,
 1451 000e 1A60     		str	r2, [r3, #0]	@ tmp135, xSchedulerRunning
1310:Source/tasks.c **** 	vPortEndScheduler();
 1452              		.loc 1 1310 0
 1453 0010 FFF7FEFF 		bl	vPortEndScheduler	@
1311:Source/tasks.c **** }
 1454              		.loc 1 1311 0
 1455 0014 80BD     		pop	{r7, pc}	@
 1456              	.L87:
 1457 0016 00BF     		.align	2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 50


 1458              	.L86:
 1459 0018 00000000 		.word	xSchedulerRunning
 1460              		.cfi_endproc
 1461              	.LFE11:
 1462              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1463              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1464              		.align	2
 1465              		.global	vTaskSuspendAll
 1466              		.thumb
 1467              		.thumb_func
 1468              		.type	vTaskSuspendAll, %function
 1469              	vTaskSuspendAll:
 1470              	.LFB12:
1312:Source/tasks.c **** /*----------------------------------------------------------*/
1313:Source/tasks.c **** 
1314:Source/tasks.c **** void vTaskSuspendAll( void )
1315:Source/tasks.c **** {
 1471              		.loc 1 1315 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 1, uses_anonymous_args = 0
 1475              		@ link register save eliminated.
 1476 0000 80B4     		push	{r7}	@
 1477              	.LCFI35:
 1478              		.cfi_def_cfa_offset 4
 1479              		.cfi_offset 7, -4
 1480 0002 00AF     		add	r7, sp, #0	@,,
 1481              	.LCFI36:
 1482              		.cfi_def_cfa_register 7
1316:Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1317:Source/tasks.c **** 	portBASE_TYPE. */
1318:Source/tasks.c **** 	++uxSchedulerSuspended;
 1483              		.loc 1 1318 0
 1484 0004 044B     		ldr	r3, .L89	@ tmp136,
 1485 0006 1B68     		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.80, uxSchedulerSuspended
 1486 0008 03F10102 		add	r2, r3, #1	@ uxSchedulerSuspended.81, uxSchedulerSuspended.80,
 1487 000c 024B     		ldr	r3, .L89	@ tmp137,
 1488 000e 1A60     		str	r2, [r3, #0]	@ uxSchedulerSuspended.81, uxSchedulerSuspended
1319:Source/tasks.c **** }
 1489              		.loc 1 1319 0
 1490 0010 BD46     		mov	sp, r7
 1491 0012 80BC     		pop	{r7}
 1492 0014 7047     		bx	lr
 1493              	.L90:
 1494 0016 00BF     		.align	2
 1495              	.L89:
 1496 0018 00000000 		.word	uxSchedulerSuspended
 1497              		.cfi_endproc
 1498              	.LFE12:
 1499              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1500              		.section	.text.xTaskResumeAll,"ax",%progbits
 1501              		.align	2
 1502              		.global	xTaskResumeAll
 1503              		.thumb
 1504              		.thumb_func
 1505              		.type	xTaskResumeAll, %function
 1506              	xTaskResumeAll:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 51


 1507              	.LFB13:
1320:Source/tasks.c **** /*----------------------------------------------------------*/
1321:Source/tasks.c **** 
1322:Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1323:Source/tasks.c **** 
1324:Source/tasks.c **** 	portTickType prvGetExpectedIdleTime( void )
1325:Source/tasks.c **** 	{
1326:Source/tasks.c **** 	portTickType xReturn;
1327:Source/tasks.c **** 	
1328:Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1329:Source/tasks.c **** 		{
1330:Source/tasks.c **** 			xReturn = 0;
1331:Source/tasks.c **** 		}
1332:Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1333:Source/tasks.c **** 		{
1334:Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1335:Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1336:Source/tasks.c **** 			processed. */
1337:Source/tasks.c **** 			xReturn = 0;
1338:Source/tasks.c **** 		}
1339:Source/tasks.c **** 		else
1340:Source/tasks.c **** 		{
1341:Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1342:Source/tasks.c **** 		}
1343:Source/tasks.c **** 	
1344:Source/tasks.c **** 		return xReturn;
1345:Source/tasks.c **** 	}
1346:Source/tasks.c **** 
1347:Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE != 0  */
1348:Source/tasks.c **** /*----------------------------------------------------------*/
1349:Source/tasks.c **** 
1350:Source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1351:Source/tasks.c **** {
 1508              		.loc 1 1351 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 8
 1511              		@ frame_needed = 1, uses_anonymous_args = 0
 1512 0000 90B5     		push	{r4, r7, lr}	@
 1513              	.LCFI37:
 1514              		.cfi_def_cfa_offset 12
 1515              		.cfi_offset 4, -12
 1516              		.cfi_offset 7, -8
 1517              		.cfi_offset 14, -4
 1518 0002 83B0     		sub	sp, sp, #12	@,,
 1519              	.LCFI38:
 1520              		.cfi_def_cfa_offset 24
 1521 0004 00AF     		add	r7, sp, #0	@,,
 1522              	.LCFI39:
 1523              		.cfi_def_cfa_register 7
1352:Source/tasks.c **** register tskTCB *pxTCB;
1353:Source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1524              		.loc 1 1353 0
 1525 0006 4FF00003 		mov	r3, #0	@ tmp159,
 1526 000a 7B60     		str	r3, [r7, #4]	@ tmp159, xAlreadyYielded
1354:Source/tasks.c **** 
1355:Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1356:Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 52


1357:Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1358:Source/tasks.c **** 
1359:Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1360:Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1361:Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1362:Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1363:Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1364:Source/tasks.c **** 	taskENTER_CRITICAL();
 1527              		.loc 1 1364 0
 1528 000c FFF7FEFF 		bl	vPortEnterCritical	@
1365:Source/tasks.c **** 	{
1366:Source/tasks.c **** 		--uxSchedulerSuspended;
 1529              		.loc 1 1366 0
 1530 0010 374B     		ldr	r3, .L101	@ tmp160,
 1531 0012 1B68     		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.68, uxSchedulerSuspended
 1532 0014 03F1FF32 		add	r2, r3, #-1	@ uxSchedulerSuspended.69, uxSchedulerSuspended.68,
 1533 0018 354B     		ldr	r3, .L101	@ tmp161,
 1534 001a 1A60     		str	r2, [r3, #0]	@ uxSchedulerSuspended.69, uxSchedulerSuspended
1367:Source/tasks.c **** 
1368:Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1535              		.loc 1 1368 0
 1536 001c 344B     		ldr	r3, .L101	@ tmp162,
 1537 001e 1B68     		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.70, uxSchedulerSuspended
 1538 0020 002B     		cmp	r3, #0	@ uxSchedulerSuspended.70,
 1539 0022 5CD1     		bne	.L92	@,
1369:Source/tasks.c **** 		{
1370:Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1540              		.loc 1 1370 0
 1541 0024 334B     		ldr	r3, .L101+4	@ tmp163,
 1542 0026 1B68     		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.71, uxCurrentNumberOfTasks
 1543 0028 002B     		cmp	r3, #0	@ uxCurrentNumberOfTasks.71,
 1544 002a 58D0     		beq	.L92	@,
 1545              	.LBB3:
1371:Source/tasks.c **** 			{
1372:Source/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
 1546              		.loc 1 1372 0
 1547 002c 4FF00003 		mov	r3, #0	@ tmp164,
 1548 0030 3B60     		str	r3, [r7, #0]	@ tmp164, xYieldRequired
1373:Source/tasks.c **** 
1374:Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1375:Source/tasks.c **** 				appropriate ready list. */
1376:Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1549              		.loc 1 1376 0
 1550 0032 2CE0     		b	.L93	@
 1551              	.L95:
1377:Source/tasks.c **** 				{
1378:Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 1552              		.loc 1 1378 0
 1553 0034 304B     		ldr	r3, .L101+8	@ tmp165,
 1554 0036 DB68     		ldr	r3, [r3, #12]	@ D.6263, xPendingReadyList.xListEnd.pxNext
 1555 0038 DC68     		ldr	r4, [r3, #12]	@ pxTCB, D.6263_11->pvOwner
1379:Source/tasks.c **** 					uxListRemove( &( pxTCB->xEventListItem ) );
 1556              		.loc 1 1379 0
 1557 003a 04F11803 		add	r3, r4, #24	@ D.6264, pxTCB,
 1558 003e 1846     		mov	r0, r3	@, D.6264
 1559 0040 FFF7FEFF 		bl	uxListRemove	@
1380:Source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 53


 1560              		.loc 1 1380 0
 1561 0044 04F10403 		add	r3, r4, #4	@ D.6265, pxTCB,
 1562 0048 1846     		mov	r0, r3	@, D.6265
 1563 004a FFF7FEFF 		bl	uxListRemove	@
1381:Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1564              		.loc 1 1381 0
 1565 004e E26A     		ldr	r2, [r4, #44]	@ D.6266, pxTCB_12->uxPriority
 1566 0050 2A4B     		ldr	r3, .L101+12	@ tmp166,
 1567 0052 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.72, uxTopReadyPriority
 1568 0054 9A42     		cmp	r2, r3	@ D.6266, uxTopReadyPriority.72
 1569 0056 02D9     		bls	.L94	@,
 1570              		.loc 1 1381 0 is_stmt 0 discriminator 1
 1571 0058 E26A     		ldr	r2, [r4, #44]	@ uxTopReadyPriority.73, pxTCB_12->uxPriority
 1572 005a 284B     		ldr	r3, .L101+12	@ tmp167,
 1573 005c 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.73, uxTopReadyPriority
 1574              	.L94:
 1575              		.loc 1 1381 0 discriminator 2
 1576 005e E26A     		ldr	r2, [r4, #44]	@ D.6271, pxTCB_12->uxPriority
 1577 0060 1346     		mov	r3, r2	@ tmp168, D.6271
 1578 0062 4FEA8303 		lsl	r3, r3, #2	@ tmp168, tmp168,
 1579 0066 9B18     		adds	r3, r3, r2	@ tmp168, tmp168, D.6271
 1580 0068 4FEA8303 		lsl	r3, r3, #2	@ tmp169, tmp168,
 1581 006c 244A     		ldr	r2, .L101+16	@ tmp170,
 1582 006e 9A18     		adds	r2, r3, r2	@ D.6272, tmp168, tmp170
 1583 0070 04F10403 		add	r3, r4, #4	@ D.6273, pxTCB,
 1584 0074 1046     		mov	r0, r2	@, D.6272
 1585 0076 1946     		mov	r1, r3	@, D.6273
 1586 0078 FFF7FEFF 		bl	vListInsertEnd	@
1382:Source/tasks.c **** 
1383:Source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1384:Source/tasks.c **** 					the current task then we should yield. */
1385:Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1587              		.loc 1 1385 0 is_stmt 1 discriminator 2
 1588 007c E26A     		ldr	r2, [r4, #44]	@ D.6274, pxTCB_12->uxPriority
 1589 007e 214B     		ldr	r3, .L101+20	@ tmp171,
 1590 0080 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.74, pxCurrentTCB
 1591 0082 DB6A     		ldr	r3, [r3, #44]	@ D.6276, pxCurrentTCB.74_22->uxPriority
 1592 0084 9A42     		cmp	r2, r3	@ D.6274, D.6276
 1593 0086 02D3     		bcc	.L93	@,
1386:Source/tasks.c **** 					{
1387:Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1594              		.loc 1 1387 0
 1595 0088 4FF00103 		mov	r3, #1	@ tmp172,
 1596 008c 3B60     		str	r3, [r7, #0]	@ tmp172, xYieldRequired
 1597              	.L93:
1376:Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1598              		.loc 1 1376 0 discriminator 1
 1599 008e 1A4B     		ldr	r3, .L101+8	@ tmp173,
 1600 0090 1B68     		ldr	r3, [r3, #0]	@ D.6279, xPendingReadyList.uxNumberOfItems
 1601 0092 002B     		cmp	r3, #0	@ D.6279,
 1602 0094 CED1     		bne	.L95	@,
1388:Source/tasks.c **** 					}
1389:Source/tasks.c **** 				}
1390:Source/tasks.c **** 
1391:Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1392:Source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1393:Source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 54


1394:Source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1603              		.loc 1 1394 0
 1604 0096 1C4B     		ldr	r3, .L101+24	@ tmp174,
 1605 0098 1B68     		ldr	r3, [r3, #0]	@ uxMissedTicks.75, uxMissedTicks
 1606 009a 002B     		cmp	r3, #0	@ uxMissedTicks.75,
 1607 009c 0FD0     		beq	.L96	@,
1395:Source/tasks.c **** 				{
1396:Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1608              		.loc 1 1396 0
 1609 009e 07E0     		b	.L97	@
 1610              	.L98:
1397:Source/tasks.c **** 					{
1398:Source/tasks.c **** 						vTaskIncrementTick();
 1611              		.loc 1 1398 0
 1612 00a0 FFF7FEFF 		bl	vTaskIncrementTick	@
1399:Source/tasks.c **** 						--uxMissedTicks;
 1613              		.loc 1 1399 0
 1614 00a4 184B     		ldr	r3, .L101+24	@ tmp175,
 1615 00a6 1B68     		ldr	r3, [r3, #0]	@ uxMissedTicks.76, uxMissedTicks
 1616 00a8 03F1FF32 		add	r2, r3, #-1	@ uxMissedTicks.77, uxMissedTicks.76,
 1617 00ac 164B     		ldr	r3, .L101+24	@ tmp176,
 1618 00ae 1A60     		str	r2, [r3, #0]	@ uxMissedTicks.77, uxMissedTicks
 1619              	.L97:
1396:Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1620              		.loc 1 1396 0 discriminator 1
 1621 00b0 154B     		ldr	r3, .L101+24	@ tmp177,
 1622 00b2 1B68     		ldr	r3, [r3, #0]	@ uxMissedTicks.78, uxMissedTicks
 1623 00b4 002B     		cmp	r3, #0	@ uxMissedTicks.78,
 1624 00b6 F3D1     		bne	.L98	@,
1400:Source/tasks.c **** 					}
1401:Source/tasks.c **** 
1402:Source/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1403:Source/tasks.c **** 					to ensure the highest priority task that is ready to run is
1404:Source/tasks.c **** 					the task actually running. */
1405:Source/tasks.c **** 					#if configUSE_PREEMPTION == 1
1406:Source/tasks.c **** 					{
1407:Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1625              		.loc 1 1407 0
 1626 00b8 4FF00103 		mov	r3, #1	@ tmp178,
 1627 00bc 3B60     		str	r3, [r7, #0]	@ tmp178, xYieldRequired
 1628              	.L96:
1408:Source/tasks.c **** 					}
1409:Source/tasks.c **** 					#endif
1410:Source/tasks.c **** 				}
1411:Source/tasks.c **** 
1412:Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1629              		.loc 1 1412 0
 1630 00be 3B68     		ldr	r3, [r7, #0]	@ tmp179, xYieldRequired
 1631 00c0 012B     		cmp	r3, #1	@ tmp179,
 1632 00c2 03D0     		beq	.L99	@,
 1633              		.loc 1 1412 0 is_stmt 0 discriminator 1
 1634 00c4 114B     		ldr	r3, .L101+28	@ tmp180,
 1635 00c6 1B68     		ldr	r3, [r3, #0]	@ xMissedYield.79, xMissedYield
 1636 00c8 012B     		cmp	r3, #1	@ xMissedYield.79,
 1637 00ca 08D1     		bne	.L92	@,
 1638              	.L99:
1413:Source/tasks.c **** 				{
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 55


1414:Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1639              		.loc 1 1414 0 is_stmt 1
 1640 00cc 4FF00103 		mov	r3, #1	@ tmp181,
 1641 00d0 7B60     		str	r3, [r7, #4]	@ tmp181, xAlreadyYielded
1415:Source/tasks.c **** 					xMissedYield = pdFALSE;
 1642              		.loc 1 1415 0
 1643 00d2 0E4B     		ldr	r3, .L101+28	@ tmp182,
 1644 00d4 4FF00002 		mov	r2, #0	@ tmp183,
 1645 00d8 1A60     		str	r2, [r3, #0]	@ tmp183, xMissedYield
1416:Source/tasks.c **** 					portYIELD_WITHIN_API();
 1646              		.loc 1 1416 0
 1647 00da FFF7FEFF 		bl	vPortYieldFromISR	@
 1648              	.L92:
 1649              	.LBE3:
1417:Source/tasks.c **** 				}
1418:Source/tasks.c **** 			}
1419:Source/tasks.c **** 		}
1420:Source/tasks.c **** 	}
1421:Source/tasks.c **** 	taskEXIT_CRITICAL();
 1650              		.loc 1 1421 0
 1651 00de FFF7FEFF 		bl	vPortExitCritical	@
1422:Source/tasks.c **** 
1423:Source/tasks.c **** 	return xAlreadyYielded;
 1652              		.loc 1 1423 0
 1653 00e2 7B68     		ldr	r3, [r7, #4]	@ D.6290, xAlreadyYielded
1424:Source/tasks.c **** }
 1654              		.loc 1 1424 0
 1655 00e4 1846     		mov	r0, r3	@, <retval>
 1656 00e6 07F10C07 		add	r7, r7, #12	@,,
 1657 00ea BD46     		mov	sp, r7
 1658 00ec 90BD     		pop	{r4, r7, pc}
 1659              	.L102:
 1660 00ee 00BF     		.align	2
 1661              	.L101:
 1662 00f0 00000000 		.word	uxSchedulerSuspended
 1663 00f4 00000000 		.word	uxCurrentNumberOfTasks
 1664 00f8 00000000 		.word	xPendingReadyList
 1665 00fc 00000000 		.word	uxTopReadyPriority
 1666 0100 00000000 		.word	pxReadyTasksLists
 1667 0104 00000000 		.word	pxCurrentTCB
 1668 0108 00000000 		.word	uxMissedTicks
 1669 010c 00000000 		.word	xMissedYield
 1670              		.cfi_endproc
 1671              	.LFE13:
 1672              		.size	xTaskResumeAll, .-xTaskResumeAll
 1673              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1674              		.align	2
 1675              		.global	xTaskGetTickCount
 1676              		.thumb
 1677              		.thumb_func
 1678              		.type	xTaskGetTickCount, %function
 1679              	xTaskGetTickCount:
 1680              	.LFB14:
1425:Source/tasks.c **** 
1426:Source/tasks.c **** 
1427:Source/tasks.c **** 
1428:Source/tasks.c **** 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 56


1429:Source/tasks.c **** 
1430:Source/tasks.c **** 
1431:Source/tasks.c **** /*-----------------------------------------------------------
1432:Source/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1433:Source/tasks.c ****  *----------------------------------------------------------*/
1434:Source/tasks.c **** 
1435:Source/tasks.c **** 
1436:Source/tasks.c **** 
1437:Source/tasks.c **** portTickType xTaskGetTickCount( void )
1438:Source/tasks.c **** {
 1681              		.loc 1 1438 0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 8
 1684              		@ frame_needed = 1, uses_anonymous_args = 0
 1685 0000 80B5     		push	{r7, lr}	@
 1686              	.LCFI40:
 1687              		.cfi_def_cfa_offset 8
 1688              		.cfi_offset 7, -8
 1689              		.cfi_offset 14, -4
 1690 0002 82B0     		sub	sp, sp, #8	@,,
 1691              	.LCFI41:
 1692              		.cfi_def_cfa_offset 16
 1693 0004 00AF     		add	r7, sp, #0	@,,
 1694              	.LCFI42:
 1695              		.cfi_def_cfa_register 7
1439:Source/tasks.c **** portTickType xTicks;
1440:Source/tasks.c **** 
1441:Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1442:Source/tasks.c **** 	taskENTER_CRITICAL();
 1696              		.loc 1 1442 0
 1697 0006 FFF7FEFF 		bl	vPortEnterCritical	@
1443:Source/tasks.c **** 	{
1444:Source/tasks.c **** 		xTicks = xTickCount;
 1698              		.loc 1 1444 0
 1699 000a 054B     		ldr	r3, .L105	@ tmp136,
 1700 000c 1B68     		ldr	r3, [r3, #0]	@ tmp137, xTickCount
 1701 000e 7B60     		str	r3, [r7, #4]	@ tmp137, xTicks
1445:Source/tasks.c **** 	}
1446:Source/tasks.c **** 	taskEXIT_CRITICAL();
 1702              		.loc 1 1446 0
 1703 0010 FFF7FEFF 		bl	vPortExitCritical	@
1447:Source/tasks.c **** 
1448:Source/tasks.c **** 	return xTicks;
 1704              		.loc 1 1448 0
 1705 0014 7B68     		ldr	r3, [r7, #4]	@ D.6253, xTicks
1449:Source/tasks.c **** }
 1706              		.loc 1 1449 0
 1707 0016 1846     		mov	r0, r3	@, <retval>
 1708 0018 07F10807 		add	r7, r7, #8	@,,
 1709 001c BD46     		mov	sp, r7
 1710 001e 80BD     		pop	{r7, pc}
 1711              	.L106:
 1712              		.align	2
 1713              	.L105:
 1714 0020 00000000 		.word	xTickCount
 1715              		.cfi_endproc
 1716              	.LFE14:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 57


 1717              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1718              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1719              		.align	2
 1720              		.global	xTaskGetTickCountFromISR
 1721              		.thumb
 1722              		.thumb_func
 1723              		.type	xTaskGetTickCountFromISR, %function
 1724              	xTaskGetTickCountFromISR:
 1725              	.LFB15:
1450:Source/tasks.c **** /*-----------------------------------------------------------*/
1451:Source/tasks.c **** 
1452:Source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1453:Source/tasks.c **** {
 1726              		.loc 1 1453 0
 1727              		.cfi_startproc
 1728              		@ args = 0, pretend = 0, frame = 8
 1729              		@ frame_needed = 1, uses_anonymous_args = 0
 1730 0000 80B5     		push	{r7, lr}	@
 1731              	.LCFI43:
 1732              		.cfi_def_cfa_offset 8
 1733              		.cfi_offset 7, -8
 1734              		.cfi_offset 14, -4
 1735 0002 82B0     		sub	sp, sp, #8	@,,
 1736              	.LCFI44:
 1737              		.cfi_def_cfa_offset 16
 1738 0004 00AF     		add	r7, sp, #0	@,,
 1739              	.LCFI45:
 1740              		.cfi_def_cfa_register 7
1454:Source/tasks.c **** portTickType xReturn;
1455:Source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1456:Source/tasks.c **** 
1457:Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1741              		.loc 1 1457 0
 1742 0006 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1743 000a 7860     		str	r0, [r7, #4]	@, uxSavedInterruptStatus
1458:Source/tasks.c **** 	xReturn = xTickCount;
 1744              		.loc 1 1458 0
 1745 000c 054B     		ldr	r3, .L109	@ tmp136,
 1746 000e 1B68     		ldr	r3, [r3, #0]	@ tmp137, xTickCount
 1747 0010 3B60     		str	r3, [r7, #0]	@ tmp137, xReturn
1459:Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1748              		.loc 1 1459 0
 1749 0012 7868     		ldr	r0, [r7, #4]	@, uxSavedInterruptStatus
 1750 0014 FFF7FEFF 		bl	vPortClearInterruptMask	@
1460:Source/tasks.c **** 
1461:Source/tasks.c **** 	return xReturn;
 1751              		.loc 1 1461 0
 1752 0018 3B68     		ldr	r3, [r7, #0]	@ D.6251, xReturn
1462:Source/tasks.c **** }
 1753              		.loc 1 1462 0
 1754 001a 1846     		mov	r0, r3	@, <retval>
 1755 001c 07F10807 		add	r7, r7, #8	@,,
 1756 0020 BD46     		mov	sp, r7
 1757 0022 80BD     		pop	{r7, pc}
 1758              	.L110:
 1759              		.align	2
 1760              	.L109:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 58


 1761 0024 00000000 		.word	xTickCount
 1762              		.cfi_endproc
 1763              	.LFE15:
 1764              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1765              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1766              		.align	2
 1767              		.global	uxTaskGetNumberOfTasks
 1768              		.thumb
 1769              		.thumb_func
 1770              		.type	uxTaskGetNumberOfTasks, %function
 1771              	uxTaskGetNumberOfTasks:
 1772              	.LFB16:
1463:Source/tasks.c **** /*-----------------------------------------------------------*/
1464:Source/tasks.c **** 
1465:Source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1466:Source/tasks.c **** {
 1773              		.loc 1 1466 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 1, uses_anonymous_args = 0
 1777              		@ link register save eliminated.
 1778 0000 80B4     		push	{r7}	@
 1779              	.LCFI46:
 1780              		.cfi_def_cfa_offset 4
 1781              		.cfi_offset 7, -4
 1782 0002 00AF     		add	r7, sp, #0	@,,
 1783              	.LCFI47:
 1784              		.cfi_def_cfa_register 7
1467:Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1468:Source/tasks.c **** 	portBASE_TYPE. */
1469:Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1785              		.loc 1 1469 0
 1786 0004 024B     		ldr	r3, .L113	@ tmp136,
 1787 0006 1B68     		ldr	r3, [r3, #0]	@ D.6249, uxCurrentNumberOfTasks
1470:Source/tasks.c **** }
 1788              		.loc 1 1470 0
 1789 0008 1846     		mov	r0, r3	@, <retval>
 1790 000a BD46     		mov	sp, r7
 1791 000c 80BC     		pop	{r7}
 1792 000e 7047     		bx	lr
 1793              	.L114:
 1794              		.align	2
 1795              	.L113:
 1796 0010 00000000 		.word	uxCurrentNumberOfTasks
 1797              		.cfi_endproc
 1798              	.LFE16:
 1799              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1800              		.section	.text.vTaskIncrementTick,"ax",%progbits
 1801              		.align	2
 1802              		.global	vTaskIncrementTick
 1803              		.thumb
 1804              		.thumb_func
 1805              		.type	vTaskIncrementTick, %function
 1806              	vTaskIncrementTick:
 1807              	.LFB17:
1471:Source/tasks.c **** /*-----------------------------------------------------------*/
1472:Source/tasks.c **** 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 59


1473:Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1474:Source/tasks.c **** 
1475:Source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1476:Source/tasks.c **** 	{
1477:Source/tasks.c **** 	tskTCB *pxTCB;
1478:Source/tasks.c **** 
1479:Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1480:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1481:Source/tasks.c **** 		configASSERT( pxTCB );
1482:Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1483:Source/tasks.c **** 	}
1484:Source/tasks.c **** 
1485:Source/tasks.c **** #endif
1486:Source/tasks.c **** /*-----------------------------------------------------------*/
1487:Source/tasks.c **** 
1488:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1489:Source/tasks.c **** 
1490:Source/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1491:Source/tasks.c **** 	{
1492:Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1493:Source/tasks.c **** 
1494:Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1495:Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1496:Source/tasks.c **** 
1497:Source/tasks.c **** 		vTaskSuspendAll();
1498:Source/tasks.c **** 		{
1499:Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1500:Source/tasks.c **** 			report the task name, state and stack high water mark. */
1501:Source/tasks.c **** 
1502:Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1503:Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1504:Source/tasks.c **** 
1505:Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1506:Source/tasks.c **** 
1507:Source/tasks.c **** 			do
1508:Source/tasks.c **** 			{
1509:Source/tasks.c **** 				uxQueue--;
1510:Source/tasks.c **** 
1511:Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1512:Source/tasks.c **** 				{
1513:Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1514:Source/tasks.c **** 				}
1515:Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1516:Source/tasks.c **** 
1517:Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1518:Source/tasks.c **** 			{
1519:Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1520:Source/tasks.c **** 			}
1521:Source/tasks.c **** 
1522:Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1523:Source/tasks.c **** 			{
1524:Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1525:Source/tasks.c **** 			}
1526:Source/tasks.c **** 
1527:Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1528:Source/tasks.c **** 			{
1529:Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 60


1530:Source/tasks.c **** 				{
1531:Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
1532:Source/tasks.c **** 				}
1533:Source/tasks.c **** 			}
1534:Source/tasks.c **** 			#endif
1535:Source/tasks.c **** 
1536:Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1537:Source/tasks.c **** 			{
1538:Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1539:Source/tasks.c **** 				{
1540:Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
1541:Source/tasks.c **** 				}
1542:Source/tasks.c **** 			}
1543:Source/tasks.c **** 			#endif
1544:Source/tasks.c **** 		}
1545:Source/tasks.c **** 		xTaskResumeAll();
1546:Source/tasks.c **** 	}
1547:Source/tasks.c **** 
1548:Source/tasks.c **** #endif
1549:Source/tasks.c **** /*----------------------------------------------------------*/
1550:Source/tasks.c **** 
1551:Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1552:Source/tasks.c **** 
1553:Source/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1554:Source/tasks.c **** 	{
1555:Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1556:Source/tasks.c **** 	unsigned long ulTotalRunTime;
1557:Source/tasks.c **** 
1558:Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1559:Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1560:Source/tasks.c **** 
1561:Source/tasks.c **** 		vTaskSuspendAll();
1562:Source/tasks.c **** 		{
1563:Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1564:Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1565:Source/tasks.c **** 			#else
1566:Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1567:Source/tasks.c **** 			#endif
1568:Source/tasks.c **** 
1569:Source/tasks.c **** 			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
1570:Source/tasks.c **** 			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
1571:Source/tasks.c **** 			ulTotalRunTime /= 100UL;
1572:Source/tasks.c **** 
1573:Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1574:Source/tasks.c **** 			generating a table of run timer percentages in the provided
1575:Source/tasks.c **** 			buffer. */
1576:Source/tasks.c **** 
1577:Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1578:Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1579:Source/tasks.c **** 
1580:Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1581:Source/tasks.c **** 
1582:Source/tasks.c **** 			do
1583:Source/tasks.c **** 			{
1584:Source/tasks.c **** 				uxQueue--;
1585:Source/tasks.c **** 
1586:Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 61


1587:Source/tasks.c **** 				{
1588:Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
1589:Source/tasks.c **** 				}
1590:Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1591:Source/tasks.c **** 
1592:Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1593:Source/tasks.c **** 			{
1594:Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
1595:Source/tasks.c **** 			}
1596:Source/tasks.c **** 
1597:Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1598:Source/tasks.c **** 			{
1599:Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
1600:Source/tasks.c **** 			}
1601:Source/tasks.c **** 
1602:Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1603:Source/tasks.c **** 			{
1604:Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1605:Source/tasks.c **** 				{
1606:Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTim
1607:Source/tasks.c **** 				}
1608:Source/tasks.c **** 			}
1609:Source/tasks.c **** 			#endif
1610:Source/tasks.c **** 
1611:Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1612:Source/tasks.c **** 			{
1613:Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1614:Source/tasks.c **** 				{
1615:Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime );
1616:Source/tasks.c **** 				}
1617:Source/tasks.c **** 			}
1618:Source/tasks.c **** 			#endif
1619:Source/tasks.c **** 		}
1620:Source/tasks.c **** 		xTaskResumeAll();
1621:Source/tasks.c **** 	}
1622:Source/tasks.c **** 
1623:Source/tasks.c **** #endif
1624:Source/tasks.c **** /*----------------------------------------------------------*/
1625:Source/tasks.c **** 
1626:Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1627:Source/tasks.c **** 
1628:Source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1629:Source/tasks.c **** 	{
1630:Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1631:Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1632:Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1633:Source/tasks.c **** 		return xIdleTaskHandle;
1634:Source/tasks.c **** 	}
1635:Source/tasks.c **** 
1636:Source/tasks.c **** #endif
1637:Source/tasks.c **** /*----------------------------------------------------------*/
1638:Source/tasks.c **** 
1639:Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1640:Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode	
1641:Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1642:Source/tasks.c **** 1. */
1643:Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 62


1644:Source/tasks.c **** 
1645:Source/tasks.c **** 	void vTaskStepTick( portTickType xTicksToJump )
1646:Source/tasks.c **** 	{
1647:Source/tasks.c **** 		configASSERT( xTicksToJump <= xNextTaskUnblockTime );
1648:Source/tasks.c **** 		xTickCount += xTicksToJump;
1649:Source/tasks.c **** 	}
1650:Source/tasks.c **** 
1651:Source/tasks.c **** #endif
1652:Source/tasks.c **** 
1653:Source/tasks.c **** /*-----------------------------------------------------------
1654:Source/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1655:Source/tasks.c ****  * documented in task.h
1656:Source/tasks.c ****  *----------------------------------------------------------*/
1657:Source/tasks.c **** 
1658:Source/tasks.c **** void vTaskIncrementTick( void )
1659:Source/tasks.c **** {
 1808              		.loc 1 1659 0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 16
 1811              		@ frame_needed = 1, uses_anonymous_args = 0
 1812 0000 80B5     		push	{r7, lr}	@
 1813              	.LCFI48:
 1814              		.cfi_def_cfa_offset 8
 1815              		.cfi_offset 7, -8
 1816              		.cfi_offset 14, -4
 1817 0002 84B0     		sub	sp, sp, #16	@,,
 1818              	.LCFI49:
 1819              		.cfi_def_cfa_offset 24
 1820 0004 00AF     		add	r7, sp, #0	@,,
 1821              	.LCFI50:
 1822              		.cfi_def_cfa_register 7
1660:Source/tasks.c **** tskTCB * pxTCB;
1661:Source/tasks.c **** 
1662:Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1663:Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1664:Source/tasks.c **** 	tasks to be unblocked. */
1665:Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1666:Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1823              		.loc 1 1666 0
 1824 0006 444B     		ldr	r3, .L126	@ tmp164,
 1825 0008 1B68     		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.49, uxSchedulerSuspended
 1826 000a 002B     		cmp	r3, #0	@ uxSchedulerSuspended.49,
 1827 000c 79D1     		bne	.L116	@,
1667:Source/tasks.c **** 	{
1668:Source/tasks.c **** 		++xTickCount;
 1828              		.loc 1 1668 0
 1829 000e 434B     		ldr	r3, .L126+4	@ tmp165,
 1830 0010 1B68     		ldr	r3, [r3, #0]	@ xTickCount.50, xTickCount
 1831 0012 03F10102 		add	r2, r3, #1	@ xTickCount.51, xTickCount.50,
 1832 0016 414B     		ldr	r3, .L126+4	@ tmp166,
 1833 0018 1A60     		str	r2, [r3, #0]	@ xTickCount.51, xTickCount
1669:Source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
 1834              		.loc 1 1669 0
 1835 001a 404B     		ldr	r3, .L126+4	@ tmp167,
 1836 001c 1B68     		ldr	r3, [r3, #0]	@ xTickCount.52, xTickCount
 1837 001e 002B     		cmp	r3, #0	@ xTickCount.52,
 1838 0020 22D1     		bne	.L117	@,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 63


 1839              	.LBB4:
1670:Source/tasks.c **** 		{
1671:Source/tasks.c **** 			xList *pxTemp;
1672:Source/tasks.c **** 
1673:Source/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1674:Source/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1675:Source/tasks.c **** 			an error! */
1676:Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
1677:Source/tasks.c **** 
1678:Source/tasks.c **** 			pxTemp = pxDelayedTaskList;
 1840              		.loc 1 1678 0
 1841 0022 3F4B     		ldr	r3, .L126+8	@ tmp168,
 1842 0024 1B68     		ldr	r3, [r3, #0]	@ tmp169, pxDelayedTaskList
 1843 0026 FB60     		str	r3, [r7, #12]	@ tmp169, pxTemp
1679:Source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 1844              		.loc 1 1679 0
 1845 0028 3E4B     		ldr	r3, .L126+12	@ tmp170,
 1846 002a 1A68     		ldr	r2, [r3, #0]	@ pxOverflowDelayedTaskList.53, pxOverflowDelayedTaskList
 1847 002c 3C4B     		ldr	r3, .L126+8	@ tmp171,
 1848 002e 1A60     		str	r2, [r3, #0]	@ pxOverflowDelayedTaskList.53, pxDelayedTaskList
1680:Source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 1849              		.loc 1 1680 0
 1850 0030 3C4B     		ldr	r3, .L126+12	@ tmp172,
 1851 0032 FA68     		ldr	r2, [r7, #12]	@ tmp173, pxTemp
 1852 0034 1A60     		str	r2, [r3, #0]	@ tmp173, pxOverflowDelayedTaskList
1681:Source/tasks.c **** 			xNumOfOverflows++;
 1853              		.loc 1 1681 0
 1854 0036 3C4B     		ldr	r3, .L126+16	@ tmp174,
 1855 0038 1B68     		ldr	r3, [r3, #0]	@ xNumOfOverflows.54, xNumOfOverflows
 1856 003a 03F10102 		add	r2, r3, #1	@ xNumOfOverflows.55, xNumOfOverflows.54,
 1857 003e 3A4B     		ldr	r3, .L126+16	@ tmp175,
 1858 0040 1A60     		str	r2, [r3, #0]	@ xNumOfOverflows.55, xNumOfOverflows
1682:Source/tasks.c **** 
1683:Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1859              		.loc 1 1683 0
 1860 0042 374B     		ldr	r3, .L126+8	@ tmp176,
 1861 0044 1B68     		ldr	r3, [r3, #0]	@ pxDelayedTaskList.56, pxDelayedTaskList
 1862 0046 1B68     		ldr	r3, [r3, #0]	@ D.6213, pxDelayedTaskList.56_9->uxNumberOfItems
 1863 0048 002B     		cmp	r3, #0	@ D.6213,
 1864 004a 04D1     		bne	.L118	@,
1684:Source/tasks.c **** 			{
1685:Source/tasks.c **** 				/* The new current delayed list is empty.  Set
1686:Source/tasks.c **** 				xNextTaskUnblockTime to the maximum possible value so it is
1687:Source/tasks.c **** 				extremely unlikely that the
1688:Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
1689:Source/tasks.c **** 				there is an item in the delayed list. */
1690:Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
 1865              		.loc 1 1690 0
 1866 004c 374B     		ldr	r3, .L126+20	@ tmp177,
 1867 004e 4FF0FF32 		mov	r2, #-1	@ tmp178,
 1868 0052 1A60     		str	r2, [r3, #0]	@ tmp178, xNextTaskUnblockTime
 1869 0054 08E0     		b	.L117	@
 1870              	.L118:
1691:Source/tasks.c **** 			}
1692:Source/tasks.c **** 			else
1693:Source/tasks.c **** 			{
1694:Source/tasks.c **** 				/* The new current delayed list is not empty, get the value of
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 64


1695:Source/tasks.c **** 				the item at the head of the delayed list.  This is the time at
1696:Source/tasks.c **** 				which the task at the head of the delayed list should be removed
1697:Source/tasks.c **** 				from the Blocked state. */
1698:Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 1871              		.loc 1 1698 0
 1872 0056 324B     		ldr	r3, .L126+8	@ tmp179,
 1873 0058 1B68     		ldr	r3, [r3, #0]	@ pxDelayedTaskList.57, pxDelayedTaskList
 1874 005a DB68     		ldr	r3, [r3, #12]	@ D.6218, pxDelayedTaskList.57_11->xListEnd.pxNext
 1875 005c DB68     		ldr	r3, [r3, #12]	@ tmp180, D.6218_12->pvOwner
 1876 005e BB60     		str	r3, [r7, #8]	@ tmp180, pxTCB
1699:Source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1877              		.loc 1 1699 0
 1878 0060 BB68     		ldr	r3, [r7, #8]	@ tmp181, pxTCB
 1879 0062 5A68     		ldr	r2, [r3, #4]	@ xNextTaskUnblockTime.58, pxTCB_13->xGenericListItem.xItemValue
 1880 0064 314B     		ldr	r3, .L126+20	@ tmp182,
 1881 0066 1A60     		str	r2, [r3, #0]	@ xNextTaskUnblockTime.58, xNextTaskUnblockTime
 1882              	.L117:
 1883              	.LBE4:
 1884              	.LBB5:
1700:Source/tasks.c **** 			}
1701:Source/tasks.c **** 		}
1702:Source/tasks.c **** 
1703:Source/tasks.c **** 		/* See if this tick has made a timeout expire. */
1704:Source/tasks.c **** 		prvCheckDelayedTasks();
 1885              		.loc 1 1704 0
 1886 0068 2C4B     		ldr	r3, .L126+4	@ tmp183,
 1887 006a 1A68     		ldr	r2, [r3, #0]	@ xTickCount.59, xTickCount
 1888 006c 2F4B     		ldr	r3, .L126+20	@ tmp184,
 1889 006e 1B68     		ldr	r3, [r3, #0]	@ xNextTaskUnblockTime.60, xNextTaskUnblockTime
 1890 0070 9A42     		cmp	r2, r3	@ xTickCount.59, xNextTaskUnblockTime.60
 1891 0072 4CD3     		bcc	.L115	@,
 1892              	.L124:
 1893              		.loc 1 1704 0 is_stmt 0 discriminator 1
 1894 0074 2A4B     		ldr	r3, .L126+8	@ tmp185,
 1895 0076 1B68     		ldr	r3, [r3, #0]	@ pxDelayedTaskList.61, pxDelayedTaskList
 1896 0078 1B68     		ldr	r3, [r3, #0]	@ D.6225, pxDelayedTaskList.61_17->uxNumberOfItems
 1897 007a 002B     		cmp	r3, #0	@ D.6225,
 1898 007c 04D1     		bne	.L120	@,
 1899              		.loc 1 1704 0 discriminator 2
 1900 007e 2B4B     		ldr	r3, .L126+20	@ tmp186,
 1901 0080 4FF0FF32 		mov	r2, #-1	@ tmp187,
 1902 0084 1A60     		str	r2, [r3, #0]	@ tmp187, xNextTaskUnblockTime
 1903 0086 42E0     		b	.L115	@
 1904              	.L120:
 1905              		.loc 1 1704 0 discriminator 3
 1906 0088 254B     		ldr	r3, .L126+8	@ tmp188,
 1907 008a 1B68     		ldr	r3, [r3, #0]	@ pxDelayedTaskList.62, pxDelayedTaskList
 1908 008c DB68     		ldr	r3, [r3, #12]	@ D.6229, pxDelayedTaskList.62_19->xListEnd.pxNext
 1909 008e DB68     		ldr	r3, [r3, #12]	@ tmp189, D.6229_20->pvOwner
 1910 0090 BB60     		str	r3, [r7, #8]	@ tmp189, pxTCB
 1911 0092 BB68     		ldr	r3, [r7, #8]	@ tmp190, pxTCB
 1912 0094 5B68     		ldr	r3, [r3, #4]	@ tmp191, pxTCB_21->xGenericListItem.xItemValue
 1913 0096 7B60     		str	r3, [r7, #4]	@ tmp191, xItemValue
 1914 0098 204B     		ldr	r3, .L126+4	@ tmp192,
 1915 009a 1A68     		ldr	r2, [r3, #0]	@ xTickCount.63, xTickCount
 1916 009c 7B68     		ldr	r3, [r7, #4]	@ tmp193, xItemValue
 1917 009e 9A42     		cmp	r2, r3	@ xTickCount.63, tmp193
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 65


 1918 00a0 03D2     		bcs	.L121	@,
 1919              		.loc 1 1704 0 discriminator 4
 1920 00a2 224B     		ldr	r3, .L126+20	@ tmp194,
 1921 00a4 7A68     		ldr	r2, [r7, #4]	@ tmp195, xItemValue
 1922 00a6 1A60     		str	r2, [r3, #0]	@ tmp195, xNextTaskUnblockTime
 1923 00a8 31E0     		b	.L115	@
 1924              	.L121:
 1925              		.loc 1 1704 0 discriminator 5
 1926 00aa BB68     		ldr	r3, [r7, #8]	@ tmp196, pxTCB
 1927 00ac 03F10403 		add	r3, r3, #4	@ D.6233, tmp196,
 1928 00b0 1846     		mov	r0, r3	@, D.6233
 1929 00b2 FFF7FEFF 		bl	uxListRemove	@
 1930 00b6 BB68     		ldr	r3, [r7, #8]	@ tmp197, pxTCB
 1931 00b8 9B6A     		ldr	r3, [r3, #40]	@ D.6234, pxTCB_21->xEventListItem.pvContainer
 1932 00ba 002B     		cmp	r3, #0	@ D.6234,
 1933 00bc 05D0     		beq	.L122	@,
 1934              		.loc 1 1704 0 discriminator 6
 1935 00be BB68     		ldr	r3, [r7, #8]	@ tmp198, pxTCB
 1936 00c0 03F11803 		add	r3, r3, #24	@ D.6237, tmp198,
 1937 00c4 1846     		mov	r0, r3	@, D.6237
 1938 00c6 FFF7FEFF 		bl	uxListRemove	@
 1939              	.L122:
 1940              		.loc 1 1704 0 discriminator 7
 1941 00ca BB68     		ldr	r3, [r7, #8]	@ tmp199, pxTCB
 1942 00cc DA6A     		ldr	r2, [r3, #44]	@ D.6238, pxTCB_21->uxPriority
 1943 00ce 184B     		ldr	r3, .L126+24	@ tmp200,
 1944 00d0 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.64, uxTopReadyPriority
 1945 00d2 9A42     		cmp	r2, r3	@ D.6238, uxTopReadyPriority.64
 1946 00d4 03D9     		bls	.L123	@,
 1947              		.loc 1 1704 0 discriminator 8
 1948 00d6 BB68     		ldr	r3, [r7, #8]	@ tmp201, pxTCB
 1949 00d8 DA6A     		ldr	r2, [r3, #44]	@ uxTopReadyPriority.65, pxTCB_21->uxPriority
 1950 00da 154B     		ldr	r3, .L126+24	@ tmp202,
 1951 00dc 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.65, uxTopReadyPriority
 1952              	.L123:
 1953              		.loc 1 1704 0 discriminator 9
 1954 00de BB68     		ldr	r3, [r7, #8]	@ tmp203, pxTCB
 1955 00e0 DA6A     		ldr	r2, [r3, #44]	@ D.6243, pxTCB_21->uxPriority
 1956 00e2 1346     		mov	r3, r2	@ tmp204, D.6243
 1957 00e4 4FEA8303 		lsl	r3, r3, #2	@ tmp204, tmp204,
 1958 00e8 9B18     		adds	r3, r3, r2	@ tmp204, tmp204, D.6243
 1959 00ea 4FEA8303 		lsl	r3, r3, #2	@ tmp205, tmp204,
 1960 00ee 114A     		ldr	r2, .L126+28	@ tmp206,
 1961 00f0 9A18     		adds	r2, r3, r2	@ D.6244, tmp204, tmp206
 1962 00f2 BB68     		ldr	r3, [r7, #8]	@ tmp207, pxTCB
 1963 00f4 03F10403 		add	r3, r3, #4	@ D.6245, tmp207,
 1964 00f8 1046     		mov	r0, r2	@, D.6244
 1965 00fa 1946     		mov	r1, r3	@, D.6245
 1966 00fc FFF7FEFF 		bl	vListInsertEnd	@
 1967 0100 B8E7     		b	.L124	@
 1968              	.L116:
 1969              	.LBE5:
1705:Source/tasks.c **** 	}
1706:Source/tasks.c **** 	else
1707:Source/tasks.c **** 	{
1708:Source/tasks.c **** 		++uxMissedTicks;
 1970              		.loc 1 1708 0 is_stmt 1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 66


 1971 0102 0D4B     		ldr	r3, .L126+32	@ tmp208,
 1972 0104 1B68     		ldr	r3, [r3, #0]	@ uxMissedTicks.66, uxMissedTicks
 1973 0106 03F10102 		add	r2, r3, #1	@ uxMissedTicks.67, uxMissedTicks.66,
 1974 010a 0B4B     		ldr	r3, .L126+32	@ tmp209,
 1975 010c 1A60     		str	r2, [r3, #0]	@ uxMissedTicks.67, uxMissedTicks
 1976              	.L115:
1709:Source/tasks.c **** 
1710:Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1711:Source/tasks.c **** 		scheduler is locked. */
1712:Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1713:Source/tasks.c **** 		{
1714:Source/tasks.c **** 			vApplicationTickHook();
1715:Source/tasks.c **** 		}
1716:Source/tasks.c **** 		#endif
1717:Source/tasks.c **** 	}
1718:Source/tasks.c **** 
1719:Source/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1720:Source/tasks.c **** 	{
1721:Source/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1722:Source/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1723:Source/tasks.c **** 		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
1724:Source/tasks.c **** 		{
1725:Source/tasks.c **** 			vApplicationTickHook();
1726:Source/tasks.c **** 		}
1727:Source/tasks.c **** 	}
1728:Source/tasks.c **** 	#endif
1729:Source/tasks.c **** }
 1977              		.loc 1 1729 0
 1978 010e 07F11007 		add	r7, r7, #16	@,,
 1979 0112 BD46     		mov	sp, r7
 1980 0114 80BD     		pop	{r7, pc}
 1981              	.L127:
 1982 0116 00BF     		.align	2
 1983              	.L126:
 1984 0118 00000000 		.word	uxSchedulerSuspended
 1985 011c 00000000 		.word	xTickCount
 1986 0120 00000000 		.word	pxDelayedTaskList
 1987 0124 00000000 		.word	pxOverflowDelayedTaskList
 1988 0128 00000000 		.word	xNumOfOverflows
 1989 012c 00000000 		.word	xNextTaskUnblockTime
 1990 0130 00000000 		.word	uxTopReadyPriority
 1991 0134 00000000 		.word	pxReadyTasksLists
 1992 0138 00000000 		.word	uxMissedTicks
 1993              		.cfi_endproc
 1994              	.LFE17:
 1995              		.size	vTaskIncrementTick, .-vTaskIncrementTick
 1996              		.section	.text.vTaskSwitchContext,"ax",%progbits
 1997              		.align	2
 1998              		.global	vTaskSwitchContext
 1999              		.thumb
 2000              		.thumb_func
 2001              		.type	vTaskSwitchContext, %function
 2002              	vTaskSwitchContext:
 2003              	.LFB18:
1730:Source/tasks.c **** /*-----------------------------------------------------------*/
1731:Source/tasks.c **** 
1732:Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 67


1733:Source/tasks.c **** 
1734:Source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1735:Source/tasks.c **** 	{
1736:Source/tasks.c **** 	tskTCB *xTCB;
1737:Source/tasks.c **** 
1738:Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1739:Source/tasks.c **** 		if( xTask == NULL )
1740:Source/tasks.c **** 		{
1741:Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1742:Source/tasks.c **** 		}
1743:Source/tasks.c **** 		else
1744:Source/tasks.c **** 		{
1745:Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1746:Source/tasks.c **** 		}
1747:Source/tasks.c **** 
1748:Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1749:Source/tasks.c **** 		the value can be accessed from an interrupt. */
1750:Source/tasks.c **** 		taskENTER_CRITICAL();
1751:Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
1752:Source/tasks.c **** 		taskEXIT_CRITICAL();
1753:Source/tasks.c **** 	}
1754:Source/tasks.c **** 
1755:Source/tasks.c **** #endif
1756:Source/tasks.c **** /*-----------------------------------------------------------*/
1757:Source/tasks.c **** 
1758:Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1759:Source/tasks.c **** 
1760:Source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1761:Source/tasks.c **** 	{
1762:Source/tasks.c **** 	tskTCB *xTCB;
1763:Source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1764:Source/tasks.c **** 
1765:Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1766:Source/tasks.c **** 		if( xTask == NULL )
1767:Source/tasks.c **** 		{
1768:Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1769:Source/tasks.c **** 		}
1770:Source/tasks.c **** 		else
1771:Source/tasks.c **** 		{
1772:Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1773:Source/tasks.c **** 		}
1774:Source/tasks.c **** 
1775:Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1776:Source/tasks.c **** 		the value can be accessed from an interrupt. */
1777:Source/tasks.c **** 		taskENTER_CRITICAL();
1778:Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
1779:Source/tasks.c **** 		taskEXIT_CRITICAL();
1780:Source/tasks.c **** 
1781:Source/tasks.c **** 		return xReturn;
1782:Source/tasks.c **** 	}
1783:Source/tasks.c **** 
1784:Source/tasks.c **** #endif
1785:Source/tasks.c **** /*-----------------------------------------------------------*/
1786:Source/tasks.c **** 
1787:Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1788:Source/tasks.c **** 
1789:Source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 68


1790:Source/tasks.c **** 	{
1791:Source/tasks.c **** 	tskTCB *xTCB;
1792:Source/tasks.c **** 	portBASE_TYPE xReturn;
1793:Source/tasks.c **** 
1794:Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1795:Source/tasks.c **** 		if( xTask == NULL )
1796:Source/tasks.c **** 		{
1797:Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1798:Source/tasks.c **** 		}
1799:Source/tasks.c **** 		else
1800:Source/tasks.c **** 		{
1801:Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1802:Source/tasks.c **** 		}
1803:Source/tasks.c **** 
1804:Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
1805:Source/tasks.c **** 		{
1806:Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
1807:Source/tasks.c **** 		}
1808:Source/tasks.c **** 		else
1809:Source/tasks.c **** 		{
1810:Source/tasks.c **** 			xReturn = pdFAIL;
1811:Source/tasks.c **** 		}
1812:Source/tasks.c **** 
1813:Source/tasks.c **** 		return xReturn;
1814:Source/tasks.c **** 	}
1815:Source/tasks.c **** 
1816:Source/tasks.c **** #endif
1817:Source/tasks.c **** /*-----------------------------------------------------------*/
1818:Source/tasks.c **** 
1819:Source/tasks.c **** void vTaskSwitchContext( void )
1820:Source/tasks.c **** {
 2004              		.loc 1 1820 0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 8
 2007              		@ frame_needed = 1, uses_anonymous_args = 0
 2008 0000 80B5     		push	{r7, lr}	@
 2009              	.LCFI51:
 2010              		.cfi_def_cfa_offset 8
 2011              		.cfi_offset 7, -8
 2012              		.cfi_offset 14, -4
 2013 0002 82B0     		sub	sp, sp, #8	@,,
 2014              	.LCFI52:
 2015              		.cfi_def_cfa_offset 16
 2016 0004 00AF     		add	r7, sp, #0	@,,
 2017              	.LCFI53:
 2018              		.cfi_def_cfa_register 7
1821:Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 2019              		.loc 1 1821 0
 2020 0006 354B     		ldr	r3, .L136	@ tmp161,
 2021 0008 1B68     		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.36, uxSchedulerSuspended
 2022 000a 002B     		cmp	r3, #0	@ uxSchedulerSuspended.36,
 2023 000c 04D0     		beq	.L129	@,
1822:Source/tasks.c **** 	{
1823:Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1824:Source/tasks.c **** 		switch. */
1825:Source/tasks.c **** 		xMissedYield = pdTRUE;
 2024              		.loc 1 1825 0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 69


 2025 000e 344B     		ldr	r3, .L136+4	@ tmp162,
 2026 0010 4FF00102 		mov	r2, #1	@ tmp163,
 2027 0014 1A60     		str	r2, [r3, #0]	@ tmp163, xMissedYield
 2028 0016 5CE0     		b	.L128	@
 2029              	.L129:
1826:Source/tasks.c **** 	}
1827:Source/tasks.c **** 	else
1828:Source/tasks.c **** 	{
1829:Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1830:Source/tasks.c **** 
1831:Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1832:Source/tasks.c **** 		{
1833:Source/tasks.c **** 			unsigned long ulTempCounter;
1834:Source/tasks.c **** 
1835:Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1836:Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
1837:Source/tasks.c **** 				#else
1838:Source/tasks.c **** 					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
1839:Source/tasks.c **** 				#endif
1840:Source/tasks.c **** 
1841:Source/tasks.c **** 				/* Add the amount of time the task has been running to the accumulated
1842:Source/tasks.c **** 				time so far.  The time the task started running was stored in
1843:Source/tasks.c **** 				ulTaskSwitchedInTime.  Note that there is no overflow protection here
1844:Source/tasks.c **** 				so count values are only valid until the timer overflows.  Generally
1845:Source/tasks.c **** 				this will be about 1 hour assuming a 1uS timer increment. */
1846:Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
1847:Source/tasks.c **** 				ulTaskSwitchedInTime = ulTempCounter;
1848:Source/tasks.c **** 		}
1849:Source/tasks.c **** 		#endif
1850:Source/tasks.c **** 
1851:Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 2030              		.loc 1 1851 0
 2031 0018 324B     		ldr	r3, .L136+8	@ tmp164,
 2032 001a 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.37, pxCurrentTCB
 2033 001c 1A68     		ldr	r2, [r3, #0]	@ D.6170, pxCurrentTCB.37_2->pxTopOfStack
 2034 001e 314B     		ldr	r3, .L136+8	@ tmp165,
 2035 0020 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.38, pxCurrentTCB
 2036 0022 1B6B     		ldr	r3, [r3, #48]	@ D.6172, pxCurrentTCB.38_4->pxStack
 2037 0024 9A42     		cmp	r2, r3	@ D.6170, D.6172
 2038 0026 09D8     		bhi	.L131	@,
 2039              		.loc 1 1851 0 is_stmt 0 discriminator 1
 2040 0028 2E4B     		ldr	r3, .L136+8	@ tmp166,
 2041 002a 1A68     		ldr	r2, [r3, #0]	@ pxCurrentTCB.39, pxCurrentTCB
 2042 002c 2D4B     		ldr	r3, .L136+8	@ tmp167,
 2043 002e 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.40, pxCurrentTCB
 2044 0030 03F13403 		add	r3, r3, #52	@ D.6177, pxCurrentTCB.40,
 2045 0034 1046     		mov	r0, r2	@, pxCurrentTCB.39
 2046 0036 1946     		mov	r1, r3	@, D.6177
 2047 0038 FFF7FEFF 		bl	vApplicationStackOverflowHook	@
 2048              	.L131:
 2049              	.LBB6:
1852:Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 2050              		.loc 1 1852 0 is_stmt 1
 2051 003c 294B     		ldr	r3, .L136+8	@ tmp168,
 2052 003e 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.41, pxCurrentTCB
 2053 0040 1B6B     		ldr	r3, [r3, #48]	@ D.6179, pxCurrentTCB.41_9->pxStack
 2054 0042 1846     		mov	r0, r3	@, D.6179
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 70


 2055 0044 2849     		ldr	r1, .L136+12	@,
 2056 0046 4FF01402 		mov	r2, #20	@,
 2057 004a FFF7FEFF 		bl	memcmp	@
 2058 004e 0346     		mov	r3, r0	@ D.6180,
 2059 0050 002B     		cmp	r3, #0	@ D.6180,
 2060 0052 10D0     		beq	.L133	@,
 2061              		.loc 1 1852 0 is_stmt 0 discriminator 1
 2062 0054 234B     		ldr	r3, .L136+8	@ tmp169,
 2063 0056 1A68     		ldr	r2, [r3, #0]	@ pxCurrentTCB.42, pxCurrentTCB
 2064 0058 224B     		ldr	r3, .L136+8	@ tmp170,
 2065 005a 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.43, pxCurrentTCB
 2066 005c 03F13403 		add	r3, r3, #52	@ D.6185, pxCurrentTCB.43,
 2067 0060 1046     		mov	r0, r2	@, pxCurrentTCB.42
 2068 0062 1946     		mov	r1, r3	@, D.6185
 2069 0064 FFF7FEFF 		bl	vApplicationStackOverflowHook	@
 2070              	.LBE6:
1853:Source/tasks.c **** 
1854:Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 2071              		.loc 1 1854 0 is_stmt 1 discriminator 1
 2072 0068 05E0     		b	.L133	@
 2073              	.L134:
 2074              		.loc 1 1854 0 is_stmt 0 discriminator 2
 2075 006a 204B     		ldr	r3, .L136+16	@ tmp171,
 2076 006c 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.44, uxTopReadyPriority
 2077 006e 03F1FF32 		add	r2, r3, #-1	@ uxTopReadyPriority.45, uxTopReadyPriority.44,
 2078 0072 1E4B     		ldr	r3, .L136+16	@ tmp172,
 2079 0074 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.45, uxTopReadyPriority
 2080              	.L133:
 2081              		.loc 1 1854 0 discriminator 1
 2082 0076 1D4B     		ldr	r3, .L136+16	@ tmp173,
 2083 0078 1A68     		ldr	r2, [r3, #0]	@ uxTopReadyPriority.46, uxTopReadyPriority
 2084 007a 1D49     		ldr	r1, .L136+20	@ tmp174,
 2085 007c 1346     		mov	r3, r2	@ tmp175, uxTopReadyPriority.46
 2086 007e 4FEA8303 		lsl	r3, r3, #2	@ tmp175, tmp175,
 2087 0082 9B18     		adds	r3, r3, r2	@ tmp175, tmp175, uxTopReadyPriority.46
 2088 0084 4FEA8303 		lsl	r3, r3, #2	@ tmp176, tmp175,
 2089 0088 CB18     		adds	r3, r1, r3	@ tmp177, tmp174, tmp175
 2090 008a 1B68     		ldr	r3, [r3, #0]	@ D.6189, pxReadyTasksLists[uxTopReadyPriority.46_15].uxNumberOfItems
 2091 008c 002B     		cmp	r3, #0	@ D.6189,
 2092 008e ECD0     		beq	.L134	@,
 2093              	.LBB7:
 2094              		.loc 1 1854 0 discriminator 3
 2095 0090 164B     		ldr	r3, .L136+16	@ tmp178,
 2096 0092 1A68     		ldr	r2, [r3, #0]	@ uxTopReadyPriority.47, uxTopReadyPriority
 2097 0094 1346     		mov	r3, r2	@ tmp179, uxTopReadyPriority.47
 2098 0096 4FEA8303 		lsl	r3, r3, #2	@ tmp179, tmp179,
 2099 009a 9B18     		adds	r3, r3, r2	@ tmp179, tmp179, uxTopReadyPriority.47
 2100 009c 4FEA8303 		lsl	r3, r3, #2	@ tmp180, tmp179,
 2101 00a0 134A     		ldr	r2, .L136+20	@ tmp182,
 2102 00a2 9B18     		adds	r3, r3, r2	@ tmp181, tmp179, tmp182
 2103 00a4 7B60     		str	r3, [r7, #4]	@ tmp181, pxConstList
 2104 00a6 7B68     		ldr	r3, [r7, #4]	@ tmp183, pxConstList
 2105 00a8 5B68     		ldr	r3, [r3, #4]	@ D.6191, pxConstList_20->pxIndex
 2106 00aa 5A68     		ldr	r2, [r3, #4]	@ D.6192, D.6191_21->pxNext
 2107 00ac 7B68     		ldr	r3, [r7, #4]	@ tmp184, pxConstList
 2108 00ae 5A60     		str	r2, [r3, #4]	@ D.6192, pxConstList_20->pxIndex
 2109 00b0 7B68     		ldr	r3, [r7, #4]	@ tmp185, pxConstList
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 71


 2110 00b2 5A68     		ldr	r2, [r3, #4]	@ D.6193, pxConstList_20->pxIndex
 2111 00b4 7B68     		ldr	r3, [r7, #4]	@ tmp186, pxConstList
 2112 00b6 03F10803 		add	r3, r3, #8	@ D.6194, tmp186,
 2113 00ba 9A42     		cmp	r2, r3	@ D.6193, D.6194
 2114 00bc 04D1     		bne	.L135	@,
 2115              		.loc 1 1854 0 discriminator 4
 2116 00be 7B68     		ldr	r3, [r7, #4]	@ tmp187, pxConstList
 2117 00c0 5B68     		ldr	r3, [r3, #4]	@ D.6197, pxConstList_20->pxIndex
 2118 00c2 5A68     		ldr	r2, [r3, #4]	@ D.6198, D.6197_25->pxNext
 2119 00c4 7B68     		ldr	r3, [r7, #4]	@ tmp188, pxConstList
 2120 00c6 5A60     		str	r2, [r3, #4]	@ D.6198, pxConstList_20->pxIndex
 2121              	.L135:
 2122              		.loc 1 1854 0 discriminator 5
 2123 00c8 7B68     		ldr	r3, [r7, #4]	@ tmp189, pxConstList
 2124 00ca 5B68     		ldr	r3, [r3, #4]	@ D.6199, pxConstList_20->pxIndex
 2125 00cc DA68     		ldr	r2, [r3, #12]	@ pxCurrentTCB.48, D.6199_27->pvOwner
 2126 00ce 054B     		ldr	r3, .L136+8	@ tmp190,
 2127 00d0 1A60     		str	r2, [r3, #0]	@ pxCurrentTCB.48, pxCurrentTCB
 2128              	.L128:
 2129              	.LBE7:
1855:Source/tasks.c **** 
1856:Source/tasks.c **** 		traceTASK_SWITCHED_IN();
1857:Source/tasks.c **** 	}
1858:Source/tasks.c **** }
 2130              		.loc 1 1858 0 is_stmt 1
 2131 00d2 07F10807 		add	r7, r7, #8	@,,
 2132 00d6 BD46     		mov	sp, r7
 2133 00d8 80BD     		pop	{r7, pc}
 2134              	.L137:
 2135 00da 00BF     		.align	2
 2136              	.L136:
 2137 00dc 00000000 		.word	uxSchedulerSuspended
 2138 00e0 00000000 		.word	xMissedYield
 2139 00e4 00000000 		.word	pxCurrentTCB
 2140 00e8 00000000 		.word	ucExpectedStackBytes.5891
 2141 00ec 00000000 		.word	uxTopReadyPriority
 2142 00f0 00000000 		.word	pxReadyTasksLists
 2143              		.cfi_endproc
 2144              	.LFE18:
 2145              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2146              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2147              		.align	2
 2148              		.global	vTaskPlaceOnEventList
 2149              		.thumb
 2150              		.thumb_func
 2151              		.type	vTaskPlaceOnEventList, %function
 2152              	vTaskPlaceOnEventList:
 2153              	.LFB19:
1859:Source/tasks.c **** /*-----------------------------------------------------------*/
1860:Source/tasks.c **** 
1861:Source/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1862:Source/tasks.c **** {
 2154              		.loc 1 1862 0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 16
 2157              		@ frame_needed = 1, uses_anonymous_args = 0
 2158 0000 80B5     		push	{r7, lr}	@
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 72


 2159              	.LCFI54:
 2160              		.cfi_def_cfa_offset 8
 2161              		.cfi_offset 7, -8
 2162              		.cfi_offset 14, -4
 2163 0002 84B0     		sub	sp, sp, #16	@,,
 2164              	.LCFI55:
 2165              		.cfi_def_cfa_offset 24
 2166 0004 00AF     		add	r7, sp, #0	@,,
 2167              	.LCFI56:
 2168              		.cfi_def_cfa_register 7
 2169 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
 2170 0008 3960     		str	r1, [r7, #0]	@ xTicksToWait, xTicksToWait
1863:Source/tasks.c **** portTickType xTimeToWake;
1864:Source/tasks.c **** 
1865:Source/tasks.c **** 	configASSERT( pxEventList );
1866:Source/tasks.c **** 
1867:Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1868:Source/tasks.c **** 	SCHEDULER SUSPENDED. */
1869:Source/tasks.c **** 
1870:Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1871:Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1872:Source/tasks.c **** 	is the first to be woken by the event. */
1873:Source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2171              		.loc 1 1873 0
 2172 000a 144B     		ldr	r3, .L141	@ tmp142,
 2173 000c 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.32, pxCurrentTCB
 2174 000e 03F11803 		add	r3, r3, #24	@ D.6153, pxCurrentTCB.32,
 2175 0012 7868     		ldr	r0, [r7, #4]	@, pxEventList
 2176 0014 1946     		mov	r1, r3	@, D.6153
 2177 0016 FFF7FEFF 		bl	vListInsert	@
1874:Source/tasks.c **** 
1875:Source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1876:Source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1877:Source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1878:Source/tasks.c **** 	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 2178              		.loc 1 1878 0
 2179 001a 104B     		ldr	r3, .L141	@ tmp143,
 2180 001c 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.33, pxCurrentTCB
 2181 001e 03F10403 		add	r3, r3, #4	@ D.6155, pxCurrentTCB.33,
 2182 0022 1846     		mov	r0, r3	@, D.6155
 2183 0024 FFF7FEFF 		bl	uxListRemove	@
1879:Source/tasks.c **** 	{
1880:Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
1881:Source/tasks.c **** 		check, and the port reset macro can be called directly. */
1882:Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1883:Source/tasks.c **** 	}
1884:Source/tasks.c **** 
1885:Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1886:Source/tasks.c **** 	{
1887:Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2184              		.loc 1 1887 0
 2185 0028 3B68     		ldr	r3, [r7, #0]	@ tmp144, xTicksToWait
 2186 002a B3F1FF3F 		cmp	r3, #-1	@ tmp144,
 2187 002e 08D1     		bne	.L139	@,
1888:Source/tasks.c **** 		{
1889:Source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1890:Source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 73


1891:Source/tasks.c **** 			indefinitely. */
1892:Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2188              		.loc 1 1892 0
 2189 0030 0A4B     		ldr	r3, .L141	@ tmp145,
 2190 0032 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.34, pxCurrentTCB
 2191 0034 03F10403 		add	r3, r3, #4	@ D.6162, pxCurrentTCB.34,
 2192 0038 0948     		ldr	r0, .L141+4	@,
 2193 003a 1946     		mov	r1, r3	@, D.6162
 2194 003c FFF7FEFF 		bl	vListInsertEnd	@
 2195 0040 07E0     		b	.L138	@
 2196              	.L139:
1893:Source/tasks.c **** 		}
1894:Source/tasks.c **** 		else
1895:Source/tasks.c **** 		{
1896:Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1897:Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1898:Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2197              		.loc 1 1898 0
 2198 0042 084B     		ldr	r3, .L141+8	@ tmp146,
 2199 0044 1A68     		ldr	r2, [r3, #0]	@ xTickCount.35, xTickCount
 2200 0046 3B68     		ldr	r3, [r7, #0]	@ tmp148, xTicksToWait
 2201 0048 D318     		adds	r3, r2, r3	@ tmp147, xTickCount.35, tmp148
 2202 004a FB60     		str	r3, [r7, #12]	@ tmp147, xTimeToWake
1899:Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2203              		.loc 1 1899 0
 2204 004c F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 2205 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2206              	.L138:
1900:Source/tasks.c **** 		}
1901:Source/tasks.c **** 	}
1902:Source/tasks.c **** 	#else
1903:Source/tasks.c **** 	{
1904:Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1905:Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1906:Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1907:Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1908:Source/tasks.c **** 	}
1909:Source/tasks.c **** 	#endif
1910:Source/tasks.c **** }
 2207              		.loc 1 1910 0
 2208 0052 07F11007 		add	r7, r7, #16	@,,
 2209 0056 BD46     		mov	sp, r7
 2210 0058 80BD     		pop	{r7, pc}
 2211              	.L142:
 2212 005a 00BF     		.align	2
 2213              	.L141:
 2214 005c 00000000 		.word	pxCurrentTCB
 2215 0060 00000000 		.word	xSuspendedTaskList
 2216 0064 00000000 		.word	xTickCount
 2217              		.cfi_endproc
 2218              	.LFE19:
 2219              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2220              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2221              		.align	2
 2222              		.global	xTaskRemoveFromEventList
 2223              		.thumb
 2224              		.thumb_func
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 74


 2225              		.type	xTaskRemoveFromEventList, %function
 2226              	xTaskRemoveFromEventList:
 2227              	.LFB20:
1911:Source/tasks.c **** /*-----------------------------------------------------------*/
1912:Source/tasks.c **** 
1913:Source/tasks.c **** #if configUSE_TIMERS == 1
1914:Source/tasks.c **** 
1915:Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
1916:Source/tasks.c **** 	{
1917:Source/tasks.c **** 	portTickType xTimeToWake;
1918:Source/tasks.c **** 
1919:Source/tasks.c **** 		configASSERT( pxEventList );
1920:Source/tasks.c **** 
1921:Source/tasks.c **** 		/* This function should not be called by application code hence the
1922:Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1923:Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1924:Source/tasks.c **** 		it should be called from a critical section. */
1925:Source/tasks.c **** 
1926:Source/tasks.c **** 
1927:Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1928:Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1929:Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1930:Source/tasks.c **** 		can be used in place of vListInsert. */
1931:Source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1932:Source/tasks.c **** 
1933:Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1934:Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1935:Source/tasks.c **** 		function is called form a critical section. */
1936:Source/tasks.c **** 		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
1937:Source/tasks.c **** 		{
1938:Source/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
1939:Source/tasks.c **** 			check, and the port reset macro can be called directly. */
1940:Source/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1941:Source/tasks.c **** 		}
1942:Source/tasks.c **** 
1943:Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1944:Source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1945:Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1946:Source/tasks.c **** 		
1947:Source/tasks.c **** 		traceTASK_DELAY_UNTIL();
1948:Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1949:Source/tasks.c **** 	}
1950:Source/tasks.c **** 
1951:Source/tasks.c **** #endif /* configUSE_TIMERS */
1952:Source/tasks.c **** /*-----------------------------------------------------------*/
1953:Source/tasks.c **** 
1954:Source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1955:Source/tasks.c **** {
 2228              		.loc 1 1955 0
 2229              		.cfi_startproc
 2230              		@ args = 0, pretend = 0, frame = 16
 2231              		@ frame_needed = 1, uses_anonymous_args = 0
 2232 0000 80B5     		push	{r7, lr}	@
 2233              	.LCFI57:
 2234              		.cfi_def_cfa_offset 8
 2235              		.cfi_offset 7, -8
 2236              		.cfi_offset 14, -4
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 75


 2237 0002 84B0     		sub	sp, sp, #16	@,,
 2238              	.LCFI58:
 2239              		.cfi_def_cfa_offset 24
 2240 0004 00AF     		add	r7, sp, #0	@,,
 2241              	.LCFI59:
 2242              		.cfi_def_cfa_register 7
 2243 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
1956:Source/tasks.c **** tskTCB *pxUnblockedTCB;
1957:Source/tasks.c **** portBASE_TYPE xReturn;
1958:Source/tasks.c **** 
1959:Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1960:Source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1961:Source/tasks.c **** 
1962:Source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1963:Source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1964:Source/tasks.c **** 	it to the ready list.
1965:Source/tasks.c **** 
1966:Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1967:Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1968:Source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1969:Source/tasks.c **** 
1970:Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1971:Source/tasks.c **** 	pxEventList is not empty. */
1972:Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2244              		.loc 1 1972 0
 2245 0008 7B68     		ldr	r3, [r7, #4]	@ tmp150, pxEventList
 2246 000a DB68     		ldr	r3, [r3, #12]	@ D.6128, pxEventList_2(D)->xListEnd.pxNext
 2247 000c DB68     		ldr	r3, [r3, #12]	@ tmp151, D.6128_3->pvOwner
 2248 000e BB60     		str	r3, [r7, #8]	@ tmp151, pxUnblockedTCB
1973:Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1974:Source/tasks.c **** 	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2249              		.loc 1 1974 0
 2250 0010 BB68     		ldr	r3, [r7, #8]	@ tmp152, pxUnblockedTCB
 2251 0012 03F11803 		add	r3, r3, #24	@ D.6129, tmp152,
 2252 0016 1846     		mov	r0, r3	@, D.6129
 2253 0018 FFF7FEFF 		bl	uxListRemove	@
1975:Source/tasks.c **** 
1976:Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2254              		.loc 1 1976 0
 2255 001c 204B     		ldr	r3, .L150	@ tmp153,
 2256 001e 1B68     		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.28, uxSchedulerSuspended
 2257 0020 002B     		cmp	r3, #0	@ uxSchedulerSuspended.28,
 2258 0022 21D1     		bne	.L144	@,
1977:Source/tasks.c **** 	{
1978:Source/tasks.c **** 		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2259              		.loc 1 1978 0
 2260 0024 BB68     		ldr	r3, [r7, #8]	@ tmp154, pxUnblockedTCB
 2261 0026 03F10403 		add	r3, r3, #4	@ D.6133, tmp154,
 2262 002a 1846     		mov	r0, r3	@, D.6133
 2263 002c FFF7FEFF 		bl	uxListRemove	@
1979:Source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2264              		.loc 1 1979 0
 2265 0030 BB68     		ldr	r3, [r7, #8]	@ tmp155, pxUnblockedTCB
 2266 0032 DA6A     		ldr	r2, [r3, #44]	@ D.6134, pxUnblockedTCB_4->uxPriority
 2267 0034 1B4B     		ldr	r3, .L150+4	@ tmp156,
 2268 0036 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.29, uxTopReadyPriority
 2269 0038 9A42     		cmp	r2, r3	@ D.6134, uxTopReadyPriority.29
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 76


 2270 003a 03D9     		bls	.L145	@,
 2271              		.loc 1 1979 0 is_stmt 0 discriminator 1
 2272 003c BB68     		ldr	r3, [r7, #8]	@ tmp157, pxUnblockedTCB
 2273 003e DA6A     		ldr	r2, [r3, #44]	@ uxTopReadyPriority.30, pxUnblockedTCB_4->uxPriority
 2274 0040 184B     		ldr	r3, .L150+4	@ tmp158,
 2275 0042 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.30, uxTopReadyPriority
 2276              	.L145:
 2277              		.loc 1 1979 0 discriminator 2
 2278 0044 BB68     		ldr	r3, [r7, #8]	@ tmp159, pxUnblockedTCB
 2279 0046 DA6A     		ldr	r2, [r3, #44]	@ D.6139, pxUnblockedTCB_4->uxPriority
 2280 0048 1346     		mov	r3, r2	@ tmp160, D.6139
 2281 004a 4FEA8303 		lsl	r3, r3, #2	@ tmp160, tmp160,
 2282 004e 9B18     		adds	r3, r3, r2	@ tmp160, tmp160, D.6139
 2283 0050 4FEA8303 		lsl	r3, r3, #2	@ tmp161, tmp160,
 2284 0054 144A     		ldr	r2, .L150+8	@ tmp162,
 2285 0056 9A18     		adds	r2, r3, r2	@ D.6140, tmp160, tmp162
 2286 0058 BB68     		ldr	r3, [r7, #8]	@ tmp163, pxUnblockedTCB
 2287 005a 03F10403 		add	r3, r3, #4	@ D.6141, tmp163,
 2288 005e 1046     		mov	r0, r2	@, D.6140
 2289 0060 1946     		mov	r1, r3	@, D.6141
 2290 0062 FFF7FEFF 		bl	vListInsertEnd	@
 2291 0066 06E0     		b	.L146	@
 2292              	.L144:
1980:Source/tasks.c **** 	}
1981:Source/tasks.c **** 	else
1982:Source/tasks.c **** 	{
1983:Source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1984:Source/tasks.c **** 		task pending until the scheduler is resumed. */
1985:Source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2293              		.loc 1 1985 0 is_stmt 1
 2294 0068 BB68     		ldr	r3, [r7, #8]	@ tmp164, pxUnblockedTCB
 2295 006a 03F11803 		add	r3, r3, #24	@ D.6143, tmp164,
 2296 006e 0F48     		ldr	r0, .L150+12	@,
 2297 0070 1946     		mov	r1, r3	@, D.6143
 2298 0072 FFF7FEFF 		bl	vListInsertEnd	@
 2299              	.L146:
1986:Source/tasks.c **** 	}
1987:Source/tasks.c **** 
1988:Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2300              		.loc 1 1988 0
 2301 0076 BB68     		ldr	r3, [r7, #8]	@ tmp165, pxUnblockedTCB
 2302 0078 DA6A     		ldr	r2, [r3, #44]	@ D.6144, pxUnblockedTCB_4->uxPriority
 2303 007a 0D4B     		ldr	r3, .L150+16	@ tmp166,
 2304 007c 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.31, pxCurrentTCB
 2305 007e DB6A     		ldr	r3, [r3, #44]	@ D.6146, pxCurrentTCB.31_16->uxPriority
 2306 0080 9A42     		cmp	r2, r3	@ D.6144, D.6146
 2307 0082 03D3     		bcc	.L147	@,
1989:Source/tasks.c **** 	{
1990:Source/tasks.c **** 		/* Return true if the task removed from the event list has
1991:Source/tasks.c **** 		a higher priority than the calling task.  This allows
1992:Source/tasks.c **** 		the calling task to know if it should force a context
1993:Source/tasks.c **** 		switch now. */
1994:Source/tasks.c **** 		xReturn = pdTRUE;
 2308              		.loc 1 1994 0
 2309 0084 4FF00103 		mov	r3, #1	@ tmp167,
 2310 0088 FB60     		str	r3, [r7, #12]	@ tmp167, xReturn
 2311 008a 02E0     		b	.L148	@
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 77


 2312              	.L147:
1995:Source/tasks.c **** 	}
1996:Source/tasks.c **** 	else
1997:Source/tasks.c **** 	{
1998:Source/tasks.c **** 		xReturn = pdFALSE;
 2313              		.loc 1 1998 0
 2314 008c 4FF00003 		mov	r3, #0	@ tmp168,
 2315 0090 FB60     		str	r3, [r7, #12]	@ tmp168, xReturn
 2316              	.L148:
1999:Source/tasks.c **** 	}
2000:Source/tasks.c **** 
2001:Source/tasks.c **** 	return xReturn;
 2317              		.loc 1 2001 0
 2318 0092 FB68     		ldr	r3, [r7, #12]	@ D.6150, xReturn
2002:Source/tasks.c **** }
 2319              		.loc 1 2002 0
 2320 0094 1846     		mov	r0, r3	@, <retval>
 2321 0096 07F11007 		add	r7, r7, #16	@,,
 2322 009a BD46     		mov	sp, r7
 2323 009c 80BD     		pop	{r7, pc}
 2324              	.L151:
 2325 009e 00BF     		.align	2
 2326              	.L150:
 2327 00a0 00000000 		.word	uxSchedulerSuspended
 2328 00a4 00000000 		.word	uxTopReadyPriority
 2329 00a8 00000000 		.word	pxReadyTasksLists
 2330 00ac 00000000 		.word	xPendingReadyList
 2331 00b0 00000000 		.word	pxCurrentTCB
 2332              		.cfi_endproc
 2333              	.LFE20:
 2334              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2335              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2336              		.align	2
 2337              		.global	vTaskSetTimeOutState
 2338              		.thumb
 2339              		.thumb_func
 2340              		.type	vTaskSetTimeOutState, %function
 2341              	vTaskSetTimeOutState:
 2342              	.LFB21:
2003:Source/tasks.c **** /*-----------------------------------------------------------*/
2004:Source/tasks.c **** 
2005:Source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
2006:Source/tasks.c **** {
 2343              		.loc 1 2006 0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 8
 2346              		@ frame_needed = 1, uses_anonymous_args = 0
 2347              		@ link register save eliminated.
 2348 0000 80B4     		push	{r7}	@
 2349              	.LCFI60:
 2350              		.cfi_def_cfa_offset 4
 2351              		.cfi_offset 7, -4
 2352 0002 83B0     		sub	sp, sp, #12	@,,
 2353              	.LCFI61:
 2354              		.cfi_def_cfa_offset 16
 2355 0004 00AF     		add	r7, sp, #0	@,,
 2356              	.LCFI62:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 78


 2357              		.cfi_def_cfa_register 7
 2358 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
2007:Source/tasks.c **** 	configASSERT( pxTimeOut );
2008:Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2359              		.loc 1 2008 0
 2360 0008 064B     		ldr	r3, .L153	@ tmp136,
 2361 000a 1A68     		ldr	r2, [r3, #0]	@ xNumOfOverflows.26, xNumOfOverflows
 2362 000c 7B68     		ldr	r3, [r7, #4]	@ tmp137, pxTimeOut
 2363 000e 1A60     		str	r2, [r3, #0]	@ xNumOfOverflows.26, pxTimeOut_2(D)->xOverflowCount
2009:Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2364              		.loc 1 2009 0
 2365 0010 054B     		ldr	r3, .L153+4	@ tmp138,
 2366 0012 1A68     		ldr	r2, [r3, #0]	@ xTickCount.27, xTickCount
 2367 0014 7B68     		ldr	r3, [r7, #4]	@ tmp139, pxTimeOut
 2368 0016 5A60     		str	r2, [r3, #4]	@ xTickCount.27, pxTimeOut_2(D)->xTimeOnEntering
2010:Source/tasks.c **** }
 2369              		.loc 1 2010 0
 2370 0018 07F10C07 		add	r7, r7, #12	@,,
 2371 001c BD46     		mov	sp, r7
 2372 001e 80BC     		pop	{r7}
 2373 0020 7047     		bx	lr
 2374              	.L154:
 2375 0022 00BF     		.align	2
 2376              	.L153:
 2377 0024 00000000 		.word	xNumOfOverflows
 2378 0028 00000000 		.word	xTickCount
 2379              		.cfi_endproc
 2380              	.LFE21:
 2381              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2382              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2383              		.align	2
 2384              		.global	xTaskCheckForTimeOut
 2385              		.thumb
 2386              		.thumb_func
 2387              		.type	xTaskCheckForTimeOut, %function
 2388              	xTaskCheckForTimeOut:
 2389              	.LFB22:
2011:Source/tasks.c **** /*-----------------------------------------------------------*/
2012:Source/tasks.c **** 
2013:Source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
2014:Source/tasks.c **** {
 2390              		.loc 1 2014 0
 2391              		.cfi_startproc
 2392              		@ args = 0, pretend = 0, frame = 16
 2393              		@ frame_needed = 1, uses_anonymous_args = 0
 2394 0000 80B5     		push	{r7, lr}	@
 2395              	.LCFI63:
 2396              		.cfi_def_cfa_offset 8
 2397              		.cfi_offset 7, -8
 2398              		.cfi_offset 14, -4
 2399 0002 84B0     		sub	sp, sp, #16	@,,
 2400              	.LCFI64:
 2401              		.cfi_def_cfa_offset 24
 2402 0004 00AF     		add	r7, sp, #0	@,,
 2403              	.LCFI65:
 2404              		.cfi_def_cfa_register 7
 2405 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 79


 2406 0008 3960     		str	r1, [r7, #0]	@ pxTicksToWait, pxTicksToWait
2015:Source/tasks.c **** portBASE_TYPE xReturn;
2016:Source/tasks.c **** 
2017:Source/tasks.c **** 	configASSERT( pxTimeOut );
2018:Source/tasks.c **** 	configASSERT( pxTicksToWait );
2019:Source/tasks.c **** 
2020:Source/tasks.c **** 	taskENTER_CRITICAL();
 2407              		.loc 1 2020 0
 2408 000a FFF7FEFF 		bl	vPortEnterCritical	@
2021:Source/tasks.c **** 	{
2022:Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2023:Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2024:Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2025:Source/tasks.c **** 			therefore never time out. */
2026:Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2409              		.loc 1 2026 0
 2410 000e 3B68     		ldr	r3, [r7, #0]	@ tmp150, pxTicksToWait
 2411 0010 1B68     		ldr	r3, [r3, #0]	@ D.6100, *pxTicksToWait_2(D)
 2412 0012 B3F1FF3F 		cmp	r3, #-1	@ D.6100,
 2413 0016 03D1     		bne	.L156	@,
2027:Source/tasks.c **** 			{
2028:Source/tasks.c **** 				xReturn = pdFALSE;
 2414              		.loc 1 2028 0
 2415 0018 4FF00003 		mov	r3, #0	@ tmp151,
 2416 001c FB60     		str	r3, [r7, #12]	@ tmp151, xReturn
 2417 001e 2CE0     		b	.L157	@
 2418              	.L156:
2029:Source/tasks.c **** 			}
2030:Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2031:Source/tasks.c **** 		#endif
2032:Source/tasks.c **** 
2033:Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2419              		.loc 1 2033 0
 2420 0020 7B68     		ldr	r3, [r7, #4]	@ tmp152, pxTimeOut
 2421 0022 1A68     		ldr	r2, [r3, #0]	@ D.6106, pxTimeOut_5(D)->xOverflowCount
 2422 0024 194B     		ldr	r3, .L161	@ tmp153,
 2423 0026 1B68     		ldr	r3, [r3, #0]	@ xNumOfOverflows.22, xNumOfOverflows
 2424 0028 9A42     		cmp	r2, r3	@ D.6106, xNumOfOverflows.22
 2425 002a 09D0     		beq	.L158	@,
 2426              		.loc 1 2033 0 is_stmt 0 discriminator 1
 2427 002c 7B68     		ldr	r3, [r7, #4]	@ tmp154, pxTimeOut
 2428 002e 5A68     		ldr	r2, [r3, #4]	@ D.6109, pxTimeOut_5(D)->xTimeOnEntering
 2429 0030 174B     		ldr	r3, .L161+4	@ tmp155,
 2430 0032 1B68     		ldr	r3, [r3, #0]	@ xTickCount.23, xTickCount
 2431 0034 9A42     		cmp	r2, r3	@ D.6109, xTickCount.23
 2432 0036 03D8     		bhi	.L158	@,
2034:Source/tasks.c **** 		{
2035:Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2036:Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2037:Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2038:Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2039:Source/tasks.c **** 			xReturn = pdTRUE;
 2433              		.loc 1 2039 0 is_stmt 1
 2434 0038 4FF00103 		mov	r3, #1	@ tmp156,
 2435 003c FB60     		str	r3, [r7, #12]	@ tmp156, xReturn
 2436 003e 1CE0     		b	.L157	@
 2437              	.L158:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 80


2040:Source/tasks.c **** 		}
2041:Source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2438              		.loc 1 2041 0
 2439 0040 134B     		ldr	r3, .L161+4	@ tmp157,
 2440 0042 1A68     		ldr	r2, [r3, #0]	@ xTickCount.24, xTickCount
 2441 0044 7B68     		ldr	r3, [r7, #4]	@ tmp158, pxTimeOut
 2442 0046 5B68     		ldr	r3, [r3, #4]	@ D.6113, pxTimeOut_5(D)->xTimeOnEntering
 2443 0048 D21A     		subs	r2, r2, r3	@ D.6114, xTickCount.24, D.6113
 2444 004a 3B68     		ldr	r3, [r7, #0]	@ tmp159, pxTicksToWait
 2445 004c 1B68     		ldr	r3, [r3, #0]	@ D.6115, *pxTicksToWait_2(D)
 2446 004e 9A42     		cmp	r2, r3	@ D.6114, D.6115
 2447 0050 10D2     		bcs	.L159	@,
2042:Source/tasks.c **** 		{
2043:Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2044:Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2448              		.loc 1 2044 0
 2449 0052 3B68     		ldr	r3, [r7, #0]	@ tmp160, pxTicksToWait
 2450 0054 1A68     		ldr	r2, [r3, #0]	@ D.6118, *pxTicksToWait_2(D)
 2451 0056 7B68     		ldr	r3, [r7, #4]	@ tmp161, pxTimeOut
 2452 0058 5968     		ldr	r1, [r3, #4]	@ D.6119, pxTimeOut_5(D)->xTimeOnEntering
 2453 005a 0D4B     		ldr	r3, .L161+4	@ tmp162,
 2454 005c 1B68     		ldr	r3, [r3, #0]	@ xTickCount.25, xTickCount
 2455 005e CB1A     		subs	r3, r1, r3	@ D.6121, D.6119, xTickCount.25
 2456 0060 D218     		adds	r2, r2, r3	@ D.6122, D.6118, D.6121
 2457 0062 3B68     		ldr	r3, [r7, #0]	@ tmp163, pxTicksToWait
 2458 0064 1A60     		str	r2, [r3, #0]	@ D.6122, *pxTicksToWait_2(D)
2045:Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2459              		.loc 1 2045 0
 2460 0066 7868     		ldr	r0, [r7, #4]	@, pxTimeOut
 2461 0068 FFF7FEFF 		bl	vTaskSetTimeOutState	@
2046:Source/tasks.c **** 			xReturn = pdFALSE;
 2462              		.loc 1 2046 0
 2463 006c 4FF00003 		mov	r3, #0	@ tmp164,
 2464 0070 FB60     		str	r3, [r7, #12]	@ tmp164, xReturn
 2465 0072 02E0     		b	.L157	@
 2466              	.L159:
2047:Source/tasks.c **** 		}
2048:Source/tasks.c **** 		else
2049:Source/tasks.c **** 		{
2050:Source/tasks.c **** 			xReturn = pdTRUE;
 2467              		.loc 1 2050 0
 2468 0074 4FF00103 		mov	r3, #1	@ tmp165,
 2469 0078 FB60     		str	r3, [r7, #12]	@ tmp165, xReturn
 2470              	.L157:
2051:Source/tasks.c **** 		}
2052:Source/tasks.c **** 	}
2053:Source/tasks.c **** 	taskEXIT_CRITICAL();
 2471              		.loc 1 2053 0
 2472 007a FFF7FEFF 		bl	vPortExitCritical	@
2054:Source/tasks.c **** 
2055:Source/tasks.c **** 	return xReturn;
 2473              		.loc 1 2055 0
 2474 007e FB68     		ldr	r3, [r7, #12]	@ D.6124, xReturn
2056:Source/tasks.c **** }
 2475              		.loc 1 2056 0
 2476 0080 1846     		mov	r0, r3	@, <retval>
 2477 0082 07F11007 		add	r7, r7, #16	@,,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 81


 2478 0086 BD46     		mov	sp, r7
 2479 0088 80BD     		pop	{r7, pc}
 2480              	.L162:
 2481 008a 00BF     		.align	2
 2482              	.L161:
 2483 008c 00000000 		.word	xNumOfOverflows
 2484 0090 00000000 		.word	xTickCount
 2485              		.cfi_endproc
 2486              	.LFE22:
 2487              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2488              		.section	.text.vTaskMissedYield,"ax",%progbits
 2489              		.align	2
 2490              		.global	vTaskMissedYield
 2491              		.thumb
 2492              		.thumb_func
 2493              		.type	vTaskMissedYield, %function
 2494              	vTaskMissedYield:
 2495              	.LFB23:
2057:Source/tasks.c **** /*-----------------------------------------------------------*/
2058:Source/tasks.c **** 
2059:Source/tasks.c **** void vTaskMissedYield( void )
2060:Source/tasks.c **** {
 2496              		.loc 1 2060 0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 0
 2499              		@ frame_needed = 1, uses_anonymous_args = 0
 2500              		@ link register save eliminated.
 2501 0000 80B4     		push	{r7}	@
 2502              	.LCFI66:
 2503              		.cfi_def_cfa_offset 4
 2504              		.cfi_offset 7, -4
 2505 0002 00AF     		add	r7, sp, #0	@,,
 2506              	.LCFI67:
 2507              		.cfi_def_cfa_register 7
2061:Source/tasks.c **** 	xMissedYield = pdTRUE;
 2508              		.loc 1 2061 0
 2509 0004 034B     		ldr	r3, .L164	@ tmp134,
 2510 0006 4FF00102 		mov	r2, #1	@ tmp135,
 2511 000a 1A60     		str	r2, [r3, #0]	@ tmp135, xMissedYield
2062:Source/tasks.c **** }
 2512              		.loc 1 2062 0
 2513 000c BD46     		mov	sp, r7
 2514 000e 80BC     		pop	{r7}
 2515 0010 7047     		bx	lr
 2516              	.L165:
 2517 0012 00BF     		.align	2
 2518              	.L164:
 2519 0014 00000000 		.word	xMissedYield
 2520              		.cfi_endproc
 2521              	.LFE23:
 2522              		.size	vTaskMissedYield, .-vTaskMissedYield
 2523              		.section	.text.prvIdleTask,"ax",%progbits
 2524              		.align	2
 2525              		.thumb
 2526              		.thumb_func
 2527              		.type	prvIdleTask, %function
 2528              	prvIdleTask:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 82


 2529              	.LFB24:
2063:Source/tasks.c **** /*-----------------------------------------------------------*/
2064:Source/tasks.c **** 
2065:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2066:Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
2067:Source/tasks.c **** 	{
2068:Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2069:Source/tasks.c **** 	tskTCB *pxTCB;
2070:Source/tasks.c **** 
2071:Source/tasks.c **** 		if( xTask != NULL )
2072:Source/tasks.c **** 		{
2073:Source/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2074:Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2075:Source/tasks.c **** 		}
2076:Source/tasks.c **** 		else
2077:Source/tasks.c **** 		{
2078:Source/tasks.c **** 			uxReturn = 0U;
2079:Source/tasks.c **** 		}
2080:Source/tasks.c **** 
2081:Source/tasks.c **** 		return uxReturn;
2082:Source/tasks.c **** 	}
2083:Source/tasks.c **** #endif
2084:Source/tasks.c **** /*-----------------------------------------------------------*/
2085:Source/tasks.c **** 
2086:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2087:Source/tasks.c **** 	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
2088:Source/tasks.c **** 	{
2089:Source/tasks.c **** 	tskTCB *pxTCB;
2090:Source/tasks.c **** 
2091:Source/tasks.c **** 		if( xTask != NULL )
2092:Source/tasks.c **** 		{
2093:Source/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2094:Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2095:Source/tasks.c **** 		}
2096:Source/tasks.c **** 	}
2097:Source/tasks.c **** #endif
2098:Source/tasks.c **** 
2099:Source/tasks.c **** 
2100:Source/tasks.c **** /*
2101:Source/tasks.c ****  * -----------------------------------------------------------
2102:Source/tasks.c ****  * The Idle task.
2103:Source/tasks.c ****  * ----------------------------------------------------------
2104:Source/tasks.c ****  *
2105:Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2106:Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2107:Source/tasks.c ****  *
2108:Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
2109:Source/tasks.c ****  *
2110:Source/tasks.c ****  */
2111:Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2112:Source/tasks.c **** {
 2530              		.loc 1 2112 0
 2531              		.cfi_startproc
 2532              		@ args = 0, pretend = 0, frame = 8
 2533              		@ frame_needed = 1, uses_anonymous_args = 0
 2534 0000 80B5     		push	{r7, lr}	@
 2535              	.LCFI68:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 83


 2536              		.cfi_def_cfa_offset 8
 2537              		.cfi_offset 7, -8
 2538              		.cfi_offset 14, -4
 2539 0002 82B0     		sub	sp, sp, #8	@,,
 2540              	.LCFI69:
 2541              		.cfi_def_cfa_offset 16
 2542 0004 00AF     		add	r7, sp, #0	@,,
 2543              	.LCFI70:
 2544              		.cfi_def_cfa_register 7
 2545 0006 7860     		str	r0, [r7, #4]	@ pvParameters, pvParameters
 2546 0008 00E0     		b	.L168	@
 2547              	.L169:
2113:Source/tasks.c **** 	/* Stop warnings. */
2114:Source/tasks.c **** 	( void ) pvParameters;
2115:Source/tasks.c **** 
2116:Source/tasks.c **** 	for( ;; )
2117:Source/tasks.c **** 	{
2118:Source/tasks.c **** 		/* See if any tasks have been deleted. */
2119:Source/tasks.c **** 		prvCheckTasksWaitingTermination();
2120:Source/tasks.c **** 
2121:Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2122:Source/tasks.c **** 		{
2123:Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2124:Source/tasks.c **** 			see if any other task has become available.  If we are using
2125:Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
2126:Source/tasks.c **** 			will automatically get the processor anyway. */
2127:Source/tasks.c **** 			taskYIELD();
2128:Source/tasks.c **** 		}
2129:Source/tasks.c **** 		#endif
2130:Source/tasks.c **** 
2131:Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2132:Source/tasks.c **** 		{
2133:Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
2134:Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2135:Source/tasks.c **** 			to run then the idle task should yield before the end of the
2136:Source/tasks.c **** 			timeslice.
2137:Source/tasks.c **** 
2138:Source/tasks.c **** 			A critical region is not required here as we are just reading from
2139:Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2140:Source/tasks.c **** 			the ready list at the idle priority contains more than one task
2141:Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
2142:Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
2143:Source/tasks.c **** 			{
2144:Source/tasks.c **** 				taskYIELD();
2145:Source/tasks.c **** 			}
2146:Source/tasks.c **** 		}
2147:Source/tasks.c **** 		#endif
2148:Source/tasks.c **** 
2149:Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2150:Source/tasks.c **** 		{
2151:Source/tasks.c **** 			extern void vApplicationIdleHook( void );
2152:Source/tasks.c **** 
2153:Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2154:Source/tasks.c **** 			allows the application designer to add background functionality
2155:Source/tasks.c **** 			without the overhead of a separate task.
2156:Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2157:Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 84


2158:Source/tasks.c **** 			vApplicationIdleHook();
2159:Source/tasks.c **** 		}
2160:Source/tasks.c **** 		#endif
2161:Source/tasks.c **** 
2162:Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2163:Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2164:Source/tasks.c **** 		user defined low power mode	implementations require
2165:Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2166:Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2167:Source/tasks.c **** 		{
2168:Source/tasks.c **** 		portTickType xExpectedIdleTime;
2169:Source/tasks.c **** 		/* If the expected idle time is 1 then the idle time would end at
2170:Source/tasks.c **** 		the end of the current time slice.  The idle time must be at least
2171:Source/tasks.c **** 		2 to ensure any pended ticks between this point and the tick being
2172:Source/tasks.c **** 		stopped can be legitimately stepped over when the tick suppression
2173:Source/tasks.c **** 		routines returns. */
2174:Source/tasks.c **** 		const portTickType xMinimumExpectedIdleTime = ( portTickType ) 2;
2175:Source/tasks.c **** 
2176:Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2177:Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2178:Source/tasks.c **** 			test of the expected idle time is performed without the
2179:Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2180:Source/tasks.c **** 			valid. */
2181:Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2182:Source/tasks.c **** 
2183:Source/tasks.c **** 			if( xExpectedIdleTime >= xMinimumExpectedIdleTime )
2184:Source/tasks.c **** 			{
2185:Source/tasks.c **** 				vTaskSuspendAll();
2186:Source/tasks.c **** 				{
2187:Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2188:Source/tasks.c **** 					time can be sampled again, and this time its value can
2189:Source/tasks.c **** 					be used. */
2190:Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2191:Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2192:Source/tasks.c **** 
2193:Source/tasks.c **** 					if( xExpectedIdleTime >= xMinimumExpectedIdleTime )
2194:Source/tasks.c **** 					{
2195:Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2196:Source/tasks.c **** 					}
2197:Source/tasks.c **** 				}
2198:Source/tasks.c **** 				xTaskResumeAll();
2199:Source/tasks.c **** 			}
2200:Source/tasks.c **** 		}
2201:Source/tasks.c **** 		#endif
2202:Source/tasks.c **** 	}
 2548              		.loc 1 2202 0
 2549 000a 00BF     		nop
 2550              	.L168:
2119:Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 2551              		.loc 1 2119 0
 2552 000c FFF7FEFF 		bl	prvCheckTasksWaitingTermination	@
2142:Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 2553              		.loc 1 2142 0
 2554 0010 034B     		ldr	r3, .L170	@ tmp135,
 2555 0012 1B68     		ldr	r3, [r3, #0]	@ D.6097, pxReadyTasksLists[0].uxNumberOfItems
 2556 0014 012B     		cmp	r3, #1	@ D.6097,
 2557 0016 F8D9     		bls	.L169	@,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 85


2144:Source/tasks.c **** 				taskYIELD();
 2558              		.loc 1 2144 0
 2559 0018 FFF7FEFF 		bl	vPortYieldFromISR	@
 2560              		.loc 1 2202 0
 2561 001c F5E7     		b	.L169	@
 2562              	.L171:
 2563 001e 00BF     		.align	2
 2564              	.L170:
 2565 0020 00000000 		.word	pxReadyTasksLists
 2566              		.cfi_endproc
 2567              	.LFE24:
 2568              		.size	prvIdleTask, .-prvIdleTask
 2569              		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 2570              		.align	2
 2571              		.thumb
 2572              		.thumb_func
 2573              		.type	prvInitialiseTCBVariables, %function
 2574              	prvInitialiseTCBVariables:
 2575              	.LFB25:
2203:Source/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
2204:Source/tasks.c **** 
2205:Source/tasks.c **** 
2206:Source/tasks.c **** 
2207:Source/tasks.c **** 
2208:Source/tasks.c **** 
2209:Source/tasks.c **** 
2210:Source/tasks.c **** 
2211:Source/tasks.c **** /*-----------------------------------------------------------
2212:Source/tasks.c ****  * File private functions documented at the top of the file.
2213:Source/tasks.c ****  *----------------------------------------------------------*/
2214:Source/tasks.c **** 
2215:Source/tasks.c **** 
2216:Source/tasks.c **** 
2217:Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
2218:Source/tasks.c **** {
 2576              		.loc 1 2218 0
 2577              		.cfi_startproc
 2578              		@ args = 4, pretend = 0, frame = 16
 2579              		@ frame_needed = 1, uses_anonymous_args = 0
 2580 0000 80B5     		push	{r7, lr}	@
 2581              	.LCFI71:
 2582              		.cfi_def_cfa_offset 8
 2583              		.cfi_offset 7, -8
 2584              		.cfi_offset 14, -4
 2585 0002 84B0     		sub	sp, sp, #16	@,,
 2586              	.LCFI72:
 2587              		.cfi_def_cfa_offset 24
 2588 0004 00AF     		add	r7, sp, #0	@,,
 2589              	.LCFI73:
 2590              		.cfi_def_cfa_register 7
 2591 0006 F860     		str	r0, [r7, #12]	@ pxTCB, pxTCB
 2592 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 2593 000a 7A60     		str	r2, [r7, #4]	@ uxPriority, uxPriority
 2594 000c 3B60     		str	r3, [r7, #0]	@ xRegions, xRegions
2219:Source/tasks.c **** 	/* Store the function name in the TCB. */
2220:Source/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
2221:Source/tasks.c **** 	{
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 86


2222:Source/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
2223:Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 2595              		.loc 1 2223 0
 2596 000e FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 2597 0010 03F13403 		add	r3, r3, #52	@ D.6091, tmp138,
 2598 0014 1846     		mov	r0, r3	@, D.6091
 2599 0016 B968     		ldr	r1, [r7, #8]	@, pcName
 2600 0018 4FF01002 		mov	r2, #16	@,
 2601 001c FFF7FEFF 		bl	strncpy	@
2224:Source/tasks.c **** 	}
2225:Source/tasks.c **** 	#endif
2226:Source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
 2602              		.loc 1 2226 0
 2603 0020 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 2604 0022 4FF00002 		mov	r2, #0	@ tmp140,
 2605 0026 83F84320 		strb	r2, [r3, #67]	@ tmp141, pxTCB_2(D)->pcTaskName
2227:Source/tasks.c **** 
2228:Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2229:Source/tasks.c **** 	remove the privilege bit if one is present. */
2230:Source/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
 2606              		.loc 1 2230 0
 2607 002a 7B68     		ldr	r3, [r7, #4]	@ tmp142, uxPriority
 2608 002c 042B     		cmp	r3, #4	@ tmp142,
 2609 002e 02D9     		bls	.L173	@,
2231:Source/tasks.c **** 	{
2232:Source/tasks.c **** 		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 2610              		.loc 1 2232 0
 2611 0030 4FF00403 		mov	r3, #4	@ tmp143,
 2612 0034 7B60     		str	r3, [r7, #4]	@ tmp143, uxPriority
 2613              	.L173:
2233:Source/tasks.c **** 	}
2234:Source/tasks.c **** 
2235:Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 2614              		.loc 1 2235 0
 2615 0036 FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 2616 0038 7A68     		ldr	r2, [r7, #4]	@ tmp145, uxPriority
 2617 003a DA62     		str	r2, [r3, #44]	@ tmp145, pxTCB_2(D)->uxPriority
2236:Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2237:Source/tasks.c **** 	{
2238:Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 2618              		.loc 1 2238 0
 2619 003c FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 2620 003e 7A68     		ldr	r2, [r7, #4]	@ tmp147, uxPriority
 2621 0040 5A64     		str	r2, [r3, #68]	@ tmp147, pxTCB_2(D)->uxBasePriority
2239:Source/tasks.c **** 	}
2240:Source/tasks.c **** 	#endif
2241:Source/tasks.c **** 
2242:Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 2622              		.loc 1 2242 0
 2623 0042 FB68     		ldr	r3, [r7, #12]	@ tmp148, pxTCB
 2624 0044 03F10403 		add	r3, r3, #4	@ D.6094, tmp148,
 2625 0048 1846     		mov	r0, r3	@, D.6094
 2626 004a FFF7FEFF 		bl	vListInitialiseItem	@
2243:Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 2627              		.loc 1 2243 0
 2628 004e FB68     		ldr	r3, [r7, #12]	@ tmp149, pxTCB
 2629 0050 03F11803 		add	r3, r3, #24	@ D.6095, tmp149,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 87


 2630 0054 1846     		mov	r0, r3	@, D.6095
 2631 0056 FFF7FEFF 		bl	vListInitialiseItem	@
2244:Source/tasks.c **** 
2245:Source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2246:Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2247:Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 2632              		.loc 1 2247 0
 2633 005a FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 2634 005c FA68     		ldr	r2, [r7, #12]	@ tmp151, pxTCB
 2635 005e 1A61     		str	r2, [r3, #16]	@ tmp151, pxTCB_2(D)->xGenericListItem.pvOwner
2248:Source/tasks.c **** 
2249:Source/tasks.c **** 	/* Event lists are always in priority order. */
2250:Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 2636              		.loc 1 2250 0
 2637 0060 7B68     		ldr	r3, [r7, #4]	@ tmp152, uxPriority
 2638 0062 C3F10502 		rsb	r2, r3, #5	@ D.6096, tmp152,
 2639 0066 FB68     		ldr	r3, [r7, #12]	@ tmp153, pxTCB
 2640 0068 9A61     		str	r2, [r3, #24]	@ D.6096, pxTCB_2(D)->xEventListItem.xItemValue
2251:Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 2641              		.loc 1 2251 0
 2642 006a FB68     		ldr	r3, [r7, #12]	@ tmp154, pxTCB
 2643 006c FA68     		ldr	r2, [r7, #12]	@ tmp155, pxTCB
 2644 006e 5A62     		str	r2, [r3, #36]	@ tmp155, pxTCB_2(D)->xEventListItem.pvOwner
2252:Source/tasks.c **** 
2253:Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2254:Source/tasks.c **** 	{
2255:Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2256:Source/tasks.c **** 	}
2257:Source/tasks.c **** 	#endif
2258:Source/tasks.c **** 
2259:Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2260:Source/tasks.c **** 	{
2261:Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2262:Source/tasks.c **** 	}
2263:Source/tasks.c **** 	#endif
2264:Source/tasks.c **** 
2265:Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2266:Source/tasks.c **** 	{
2267:Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2268:Source/tasks.c **** 	}
2269:Source/tasks.c **** 	#endif
2270:Source/tasks.c **** 
2271:Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2272:Source/tasks.c **** 	{
2273:Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2274:Source/tasks.c **** 	}
2275:Source/tasks.c **** 	#else
2276:Source/tasks.c **** 	{
2277:Source/tasks.c **** 		( void ) xRegions;
2278:Source/tasks.c **** 		( void ) usStackDepth;
2279:Source/tasks.c **** 	}
2280:Source/tasks.c **** 	#endif
2281:Source/tasks.c **** }
 2645              		.loc 1 2281 0
 2646 0070 07F11007 		add	r7, r7, #16	@,,
 2647 0074 BD46     		mov	sp, r7
 2648 0076 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 88


 2649              		.cfi_endproc
 2650              	.LFE25:
 2651              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 2652              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 2653              		.align	2
 2654              		.thumb
 2655              		.thumb_func
 2656              		.type	prvInitialiseTaskLists, %function
 2657              	prvInitialiseTaskLists:
 2658              	.LFB26:
2282:Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Source/tasks.c **** 
2284:Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2285:Source/tasks.c **** 
2286:Source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2287:Source/tasks.c **** 	{
2288:Source/tasks.c **** 	tskTCB *pxTCB;
2289:Source/tasks.c **** 
2290:Source/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
2291:Source/tasks.c **** 		{
2292:Source/tasks.c **** 			xTaskToModify = NULL;
2293:Source/tasks.c **** 		}
2294:Source/tasks.c **** 
2295:Source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2296:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2297:Source/tasks.c **** 
2298:Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2299:Source/tasks.c **** 	}
2300:Source/tasks.c **** 	/*-----------------------------------------------------------*/
2301:Source/tasks.c **** #endif
2302:Source/tasks.c **** 
2303:Source/tasks.c **** static void prvInitialiseTaskLists( void )
2304:Source/tasks.c **** {
 2659              		.loc 1 2304 0
 2660              		.cfi_startproc
 2661              		@ args = 0, pretend = 0, frame = 8
 2662              		@ frame_needed = 1, uses_anonymous_args = 0
 2663 0000 80B5     		push	{r7, lr}	@
 2664              	.LCFI74:
 2665              		.cfi_def_cfa_offset 8
 2666              		.cfi_offset 7, -8
 2667              		.cfi_offset 14, -4
 2668 0002 82B0     		sub	sp, sp, #8	@,,
 2669              	.LCFI75:
 2670              		.cfi_def_cfa_offset 16
 2671 0004 00AF     		add	r7, sp, #0	@,,
 2672              	.LCFI76:
 2673              		.cfi_def_cfa_register 7
2305:Source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2306:Source/tasks.c **** 
2307:Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 2674              		.loc 1 2307 0
 2675 0006 4FF00003 		mov	r3, #0	@ tmp135,
 2676 000a 7B60     		str	r3, [r7, #4]	@ tmp135, uxPriority
 2677 000c 0FE0     		b	.L175	@
 2678              	.L176:
2308:Source/tasks.c **** 	{
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 89


2309:Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 2679              		.loc 1 2309 0 discriminator 2
 2680 000e 7A68     		ldr	r2, [r7, #4]	@ tmp136, uxPriority
 2681 0010 1346     		mov	r3, r2	@ tmp137, tmp136
 2682 0012 4FEA8303 		lsl	r3, r3, #2	@ tmp137, tmp137,
 2683 0016 9B18     		adds	r3, r3, r2	@ tmp137, tmp137, tmp136
 2684 0018 4FEA8303 		lsl	r3, r3, #2	@ tmp138, tmp137,
 2685 001c 124A     		ldr	r2, .L177	@ tmp139,
 2686 001e 9B18     		adds	r3, r3, r2	@ D.6090, tmp137, tmp139
 2687 0020 1846     		mov	r0, r3	@, D.6090
 2688 0022 FFF7FEFF 		bl	vListInitialise	@
2307:Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 2689              		.loc 1 2307 0 discriminator 2
 2690 0026 7B68     		ldr	r3, [r7, #4]	@ tmp141, uxPriority
 2691 0028 03F10103 		add	r3, r3, #1	@ tmp140, tmp141,
 2692 002c 7B60     		str	r3, [r7, #4]	@ tmp140, uxPriority
 2693              	.L175:
2307:Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 2694              		.loc 1 2307 0 is_stmt 0 discriminator 1
 2695 002e 7B68     		ldr	r3, [r7, #4]	@ tmp142, uxPriority
 2696 0030 042B     		cmp	r3, #4	@ tmp142,
 2697 0032 ECD9     		bls	.L176	@,
2310:Source/tasks.c **** 	}
2311:Source/tasks.c **** 
2312:Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 2698              		.loc 1 2312 0 is_stmt 1
 2699 0034 0D48     		ldr	r0, .L177+4	@,
 2700 0036 FFF7FEFF 		bl	vListInitialise	@
2313:Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 2701              		.loc 1 2313 0
 2702 003a 0D48     		ldr	r0, .L177+8	@,
 2703 003c FFF7FEFF 		bl	vListInitialise	@
2314:Source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 2704              		.loc 1 2314 0
 2705 0040 0C48     		ldr	r0, .L177+12	@,
 2706 0042 FFF7FEFF 		bl	vListInitialise	@
2315:Source/tasks.c **** 
2316:Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2317:Source/tasks.c **** 	{
2318:Source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 2707              		.loc 1 2318 0
 2708 0046 0C48     		ldr	r0, .L177+16	@,
 2709 0048 FFF7FEFF 		bl	vListInitialise	@
2319:Source/tasks.c **** 	}
2320:Source/tasks.c **** 	#endif
2321:Source/tasks.c **** 
2322:Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2323:Source/tasks.c **** 	{
2324:Source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 2710              		.loc 1 2324 0
 2711 004c 0B48     		ldr	r0, .L177+20	@,
 2712 004e FFF7FEFF 		bl	vListInitialise	@
2325:Source/tasks.c **** 	}
2326:Source/tasks.c **** 	#endif
2327:Source/tasks.c **** 
2328:Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2329:Source/tasks.c **** 	using list2. */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 90


2330:Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 2713              		.loc 1 2330 0
 2714 0052 0B4B     		ldr	r3, .L177+24	@ tmp143,
 2715 0054 054A     		ldr	r2, .L177+4	@ tmp144,
 2716 0056 1A60     		str	r2, [r3, #0]	@ tmp144, pxDelayedTaskList
2331:Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 2717              		.loc 1 2331 0
 2718 0058 0A4B     		ldr	r3, .L177+28	@ tmp145,
 2719 005a 054A     		ldr	r2, .L177+8	@ tmp146,
 2720 005c 1A60     		str	r2, [r3, #0]	@ tmp146, pxOverflowDelayedTaskList
2332:Source/tasks.c **** }
 2721              		.loc 1 2332 0
 2722 005e 07F10807 		add	r7, r7, #8	@,,
 2723 0062 BD46     		mov	sp, r7
 2724 0064 80BD     		pop	{r7, pc}
 2725              	.L178:
 2726 0066 00BF     		.align	2
 2727              	.L177:
 2728 0068 00000000 		.word	pxReadyTasksLists
 2729 006c 00000000 		.word	xDelayedTaskList1
 2730 0070 00000000 		.word	xDelayedTaskList2
 2731 0074 00000000 		.word	xPendingReadyList
 2732 0078 00000000 		.word	xTasksWaitingTermination
 2733 007c 00000000 		.word	xSuspendedTaskList
 2734 0080 00000000 		.word	pxDelayedTaskList
 2735 0084 00000000 		.word	pxOverflowDelayedTaskList
 2736              		.cfi_endproc
 2737              	.LFE26:
 2738              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 2739              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2740              		.align	2
 2741              		.thumb
 2742              		.thumb_func
 2743              		.type	prvCheckTasksWaitingTermination, %function
 2744              	prvCheckTasksWaitingTermination:
 2745              	.LFB27:
2333:Source/tasks.c **** /*-----------------------------------------------------------*/
2334:Source/tasks.c **** 
2335:Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2336:Source/tasks.c **** {
 2746              		.loc 1 2336 0
 2747              		.cfi_startproc
 2748              		@ args = 0, pretend = 0, frame = 8
 2749              		@ frame_needed = 1, uses_anonymous_args = 0
 2750 0000 80B5     		push	{r7, lr}	@
 2751              	.LCFI77:
 2752              		.cfi_def_cfa_offset 8
 2753              		.cfi_offset 7, -8
 2754              		.cfi_offset 14, -4
 2755 0002 82B0     		sub	sp, sp, #8	@,,
 2756              	.LCFI78:
 2757              		.cfi_def_cfa_offset 16
 2758 0004 00AF     		add	r7, sp, #0	@,,
 2759              	.LCFI79:
 2760              		.cfi_def_cfa_register 7
 2761              	.LBB8:
2337:Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 91


2338:Source/tasks.c **** 	{
2339:Source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2340:Source/tasks.c **** 
2341:Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2342:Source/tasks.c **** 		too often in the idle task. */
2343:Source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 2762              		.loc 1 2343 0
 2763 0006 2BE0     		b	.L180	@
 2764              	.L181:
2344:Source/tasks.c **** 		{
2345:Source/tasks.c **** 			vTaskSuspendAll();
 2765              		.loc 1 2345 0
 2766 0008 FFF7FEFF 		bl	vTaskSuspendAll	@
2346:Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 2767              		.loc 1 2346 0
 2768 000c 184B     		ldr	r3, .L182	@ tmp143,
 2769 000e 1B68     		ldr	r3, [r3, #0]	@ D.6079, xTasksWaitingTermination.uxNumberOfItems
 2770 0010 002B     		cmp	r3, #0	@ D.6079,
 2771 0012 14BF     		ite	ne	@
 2772 0014 0023     		movne	r3, #0	@, tmp145
 2773 0016 0123     		moveq	r3, #1	@, tmp145
 2774 0018 DBB2     		uxtb	r3, r3	@ D.6080, tmp144
 2775 001a 7B60     		str	r3, [r7, #4]	@ D.6080, xListIsEmpty
2347:Source/tasks.c **** 			xTaskResumeAll();
 2776              		.loc 1 2347 0
 2777 001c FFF7FEFF 		bl	xTaskResumeAll	@
2348:Source/tasks.c **** 
2349:Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 2778              		.loc 1 2349 0
 2779 0020 7B68     		ldr	r3, [r7, #4]	@ tmp146, xListIsEmpty
 2780 0022 002B     		cmp	r3, #0	@ tmp146,
 2781 0024 1CD1     		bne	.L180	@,
 2782              	.LBB9:
2350:Source/tasks.c **** 			{
2351:Source/tasks.c **** 				tskTCB *pxTCB;
2352:Source/tasks.c **** 
2353:Source/tasks.c **** 				taskENTER_CRITICAL();
 2783              		.loc 1 2353 0
 2784 0026 FFF7FEFF 		bl	vPortEnterCritical	@
2354:Source/tasks.c **** 				{
2355:Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 2785              		.loc 1 2355 0
 2786 002a 114B     		ldr	r3, .L182	@ tmp147,
 2787 002c DB68     		ldr	r3, [r3, #12]	@ D.6083, xTasksWaitingTermination.xListEnd.pxNext
 2788 002e DB68     		ldr	r3, [r3, #12]	@ tmp148, D.6083_5->pvOwner
 2789 0030 3B60     		str	r3, [r7, #0]	@ tmp148, pxTCB
2356:Source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
 2790              		.loc 1 2356 0
 2791 0032 3B68     		ldr	r3, [r7, #0]	@ tmp149, pxTCB
 2792 0034 03F10403 		add	r3, r3, #4	@ D.6084, tmp149,
 2793 0038 1846     		mov	r0, r3	@, D.6084
 2794 003a FFF7FEFF 		bl	uxListRemove	@
2357:Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2795              		.loc 1 2357 0
 2796 003e 0D4B     		ldr	r3, .L182+4	@ tmp150,
 2797 0040 1B68     		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.17, uxCurrentNumberOfTasks
 2798 0042 03F1FF32 		add	r2, r3, #-1	@ uxCurrentNumberOfTasks.18, uxCurrentNumberOfTasks.17,
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 92


 2799 0046 0B4B     		ldr	r3, .L182+4	@ tmp151,
 2800 0048 1A60     		str	r2, [r3, #0]	@ uxCurrentNumberOfTasks.18, uxCurrentNumberOfTasks
2358:Source/tasks.c **** 					--uxTasksDeleted;
 2801              		.loc 1 2358 0
 2802 004a 0B4B     		ldr	r3, .L182+8	@ tmp152,
 2803 004c 1B68     		ldr	r3, [r3, #0]	@ uxTasksDeleted.19, uxTasksDeleted
 2804 004e 03F1FF32 		add	r2, r3, #-1	@ uxTasksDeleted.20, uxTasksDeleted.19,
 2805 0052 094B     		ldr	r3, .L182+8	@ tmp153,
 2806 0054 1A60     		str	r2, [r3, #0]	@ uxTasksDeleted.20, uxTasksDeleted
2359:Source/tasks.c **** 				}
2360:Source/tasks.c **** 				taskEXIT_CRITICAL();
 2807              		.loc 1 2360 0
 2808 0056 FFF7FEFF 		bl	vPortExitCritical	@
2361:Source/tasks.c **** 
2362:Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 2809              		.loc 1 2362 0
 2810 005a 3868     		ldr	r0, [r7, #0]	@, pxTCB
 2811 005c FFF7FEFF 		bl	prvDeleteTCB	@
 2812              	.L180:
 2813              	.LBE9:
2343:Source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 2814              		.loc 1 2343 0 discriminator 1
 2815 0060 054B     		ldr	r3, .L182+8	@ tmp154,
 2816 0062 1B68     		ldr	r3, [r3, #0]	@ uxTasksDeleted.21, uxTasksDeleted
 2817 0064 002B     		cmp	r3, #0	@ uxTasksDeleted.21,
 2818 0066 CFD1     		bne	.L181	@,
 2819              	.LBE8:
2363:Source/tasks.c **** 			}
2364:Source/tasks.c **** 		}
2365:Source/tasks.c **** 	}
2366:Source/tasks.c **** 	#endif
2367:Source/tasks.c **** }
 2820              		.loc 1 2367 0
 2821 0068 07F10807 		add	r7, r7, #8	@,,
 2822 006c BD46     		mov	sp, r7
 2823 006e 80BD     		pop	{r7, pc}
 2824              	.L183:
 2825              		.align	2
 2826              	.L182:
 2827 0070 00000000 		.word	xTasksWaitingTermination
 2828 0074 00000000 		.word	uxCurrentNumberOfTasks
 2829 0078 00000000 		.word	uxTasksDeleted
 2830              		.cfi_endproc
 2831              	.LFE27:
 2832              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 2833              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 2834              		.align	2
 2835              		.thumb
 2836              		.thumb_func
 2837              		.type	prvAddCurrentTaskToDelayedList, %function
 2838              	prvAddCurrentTaskToDelayedList:
 2839              	.LFB28:
2368:Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Source/tasks.c **** 
2370:Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2371:Source/tasks.c **** {
 2840              		.loc 1 2371 0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 93


 2841              		.cfi_startproc
 2842              		@ args = 0, pretend = 0, frame = 8
 2843              		@ frame_needed = 1, uses_anonymous_args = 0
 2844 0000 80B5     		push	{r7, lr}	@
 2845              	.LCFI80:
 2846              		.cfi_def_cfa_offset 8
 2847              		.cfi_offset 7, -8
 2848              		.cfi_offset 14, -4
 2849 0002 82B0     		sub	sp, sp, #8	@,,
 2850              	.LCFI81:
 2851              		.cfi_def_cfa_offset 16
 2852 0004 00AF     		add	r7, sp, #0	@,,
 2853              	.LCFI82:
 2854              		.cfi_def_cfa_register 7
 2855 0006 7860     		str	r0, [r7, #4]	@ xTimeToWake, xTimeToWake
2372:Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2373:Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 2856              		.loc 1 2373 0
 2857 0008 144B     		ldr	r3, .L187	@ tmp143,
 2858 000a 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.10, pxCurrentTCB
 2859 000c 7A68     		ldr	r2, [r7, #4]	@ tmp144, xTimeToWake
 2860 000e 5A60     		str	r2, [r3, #4]	@ tmp144, pxCurrentTCB.10_1->xGenericListItem.xItemValue
2374:Source/tasks.c **** 
2375:Source/tasks.c **** 	if( xTimeToWake < xTickCount )
 2861              		.loc 1 2375 0
 2862 0010 134B     		ldr	r3, .L187+4	@ tmp145,
 2863 0012 1B68     		ldr	r3, [r3, #0]	@ xTickCount.11, xTickCount
 2864 0014 7A68     		ldr	r2, [r7, #4]	@ tmp146, xTimeToWake
 2865 0016 9A42     		cmp	r2, r3	@ tmp146, xTickCount.11
 2866 0018 0AD2     		bcs	.L185	@,
2376:Source/tasks.c **** 	{
2377:Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2378:Source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
 2867              		.loc 1 2378 0
 2868 001a 124B     		ldr	r3, .L187+8	@ tmp147,
 2869 001c 1A68     		ldr	r2, [r3, #0]	@ pxOverflowDelayedTaskList.12, pxOverflowDelayedTaskList
 2870 001e 0F4B     		ldr	r3, .L187	@ tmp148,
 2871 0020 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.13, pxCurrentTCB
 2872 0022 03F10403 		add	r3, r3, #4	@ D.6071, pxCurrentTCB.13,
 2873 0026 1046     		mov	r0, r2	@, pxOverflowDelayedTaskList.12
 2874 0028 1946     		mov	r1, r3	@, D.6071
 2875 002a FFF7FEFF 		bl	vListInsert	@
 2876 002e 11E0     		b	.L184	@
 2877              	.L185:
2379:Source/tasks.c **** 	}
2380:Source/tasks.c **** 	else
2381:Source/tasks.c **** 	{
2382:Source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2383:Source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
 2878              		.loc 1 2383 0
 2879 0030 0D4B     		ldr	r3, .L187+12	@ tmp149,
 2880 0032 1A68     		ldr	r2, [r3, #0]	@ pxDelayedTaskList.14, pxDelayedTaskList
 2881 0034 094B     		ldr	r3, .L187	@ tmp150,
 2882 0036 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.15, pxCurrentTCB
 2883 0038 03F10403 		add	r3, r3, #4	@ D.6075, pxCurrentTCB.15,
 2884 003c 1046     		mov	r0, r2	@, pxDelayedTaskList.14
 2885 003e 1946     		mov	r1, r3	@, D.6075
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 94


 2886 0040 FFF7FEFF 		bl	vListInsert	@
2384:Source/tasks.c **** 
2385:Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2386:Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2387:Source/tasks.c **** 		too. */
2388:Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 2887              		.loc 1 2388 0
 2888 0044 094B     		ldr	r3, .L187+16	@ tmp151,
 2889 0046 1B68     		ldr	r3, [r3, #0]	@ xNextTaskUnblockTime.16, xNextTaskUnblockTime
 2890 0048 7A68     		ldr	r2, [r7, #4]	@ tmp152, xTimeToWake
 2891 004a 9A42     		cmp	r2, r3	@ tmp152, xNextTaskUnblockTime.16
 2892 004c 02D2     		bcs	.L184	@,
2389:Source/tasks.c **** 		{
2390:Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 2893              		.loc 1 2390 0
 2894 004e 074B     		ldr	r3, .L187+16	@ tmp153,
 2895 0050 7A68     		ldr	r2, [r7, #4]	@ tmp154, xTimeToWake
 2896 0052 1A60     		str	r2, [r3, #0]	@ tmp154, xNextTaskUnblockTime
 2897              	.L184:
2391:Source/tasks.c **** 		}
2392:Source/tasks.c **** 	}
2393:Source/tasks.c **** }
 2898              		.loc 1 2393 0
 2899 0054 07F10807 		add	r7, r7, #8	@,,
 2900 0058 BD46     		mov	sp, r7
 2901 005a 80BD     		pop	{r7, pc}
 2902              	.L188:
 2903              		.align	2
 2904              	.L187:
 2905 005c 00000000 		.word	pxCurrentTCB
 2906 0060 00000000 		.word	xTickCount
 2907 0064 00000000 		.word	pxOverflowDelayedTaskList
 2908 0068 00000000 		.word	pxDelayedTaskList
 2909 006c 00000000 		.word	xNextTaskUnblockTime
 2910              		.cfi_endproc
 2911              	.LFE28:
 2912              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 2913              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 2914              		.align	2
 2915              		.thumb
 2916              		.thumb_func
 2917              		.type	prvAllocateTCBAndStack, %function
 2918              	prvAllocateTCBAndStack:
 2919              	.LFB29:
2394:Source/tasks.c **** /*-----------------------------------------------------------*/
2395:Source/tasks.c **** 
2396:Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2397:Source/tasks.c **** {
 2920              		.loc 1 2397 0
 2921              		.cfi_startproc
 2922              		@ args = 0, pretend = 0, frame = 16
 2923              		@ frame_needed = 1, uses_anonymous_args = 0
 2924 0000 80B5     		push	{r7, lr}	@
 2925              	.LCFI83:
 2926              		.cfi_def_cfa_offset 8
 2927              		.cfi_offset 7, -8
 2928              		.cfi_offset 14, -4
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 95


 2929 0002 84B0     		sub	sp, sp, #16	@,,
 2930              	.LCFI84:
 2931              		.cfi_def_cfa_offset 24
 2932 0004 00AF     		add	r7, sp, #0	@,,
 2933              	.LCFI85:
 2934              		.cfi_def_cfa_register 7
 2935 0006 0346     		mov	r3, r0	@ tmp143, usStackDepth
 2936 0008 3960     		str	r1, [r7, #0]	@ puxStackBuffer, puxStackBuffer
 2937 000a FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp144, usStackDepth
2398:Source/tasks.c **** tskTCB *pxNewTCB;
2399:Source/tasks.c **** 
2400:Source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2401:Source/tasks.c **** 	the implementation of the port malloc function. */
2402:Source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 2938              		.loc 1 2402 0
 2939 000c 4FF04800 		mov	r0, #72	@,
 2940 0010 FFF7FEFF 		bl	pvPortMalloc	@
 2941 0014 F860     		str	r0, [r7, #12]	@, pxNewTCB
2403:Source/tasks.c **** 
2404:Source/tasks.c **** 	if( pxNewTCB != NULL )
 2942              		.loc 1 2404 0
 2943 0016 FB68     		ldr	r3, [r7, #12]	@ tmp145, pxNewTCB
 2944 0018 002B     		cmp	r3, #0	@ tmp145,
 2945 001a 23D0     		beq	.L190	@,
2405:Source/tasks.c **** 	{
2406:Source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2407:Source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2408:Source/tasks.c **** 		be deleted later if required. */
2409:Source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 2946              		.loc 1 2409 0
 2947 001c 3B68     		ldr	r3, [r7, #0]	@ tmp146, puxStackBuffer
 2948 001e 002B     		cmp	r3, #0	@ tmp146,
 2949 0020 07D1     		bne	.L191	@,
 2950              		.loc 1 2409 0 is_stmt 0 discriminator 1
 2951 0022 FB88     		ldrh	r3, [r7, #6]	@ D.6053, usStackDepth
 2952 0024 4FEA8303 		lsl	r3, r3, #2	@ D.6054, D.6053,
 2953 0028 1846     		mov	r0, r3	@, D.6054
 2954 002a FFF7FEFF 		bl	pvPortMalloc	@
 2955 002e 0346     		mov	r3, r0	@ iftmp.9,
 2956 0030 00E0     		b	.L192	@
 2957              	.L191:
 2958              		.loc 1 2409 0 discriminator 2
 2959 0032 3B68     		ldr	r3, [r7, #0]	@ iftmp.9, puxStackBuffer
 2960              	.L192:
 2961              		.loc 1 2409 0 discriminator 3
 2962 0034 FA68     		ldr	r2, [r7, #12]	@ tmp147, pxNewTCB
 2963 0036 1363     		str	r3, [r2, #48]	@ iftmp.9, pxNewTCB_3->pxStack
2410:Source/tasks.c **** 
2411:Source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 2964              		.loc 1 2411 0 is_stmt 1 discriminator 3
 2965 0038 FB68     		ldr	r3, [r7, #12]	@ tmp148, pxNewTCB
 2966 003a 1B6B     		ldr	r3, [r3, #48]	@ D.6056, pxNewTCB_3->pxStack
 2967 003c 002B     		cmp	r3, #0	@ D.6056,
 2968 003e 06D1     		bne	.L193	@,
2412:Source/tasks.c **** 		{
2413:Source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2414:Source/tasks.c **** 			vPortFree( pxNewTCB );
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 96


 2969              		.loc 1 2414 0
 2970 0040 F868     		ldr	r0, [r7, #12]	@, pxNewTCB
 2971 0042 FFF7FEFF 		bl	vPortFree	@
2415:Source/tasks.c **** 			pxNewTCB = NULL;
 2972              		.loc 1 2415 0
 2973 0046 4FF00003 		mov	r3, #0	@ tmp149,
 2974 004a FB60     		str	r3, [r7, #12]	@ tmp149, pxNewTCB
 2975 004c 0AE0     		b	.L190	@
 2976              	.L193:
2416:Source/tasks.c **** 		}
2417:Source/tasks.c **** 		else
2418:Source/tasks.c **** 		{
2419:Source/tasks.c **** 			/* Just to help debugging. */
2420:Source/tasks.c **** 			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTA
 2977              		.loc 1 2420 0
 2978 004e FB68     		ldr	r3, [r7, #12]	@ tmp150, pxNewTCB
 2979 0050 1A6B     		ldr	r2, [r3, #48]	@ D.6060, pxNewTCB_3->pxStack
 2980 0052 FB88     		ldrh	r3, [r7, #6]	@ D.6061, usStackDepth
 2981 0054 4FEA8303 		lsl	r3, r3, #2	@ D.6062, D.6061,
 2982 0058 1046     		mov	r0, r2	@, D.6060
 2983 005a 4FF0A501 		mov	r1, #165	@,
 2984 005e 1A46     		mov	r2, r3	@, D.6062
 2985 0060 FFF7FEFF 		bl	memset	@
 2986              	.L190:
2421:Source/tasks.c **** 		}
2422:Source/tasks.c **** 	}
2423:Source/tasks.c **** 
2424:Source/tasks.c **** 	return pxNewTCB;
 2987              		.loc 1 2424 0
 2988 0064 FB68     		ldr	r3, [r7, #12]	@ D.6063, pxNewTCB
2425:Source/tasks.c **** }
 2989              		.loc 1 2425 0
 2990 0066 1846     		mov	r0, r3	@, <retval>
 2991 0068 07F11007 		add	r7, r7, #16	@,,
 2992 006c BD46     		mov	sp, r7
 2993 006e 80BD     		pop	{r7, pc}
 2994              		.cfi_endproc
 2995              	.LFE29:
 2996              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 2997              		.section	.text.usTaskCheckFreeStackSpace,"ax",%progbits
 2998              		.align	2
 2999              		.thumb
 3000              		.thumb_func
 3001              		.type	usTaskCheckFreeStackSpace, %function
 3002              	usTaskCheckFreeStackSpace:
 3003              	.LFB30:
2426:Source/tasks.c **** /*-----------------------------------------------------------*/
2427:Source/tasks.c **** 
2428:Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2429:Source/tasks.c **** 
2430:Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2431:Source/tasks.c **** 	{
2432:Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2433:Source/tasks.c **** 	unsigned short usStackRemaining;
2434:Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];
2435:Source/tasks.c **** 
2436:Source/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 97


2437:Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2438:Source/tasks.c **** 		do
2439:Source/tasks.c **** 		{
2440:Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2441:Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2442:Source/tasks.c **** 			{
2443:Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2444:Source/tasks.c **** 			}
2445:Source/tasks.c **** 			#else
2446:Source/tasks.c **** 			{
2447:Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
2448:Source/tasks.c **** 			}
2449:Source/tasks.c **** 			#endif
2450:Source/tasks.c **** 
2451:Source/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
2452:Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
2453:Source/tasks.c **** 
2454:Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2455:Source/tasks.c **** 	}
2456:Source/tasks.c **** 
2457:Source/tasks.c **** #endif
2458:Source/tasks.c **** /*-----------------------------------------------------------*/
2459:Source/tasks.c **** 
2460:Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2461:Source/tasks.c **** 
2462:Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2463:Source/tasks.c **** 	{
2464:Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2465:Source/tasks.c **** 	unsigned long ulStatsAsPercentage;
2466:Source/tasks.c **** 
2467:Source/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2468:Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2469:Source/tasks.c **** 		do
2470:Source/tasks.c **** 		{
2471:Source/tasks.c **** 			/* Get next TCB in from the list. */
2472:Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2473:Source/tasks.c **** 
2474:Source/tasks.c **** 			/* Divide by zero check. */
2475:Source/tasks.c **** 			if( ulTotalRunTime > 0UL )
2476:Source/tasks.c **** 			{
2477:Source/tasks.c **** 				/* Has the task run at all? */
2478:Source/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0UL )
2479:Source/tasks.c **** 				{
2480:Source/tasks.c **** 					/* The task has used no CPU time at all. */
2481:Source/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
2482:Source/tasks.c **** 				}
2483:Source/tasks.c **** 				else
2484:Source/tasks.c **** 				{
2485:Source/tasks.c **** 					/* What percentage of the total run time has the task used?
2486:Source/tasks.c **** 					This will always be rounded down to the nearest integer.
2487:Source/tasks.c **** 					ulTotalRunTime has already been divided by 100. */
2488:Source/tasks.c **** 					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
2489:Source/tasks.c **** 
2490:Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
2491:Source/tasks.c **** 					{
2492:Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2493:Source/tasks.c **** 						{
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 98


2494:Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTC
2495:Source/tasks.c **** 						}
2496:Source/tasks.c **** 						#else
2497:Source/tasks.c **** 						{
2498:Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2499:Source/tasks.c **** 							printf() library can be used. */
2500:Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsigned
2501:Source/tasks.c **** 						}
2502:Source/tasks.c **** 						#endif
2503:Source/tasks.c **** 					}
2504:Source/tasks.c **** 					else
2505:Source/tasks.c **** 					{
2506:Source/tasks.c **** 						/* If the percentage is zero here then the task has
2507:Source/tasks.c **** 						consumed less than 1% of the total run time. */
2508:Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2509:Source/tasks.c **** 						{
2510:Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB
2511:Source/tasks.c **** 						}
2512:Source/tasks.c **** 						#else
2513:Source/tasks.c **** 						{
2514:Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2515:Source/tasks.c **** 							printf() library can be used. */
2516:Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsigned
2517:Source/tasks.c **** 						}
2518:Source/tasks.c **** 						#endif
2519:Source/tasks.c **** 					}
2520:Source/tasks.c **** 				}
2521:Source/tasks.c **** 
2522:Source/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
2523:Source/tasks.c **** 			}
2524:Source/tasks.c **** 
2525:Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2526:Source/tasks.c **** 	}
2527:Source/tasks.c **** 
2528:Source/tasks.c **** #endif
2529:Source/tasks.c **** /*-----------------------------------------------------------*/
2530:Source/tasks.c **** 
2531:Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2532:Source/tasks.c **** 
2533:Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2534:Source/tasks.c **** 	{
 3004              		.loc 1 2534 0
 3005              		.cfi_startproc
 3006              		@ args = 0, pretend = 0, frame = 8
 3007              		@ frame_needed = 1, uses_anonymous_args = 0
 3008              		@ link register save eliminated.
 3009 0000 90B4     		push	{r4, r7}	@
 3010              	.LCFI86:
 3011              		.cfi_def_cfa_offset 8
 3012              		.cfi_offset 4, -8
 3013              		.cfi_offset 7, -4
 3014 0002 82B0     		sub	sp, sp, #8	@,,
 3015              	.LCFI87:
 3016              		.cfi_def_cfa_offset 16
 3017 0004 00AF     		add	r7, sp, #0	@,,
 3018              	.LCFI88:
 3019              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 99


 3020 0006 7860     		str	r0, [r7, #4]	@ pucStackByte, pucStackByte
2535:Source/tasks.c **** 	register unsigned short usCount = 0U;
 3021              		.loc 1 2535 0
 3022 0008 4FF00004 		mov	r4, #0	@ usCount,
2536:Source/tasks.c **** 
2537:Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3023              		.loc 1 2537 0
 3024 000c 06E0     		b	.L196	@
 3025              	.L197:
2538:Source/tasks.c **** 		{
2539:Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3026              		.loc 1 2539 0
 3027 000e 7B68     		ldr	r3, [r7, #4]	@ tmp139, pucStackByte
 3028 0010 03F10103 		add	r3, r3, #1	@ tmp138, tmp139,
 3029 0014 7B60     		str	r3, [r7, #4]	@ tmp138, pucStackByte
2540:Source/tasks.c **** 			usCount++;
 3030              		.loc 1 2540 0
 3031 0016 04F10103 		add	r3, r4, #1	@ tmp140, usCount,
 3032 001a 9CB2     		uxth	r4, r3	@ usCount, tmp140
 3033              	.L196:
2537:Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3034              		.loc 1 2537 0 discriminator 1
 3035 001c 7B68     		ldr	r3, [r7, #4]	@ tmp141, pucStackByte
 3036 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2	@ D.6045, *pucStackByte_1
 3037 0020 A52B     		cmp	r3, #165	@ D.6045,
 3038 0022 F4D0     		beq	.L197	@,
2541:Source/tasks.c **** 		}
2542:Source/tasks.c **** 
2543:Source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
 3039              		.loc 1 2543 0
 3040 0024 4FEA9403 		lsr	r3, r4, #2	@ tmp142, usCount,
 3041 0028 9CB2     		uxth	r4, r3	@ usCount, tmp142
2544:Source/tasks.c **** 
2545:Source/tasks.c **** 		return usCount;
 3042              		.loc 1 2545 0
 3043 002a 2346     		mov	r3, r4	@ D.6046, usCount
2546:Source/tasks.c **** 	}
 3044              		.loc 1 2546 0
 3045 002c 1846     		mov	r0, r3	@, <retval>
 3046 002e 07F10807 		add	r7, r7, #8	@,,
 3047 0032 BD46     		mov	sp, r7
 3048 0034 90BC     		pop	{r4, r7}
 3049 0036 7047     		bx	lr
 3050              		.cfi_endproc
 3051              	.LFE30:
 3052              		.size	usTaskCheckFreeStackSpace, .-usTaskCheckFreeStackSpace
 3053              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3054              		.align	2
 3055              		.global	uxTaskGetStackHighWaterMark
 3056              		.thumb
 3057              		.thumb_func
 3058              		.type	uxTaskGetStackHighWaterMark, %function
 3059              	uxTaskGetStackHighWaterMark:
 3060              	.LFB31:
2547:Source/tasks.c **** 
2548:Source/tasks.c **** #endif
2549:Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 100


2550:Source/tasks.c **** 
2551:Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2552:Source/tasks.c **** 
2553:Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2554:Source/tasks.c **** 	{
 3061              		.loc 1 2554 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 24
 3064              		@ frame_needed = 1, uses_anonymous_args = 0
 3065 0000 80B5     		push	{r7, lr}	@
 3066              	.LCFI89:
 3067              		.cfi_def_cfa_offset 8
 3068              		.cfi_offset 7, -8
 3069              		.cfi_offset 14, -4
 3070 0002 86B0     		sub	sp, sp, #24	@,,
 3071              	.LCFI90:
 3072              		.cfi_def_cfa_offset 32
 3073 0004 00AF     		add	r7, sp, #0	@,,
 3074              	.LCFI91:
 3075              		.cfi_def_cfa_register 7
 3076 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
2555:Source/tasks.c **** 	tskTCB *pxTCB;
2556:Source/tasks.c **** 	unsigned char *pcEndOfStack;
2557:Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2558:Source/tasks.c **** 
2559:Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3077              		.loc 1 2559 0
 3078 0008 7B68     		ldr	r3, [r7, #4]	@ tmp138, xTask
 3079 000a 002B     		cmp	r3, #0	@ tmp138,
 3080 000c 02D1     		bne	.L200	@,
 3081              		.loc 1 2559 0 is_stmt 0 discriminator 1
 3082 000e 094B     		ldr	r3, .L203	@ tmp139,
 3083 0010 1B68     		ldr	r3, [r3, #0]	@ iftmp.8, pxCurrentTCB
 3084 0012 00E0     		b	.L201	@
 3085              	.L200:
 3086              		.loc 1 2559 0 discriminator 2
 3087 0014 7B68     		ldr	r3, [r7, #4]	@ iftmp.8, xTask
 3088              	.L201:
 3089              		.loc 1 2559 0 discriminator 3
 3090 0016 7B61     		str	r3, [r7, #20]	@ iftmp.8, pxTCB
2560:Source/tasks.c **** 
2561:Source/tasks.c **** 		#if portSTACK_GROWTH < 0
2562:Source/tasks.c **** 		{
2563:Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 3091              		.loc 1 2563 0 is_stmt 1 discriminator 3
 3092 0018 7B69     		ldr	r3, [r7, #20]	@ tmp140, pxTCB
 3093 001a 1B6B     		ldr	r3, [r3, #48]	@ tmp141, pxTCB_5->pxStack
 3094 001c 3B61     		str	r3, [r7, #16]	@ tmp141, pcEndOfStack
2564:Source/tasks.c **** 		}
2565:Source/tasks.c **** 		#else
2566:Source/tasks.c **** 		{
2567:Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2568:Source/tasks.c **** 		}
2569:Source/tasks.c **** 		#endif
2570:Source/tasks.c **** 
2571:Source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 3095              		.loc 1 2571 0 discriminator 3
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 101


 3096 001e 3869     		ldr	r0, [r7, #16]	@, pcEndOfStack
 3097 0020 FFF7FEFF 		bl	usTaskCheckFreeStackSpace	@
 3098 0024 0346     		mov	r3, r0	@ tmp142,
 3099 0026 FB60     		str	r3, [r7, #12]	@ D.6042, uxReturn
2572:Source/tasks.c **** 
2573:Source/tasks.c **** 		return uxReturn;
 3100              		.loc 1 2573 0 discriminator 3
 3101 0028 FB68     		ldr	r3, [r7, #12]	@ D.6043, uxReturn
2574:Source/tasks.c **** 	}
 3102              		.loc 1 2574 0 discriminator 3
 3103 002a 1846     		mov	r0, r3	@, <retval>
 3104 002c 07F11807 		add	r7, r7, #24	@,,
 3105 0030 BD46     		mov	sp, r7
 3106 0032 80BD     		pop	{r7, pc}
 3107              	.L204:
 3108              		.align	2
 3109              	.L203:
 3110 0034 00000000 		.word	pxCurrentTCB
 3111              		.cfi_endproc
 3112              	.LFE31:
 3113              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3114              		.section	.text.prvDeleteTCB,"ax",%progbits
 3115              		.align	2
 3116              		.thumb
 3117              		.thumb_func
 3118              		.type	prvDeleteTCB, %function
 3119              	prvDeleteTCB:
 3120              	.LFB32:
2575:Source/tasks.c **** 
2576:Source/tasks.c **** #endif
2577:Source/tasks.c **** /*-----------------------------------------------------------*/
2578:Source/tasks.c **** 
2579:Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2580:Source/tasks.c **** 
2581:Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2582:Source/tasks.c **** 	{
 3121              		.loc 1 2582 0
 3122              		.cfi_startproc
 3123              		@ args = 0, pretend = 0, frame = 8
 3124              		@ frame_needed = 1, uses_anonymous_args = 0
 3125 0000 80B5     		push	{r7, lr}	@
 3126              	.LCFI92:
 3127              		.cfi_def_cfa_offset 8
 3128              		.cfi_offset 7, -8
 3129              		.cfi_offset 14, -4
 3130 0002 82B0     		sub	sp, sp, #8	@,,
 3131              	.LCFI93:
 3132              		.cfi_def_cfa_offset 16
 3133 0004 00AF     		add	r7, sp, #0	@,,
 3134              	.LCFI94:
 3135              		.cfi_def_cfa_register 7
 3136 0006 7860     		str	r0, [r7, #4]	@ pxTCB, pxTCB
2583:Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
2584:Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
2585:Source/tasks.c **** 		want to allocate and clean RAM statically. */
2586:Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
2587:Source/tasks.c **** 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 102


2588:Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2589:Source/tasks.c **** 		the task to free any memory allocated at the application level. */
2590:Source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 3137              		.loc 1 2590 0
 3138 0008 7B68     		ldr	r3, [r7, #4]	@ tmp135, pxTCB
 3139 000a 1B6B     		ldr	r3, [r3, #48]	@ D.6037, pxTCB_1(D)->pxStack
 3140 000c 1846     		mov	r0, r3	@, D.6037
 3141 000e FFF7FEFF 		bl	vPortFree	@
2591:Source/tasks.c **** 		vPortFree( pxTCB );
 3142              		.loc 1 2591 0
 3143 0012 7868     		ldr	r0, [r7, #4]	@, pxTCB
 3144 0014 FFF7FEFF 		bl	vPortFree	@
2592:Source/tasks.c **** 	}
 3145              		.loc 1 2592 0
 3146 0018 07F10807 		add	r7, r7, #8	@,,
 3147 001c BD46     		mov	sp, r7
 3148 001e 80BD     		pop	{r7, pc}
 3149              		.cfi_endproc
 3150              	.LFE32:
 3151              		.size	prvDeleteTCB, .-prvDeleteTCB
 3152              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3153              		.align	2
 3154              		.global	xTaskGetCurrentTaskHandle
 3155              		.thumb
 3156              		.thumb_func
 3157              		.type	xTaskGetCurrentTaskHandle, %function
 3158              	xTaskGetCurrentTaskHandle:
 3159              	.LFB33:
2593:Source/tasks.c **** 
2594:Source/tasks.c **** #endif
2595:Source/tasks.c **** 
2596:Source/tasks.c **** 
2597:Source/tasks.c **** /*-----------------------------------------------------------*/
2598:Source/tasks.c **** 
2599:Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2600:Source/tasks.c **** 
2601:Source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2602:Source/tasks.c **** 	{
 3160              		.loc 1 2602 0
 3161              		.cfi_startproc
 3162              		@ args = 0, pretend = 0, frame = 8
 3163              		@ frame_needed = 1, uses_anonymous_args = 0
 3164              		@ link register save eliminated.
 3165 0000 80B4     		push	{r7}	@
 3166              	.LCFI95:
 3167              		.cfi_def_cfa_offset 4
 3168              		.cfi_offset 7, -4
 3169 0002 83B0     		sub	sp, sp, #12	@,,
 3170              	.LCFI96:
 3171              		.cfi_def_cfa_offset 16
 3172 0004 00AF     		add	r7, sp, #0	@,,
 3173              	.LCFI97:
 3174              		.cfi_def_cfa_register 7
2603:Source/tasks.c **** 	xTaskHandle xReturn;
2604:Source/tasks.c **** 
2605:Source/tasks.c **** 		/* A critical section is not required as this is not called from
2606:Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 103


2607:Source/tasks.c **** 		individual execution thread. */
2608:Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3175              		.loc 1 2608 0
 3176 0006 054B     		ldr	r3, .L208	@ tmp136,
 3177 0008 1B68     		ldr	r3, [r3, #0]	@ tmp137, pxCurrentTCB
 3178 000a 7B60     		str	r3, [r7, #4]	@ tmp137, xReturn
2609:Source/tasks.c **** 
2610:Source/tasks.c **** 		return xReturn;
 3179              		.loc 1 2610 0
 3180 000c 7B68     		ldr	r3, [r7, #4]	@ D.6035, xReturn
2611:Source/tasks.c **** 	}
 3181              		.loc 1 2611 0
 3182 000e 1846     		mov	r0, r3	@, <retval>
 3183 0010 07F10C07 		add	r7, r7, #12	@,,
 3184 0014 BD46     		mov	sp, r7
 3185 0016 80BC     		pop	{r7}
 3186 0018 7047     		bx	lr
 3187              	.L209:
 3188 001a 00BF     		.align	2
 3189              	.L208:
 3190 001c 00000000 		.word	pxCurrentTCB
 3191              		.cfi_endproc
 3192              	.LFE33:
 3193              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3194              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3195              		.align	2
 3196              		.global	vTaskPriorityInherit
 3197              		.thumb
 3198              		.thumb_func
 3199              		.type	vTaskPriorityInherit, %function
 3200              	vTaskPriorityInherit:
 3201              	.LFB34:
2612:Source/tasks.c **** 
2613:Source/tasks.c **** #endif
2614:Source/tasks.c **** 
2615:Source/tasks.c **** /*-----------------------------------------------------------*/
2616:Source/tasks.c **** 
2617:Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2618:Source/tasks.c **** 
2619:Source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2620:Source/tasks.c **** 	{
2621:Source/tasks.c **** 	portBASE_TYPE xReturn;
2622:Source/tasks.c **** 
2623:Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
2624:Source/tasks.c **** 		{
2625:Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2626:Source/tasks.c **** 		}
2627:Source/tasks.c **** 		else
2628:Source/tasks.c **** 		{
2629:Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
2630:Source/tasks.c **** 			{
2631:Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
2632:Source/tasks.c **** 			}
2633:Source/tasks.c **** 			else
2634:Source/tasks.c **** 			{
2635:Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2636:Source/tasks.c **** 			}
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 104


2637:Source/tasks.c **** 		}
2638:Source/tasks.c **** 
2639:Source/tasks.c **** 		return xReturn;
2640:Source/tasks.c **** 	}
2641:Source/tasks.c **** 
2642:Source/tasks.c **** #endif
2643:Source/tasks.c **** /*-----------------------------------------------------------*/
2644:Source/tasks.c **** 
2645:Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2646:Source/tasks.c **** 
2647:Source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2648:Source/tasks.c **** 	{
 3202              		.loc 1 2648 0
 3203              		.cfi_startproc
 3204              		@ args = 0, pretend = 0, frame = 16
 3205              		@ frame_needed = 1, uses_anonymous_args = 0
 3206 0000 80B5     		push	{r7, lr}	@
 3207              	.LCFI98:
 3208              		.cfi_def_cfa_offset 8
 3209              		.cfi_offset 7, -8
 3210              		.cfi_offset 14, -4
 3211 0002 84B0     		sub	sp, sp, #16	@,,
 3212              	.LCFI99:
 3213              		.cfi_def_cfa_offset 24
 3214 0004 00AF     		add	r7, sp, #0	@,,
 3215              	.LCFI100:
 3216              		.cfi_def_cfa_register 7
 3217 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
2649:Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3218              		.loc 1 2649 0
 3219 0008 7B68     		ldr	r3, [r7, #4]	@ tmp155, pxMutexHolder
 3220 000a FB60     		str	r3, [r7, #12]	@ tmp155, pxTCB
2650:Source/tasks.c **** 
2651:Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
2652:Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
2653:Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3221              		.loc 1 2653 0
 3222 000c 7B68     		ldr	r3, [r7, #4]	@ tmp156, pxMutexHolder
 3223 000e 002B     		cmp	r3, #0	@ tmp156,
 3224 0010 47D0     		beq	.L210	@,
2654:Source/tasks.c **** 		{
2655:Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 3225              		.loc 1 2655 0
 3226 0012 FB68     		ldr	r3, [r7, #12]	@ tmp157, pxTCB
 3227 0014 DA6A     		ldr	r2, [r3, #44]	@ D.6005, pxTCB_2->uxPriority
 3228 0016 254B     		ldr	r3, .L214	@ tmp158,
 3229 0018 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.2, pxCurrentTCB
 3230 001a DB6A     		ldr	r3, [r3, #44]	@ D.6007, pxCurrentTCB.2_4->uxPriority
 3231 001c 9A42     		cmp	r2, r3	@ D.6005, D.6007
 3232 001e 40D2     		bcs	.L210	@,
2656:Source/tasks.c **** 			{
2657:Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new priority. */
2658:Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 3233              		.loc 1 2658 0
 3234 0020 224B     		ldr	r3, .L214	@ tmp159,
 3235 0022 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.3, pxCurrentTCB
 3236 0024 DB6A     		ldr	r3, [r3, #44]	@ D.6011, pxCurrentTCB.3_6->uxPriority
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 105


 3237 0026 C3F10502 		rsb	r2, r3, #5	@ D.6012, D.6011,
 3238 002a FB68     		ldr	r3, [r7, #12]	@ tmp160, pxTCB
 3239 002c 9A61     		str	r2, [r3, #24]	@ D.6012, pxTCB_2->xEventListItem.xItemValue
2659:Source/tasks.c **** 
2660:Source/tasks.c **** 				/* If the task being modified is in the ready state it will need to
2661:Source/tasks.c **** 				be moved into a new list. */
2662:Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 3240              		.loc 1 2662 0
 3241 002e FB68     		ldr	r3, [r7, #12]	@ tmp161, pxTCB
 3242 0030 5969     		ldr	r1, [r3, #20]	@ D.6013, pxTCB_2->xGenericListItem.pvContainer
 3243 0032 FB68     		ldr	r3, [r7, #12]	@ tmp162, pxTCB
 3244 0034 DA6A     		ldr	r2, [r3, #44]	@ D.6014, pxTCB_2->uxPriority
 3245 0036 1346     		mov	r3, r2	@ tmp163, D.6014
 3246 0038 4FEA8303 		lsl	r3, r3, #2	@ tmp163, tmp163,
 3247 003c 9B18     		adds	r3, r3, r2	@ tmp163, tmp163, D.6014
 3248 003e 4FEA8303 		lsl	r3, r3, #2	@ tmp164, tmp163,
 3249 0042 1B4A     		ldr	r2, .L214+4	@ tmp165,
 3250 0044 9B18     		adds	r3, r3, r2	@ D.6015, tmp163, tmp165
 3251 0046 9942     		cmp	r1, r3	@ D.6013, D.6015
 3252 0048 26D1     		bne	.L212	@,
2663:Source/tasks.c **** 				{
2664:Source/tasks.c **** 					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 3253              		.loc 1 2664 0
 3254 004a FB68     		ldr	r3, [r7, #12]	@ tmp166, pxTCB
 3255 004c 03F10403 		add	r3, r3, #4	@ D.6018, tmp166,
 3256 0050 1846     		mov	r0, r3	@, D.6018
 3257 0052 FFF7FEFF 		bl	uxListRemove	@
2665:Source/tasks.c **** 					{
2666:Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2667:Source/tasks.c **** 					}
2668:Source/tasks.c **** 
2669:Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
2670:Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3258              		.loc 1 2670 0
 3259 0056 154B     		ldr	r3, .L214	@ tmp167,
 3260 0058 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.4, pxCurrentTCB
 3261 005a DA6A     		ldr	r2, [r3, #44]	@ D.6023, pxCurrentTCB.4_14->uxPriority
 3262 005c FB68     		ldr	r3, [r7, #12]	@ tmp168, pxTCB
 3263 005e DA62     		str	r2, [r3, #44]	@ D.6023, pxTCB_2->uxPriority
2671:Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 3264              		.loc 1 2671 0
 3265 0060 FB68     		ldr	r3, [r7, #12]	@ tmp169, pxTCB
 3266 0062 DA6A     		ldr	r2, [r3, #44]	@ D.6024, pxTCB_2->uxPriority
 3267 0064 134B     		ldr	r3, .L214+8	@ tmp170,
 3268 0066 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.5, uxTopReadyPriority
 3269 0068 9A42     		cmp	r2, r3	@ D.6024, uxTopReadyPriority.5
 3270 006a 03D9     		bls	.L213	@,
 3271              		.loc 1 2671 0 is_stmt 0 discriminator 1
 3272 006c FB68     		ldr	r3, [r7, #12]	@ tmp171, pxTCB
 3273 006e DA6A     		ldr	r2, [r3, #44]	@ uxTopReadyPriority.6, pxTCB_2->uxPriority
 3274 0070 104B     		ldr	r3, .L214+8	@ tmp172,
 3275 0072 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.6, uxTopReadyPriority
 3276              	.L213:
 3277              		.loc 1 2671 0 discriminator 2
 3278 0074 FB68     		ldr	r3, [r7, #12]	@ tmp173, pxTCB
 3279 0076 DA6A     		ldr	r2, [r3, #44]	@ D.6029, pxTCB_2->uxPriority
 3280 0078 1346     		mov	r3, r2	@ tmp174, D.6029
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 106


 3281 007a 4FEA8303 		lsl	r3, r3, #2	@ tmp174, tmp174,
 3282 007e 9B18     		adds	r3, r3, r2	@ tmp174, tmp174, D.6029
 3283 0080 4FEA8303 		lsl	r3, r3, #2	@ tmp175, tmp174,
 3284 0084 0A4A     		ldr	r2, .L214+4	@ tmp176,
 3285 0086 9A18     		adds	r2, r3, r2	@ D.6030, tmp174, tmp176
 3286 0088 FB68     		ldr	r3, [r7, #12]	@ tmp177, pxTCB
 3287 008a 03F10403 		add	r3, r3, #4	@ D.6031, tmp177,
 3288 008e 1046     		mov	r0, r2	@, D.6030
 3289 0090 1946     		mov	r1, r3	@, D.6031
 3290 0092 FFF7FEFF 		bl	vListInsertEnd	@
 3291 0096 04E0     		b	.L210	@
 3292              	.L212:
2672:Source/tasks.c **** 				}
2673:Source/tasks.c **** 				else
2674:Source/tasks.c **** 				{
2675:Source/tasks.c **** 					/* Just inherit the priority. */
2676:Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3293              		.loc 1 2676 0 is_stmt 1
 3294 0098 044B     		ldr	r3, .L214	@ tmp178,
 3295 009a 1B68     		ldr	r3, [r3, #0]	@ pxCurrentTCB.7, pxCurrentTCB
 3296 009c DA6A     		ldr	r2, [r3, #44]	@ D.6034, pxCurrentTCB.7_22->uxPriority
 3297 009e FB68     		ldr	r3, [r7, #12]	@ tmp179, pxTCB
 3298 00a0 DA62     		str	r2, [r3, #44]	@ D.6034, pxTCB_2->uxPriority
 3299              	.L210:
2677:Source/tasks.c **** 				}
2678:Source/tasks.c **** 
2679:Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
2680:Source/tasks.c **** 			}
2681:Source/tasks.c **** 		}
2682:Source/tasks.c **** 	}
 3300              		.loc 1 2682 0
 3301 00a2 07F11007 		add	r7, r7, #16	@,,
 3302 00a6 BD46     		mov	sp, r7
 3303 00a8 80BD     		pop	{r7, pc}
 3304              	.L215:
 3305 00aa 00BF     		.align	2
 3306              	.L214:
 3307 00ac 00000000 		.word	pxCurrentTCB
 3308 00b0 00000000 		.word	pxReadyTasksLists
 3309 00b4 00000000 		.word	uxTopReadyPriority
 3310              		.cfi_endproc
 3311              	.LFE34:
 3312              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 3313              		.section	.text.vTaskPriorityDisinherit,"ax",%progbits
 3314              		.align	2
 3315              		.global	vTaskPriorityDisinherit
 3316              		.thumb
 3317              		.thumb_func
 3318              		.type	vTaskPriorityDisinherit, %function
 3319              	vTaskPriorityDisinherit:
 3320              	.LFB35:
2683:Source/tasks.c **** 
2684:Source/tasks.c **** #endif
2685:Source/tasks.c **** /*-----------------------------------------------------------*/
2686:Source/tasks.c **** 
2687:Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2688:Source/tasks.c **** 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 107


2689:Source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2690:Source/tasks.c **** 	{
 3321              		.loc 1 2690 0
 3322              		.cfi_startproc
 3323              		@ args = 0, pretend = 0, frame = 16
 3324              		@ frame_needed = 1, uses_anonymous_args = 0
 3325 0000 80B5     		push	{r7, lr}	@
 3326              	.LCFI101:
 3327              		.cfi_def_cfa_offset 8
 3328              		.cfi_offset 7, -8
 3329              		.cfi_offset 14, -4
 3330 0002 84B0     		sub	sp, sp, #16	@,,
 3331              	.LCFI102:
 3332              		.cfi_def_cfa_offset 24
 3333 0004 00AF     		add	r7, sp, #0	@,,
 3334              	.LCFI103:
 3335              		.cfi_def_cfa_register 7
 3336 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
2691:Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3337              		.loc 1 2691 0
 3338 0008 7B68     		ldr	r3, [r7, #4]	@ tmp147, pxMutexHolder
 3339 000a FB60     		str	r3, [r7, #12]	@ tmp147, pxTCB
2692:Source/tasks.c **** 
2693:Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3340              		.loc 1 2693 0
 3341 000c 7B68     		ldr	r3, [r7, #4]	@ tmp148, pxMutexHolder
 3342 000e 002B     		cmp	r3, #0	@ tmp148,
 3343 0010 30D0     		beq	.L216	@,
2694:Source/tasks.c **** 		{
2695:Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3344              		.loc 1 2695 0
 3345 0012 FB68     		ldr	r3, [r7, #12]	@ tmp149, pxTCB
 3346 0014 DA6A     		ldr	r2, [r3, #44]	@ D.5984, pxTCB_2->uxPriority
 3347 0016 FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 3348 0018 5B6C     		ldr	r3, [r3, #68]	@ D.5985, pxTCB_2->uxBasePriority
 3349 001a 9A42     		cmp	r2, r3	@ D.5984, D.5985
 3350 001c 2AD0     		beq	.L216	@,
2696:Source/tasks.c **** 			{
2697:Source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2698:Source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2699:Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 3351              		.loc 1 2699 0
 3352 001e FB68     		ldr	r3, [r7, #12]	@ tmp151, pxTCB
 3353 0020 03F10403 		add	r3, r3, #4	@ D.5988, tmp151,
 3354 0024 1846     		mov	r0, r3	@, D.5988
 3355 0026 FFF7FEFF 		bl	uxListRemove	@
2700:Source/tasks.c **** 				{
2701:Source/tasks.c **** 					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2702:Source/tasks.c **** 				}
2703:Source/tasks.c **** 
2704:Source/tasks.c **** 				/* Disinherit the priority before adding the task into the new
2705:Source/tasks.c **** 				ready list. */
2706:Source/tasks.c **** 				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
2707:Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 3356              		.loc 1 2707 0
 3357 002a FB68     		ldr	r3, [r7, #12]	@ tmp152, pxTCB
 3358 002c 5A6C     		ldr	r2, [r3, #68]	@ D.5992, pxTCB_2->uxBasePriority
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 108


 3359 002e FB68     		ldr	r3, [r7, #12]	@ tmp153, pxTCB
 3360 0030 DA62     		str	r2, [r3, #44]	@ D.5992, pxTCB_2->uxPriority
2708:Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 3361              		.loc 1 2708 0
 3362 0032 FB68     		ldr	r3, [r7, #12]	@ tmp154, pxTCB
 3363 0034 DB6A     		ldr	r3, [r3, #44]	@ D.5993, pxTCB_2->uxPriority
 3364 0036 C3F10502 		rsb	r2, r3, #5	@ D.5994, D.5993,
 3365 003a FB68     		ldr	r3, [r7, #12]	@ tmp155, pxTCB
 3366 003c 9A61     		str	r2, [r3, #24]	@ D.5994, pxTCB_2->xEventListItem.xItemValue
2709:Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3367              		.loc 1 2709 0
 3368 003e FB68     		ldr	r3, [r7, #12]	@ tmp156, pxTCB
 3369 0040 DA6A     		ldr	r2, [r3, #44]	@ D.5995, pxTCB_2->uxPriority
 3370 0042 0E4B     		ldr	r3, .L219	@ tmp157,
 3371 0044 1B68     		ldr	r3, [r3, #0]	@ uxTopReadyPriority.0, uxTopReadyPriority
 3372 0046 9A42     		cmp	r2, r3	@ D.5995, uxTopReadyPriority.0
 3373 0048 03D9     		bls	.L218	@,
 3374              		.loc 1 2709 0 is_stmt 0 discriminator 1
 3375 004a FB68     		ldr	r3, [r7, #12]	@ tmp158, pxTCB
 3376 004c DA6A     		ldr	r2, [r3, #44]	@ uxTopReadyPriority.1, pxTCB_2->uxPriority
 3377 004e 0B4B     		ldr	r3, .L219	@ tmp159,
 3378 0050 1A60     		str	r2, [r3, #0]	@ uxTopReadyPriority.1, uxTopReadyPriority
 3379              	.L218:
 3380              		.loc 1 2709 0 discriminator 2
 3381 0052 FB68     		ldr	r3, [r7, #12]	@ tmp160, pxTCB
 3382 0054 DA6A     		ldr	r2, [r3, #44]	@ D.6000, pxTCB_2->uxPriority
 3383 0056 1346     		mov	r3, r2	@ tmp161, D.6000
 3384 0058 4FEA8303 		lsl	r3, r3, #2	@ tmp161, tmp161,
 3385 005c 9B18     		adds	r3, r3, r2	@ tmp161, tmp161, D.6000
 3386 005e 4FEA8303 		lsl	r3, r3, #2	@ tmp162, tmp161,
 3387 0062 074A     		ldr	r2, .L219+4	@ tmp163,
 3388 0064 9A18     		adds	r2, r3, r2	@ D.6001, tmp161, tmp163
 3389 0066 FB68     		ldr	r3, [r7, #12]	@ tmp164, pxTCB
 3390 0068 03F10403 		add	r3, r3, #4	@ D.6002, tmp164,
 3391 006c 1046     		mov	r0, r2	@, D.6001
 3392 006e 1946     		mov	r1, r3	@, D.6002
 3393 0070 FFF7FEFF 		bl	vListInsertEnd	@
 3394              	.L216:
2710:Source/tasks.c **** 			}
2711:Source/tasks.c **** 		}
2712:Source/tasks.c **** 	}
 3395              		.loc 1 2712 0 is_stmt 1
 3396 0074 07F11007 		add	r7, r7, #16	@,,
 3397 0078 BD46     		mov	sp, r7
 3398 007a 80BD     		pop	{r7, pc}
 3399              	.L220:
 3400              		.align	2
 3401              	.L219:
 3402 007c 00000000 		.word	uxTopReadyPriority
 3403 0080 00000000 		.word	pxReadyTasksLists
 3404              		.cfi_endproc
 3405              	.LFE35:
 3406              		.size	vTaskPriorityDisinherit, .-vTaskPriorityDisinherit
 3407              		.section	.rodata.ucExpectedStackBytes.5891,"a",%progbits
 3408              		.align	2
 3409              		.type	ucExpectedStackBytes.5891, %object
 3410              		.size	ucExpectedStackBytes.5891, 20
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 109


 3411              	ucExpectedStackBytes.5891:
 3412 0000 A5       		.byte	-91
 3413 0001 A5       		.byte	-91
 3414 0002 A5       		.byte	-91
 3415 0003 A5       		.byte	-91
 3416 0004 A5       		.byte	-91
 3417 0005 A5       		.byte	-91
 3418 0006 A5       		.byte	-91
 3419 0007 A5       		.byte	-91
 3420 0008 A5       		.byte	-91
 3421 0009 A5       		.byte	-91
 3422 000a A5       		.byte	-91
 3423 000b A5       		.byte	-91
 3424 000c A5       		.byte	-91
 3425 000d A5       		.byte	-91
 3426 000e A5       		.byte	-91
 3427 000f A5       		.byte	-91
 3428 0010 A5       		.byte	-91
 3429 0011 A5       		.byte	-91
 3430 0012 A5       		.byte	-91
 3431 0013 A5       		.byte	-91
 3432              		.text
 3433              	.Letext0:
 3434              		.file 2 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.7
 3435              		.file 3 "./Source/include/projdefs.h"
 3436              		.file 4 "./Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
 3437              		.file 5 "./Source/include/list.h"
 3438              		.file 6 "./Source/include/task.h"
 3439              		.section	.debug_info,"",%progbits
 3440              	.Ldebug_info0:
 3441 0000 800E0000 		.4byte	0xe80
 3442 0004 0200     		.2byte	0x2
 3443 0006 00000000 		.4byte	.Ldebug_abbrev0
 3444 000a 04       		.byte	0x4
 3445 000b 01       		.uleb128 0x1
 3446 000c 4A0D0000 		.4byte	.LASF143
 3447 0010 01       		.byte	0x1
 3448 0011 5D3B0000 		.4byte	.LASF144
 3449 0015 677F0000 		.4byte	.LASF145
 3450 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3451 001d 00000000 		.4byte	0
 3452 0021 00000000 		.4byte	0
 3453 0025 00000000 		.4byte	.Ldebug_line0
 3454 0029 00000000 		.4byte	.Ldebug_macro0
 3455 002d 02       		.uleb128 0x2
 3456 002e E5000000 		.4byte	.LASF11
 3457 0032 02       		.byte	0x2
 3458 0033 D5       		.byte	0xd5
 3459 0034 38000000 		.4byte	0x38
 3460 0038 03       		.uleb128 0x3
 3461 0039 04       		.byte	0x4
 3462 003a 07       		.byte	0x7
 3463 003b F6480000 		.4byte	.LASF0
 3464 003f 04       		.uleb128 0x4
 3465 0040 04       		.byte	0x4
 3466 0041 03       		.uleb128 0x3
 3467 0042 01       		.byte	0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 110


 3468 0043 06       		.byte	0x6
 3469 0044 BC190000 		.4byte	.LASF1
 3470 0048 03       		.uleb128 0x3
 3471 0049 01       		.byte	0x1
 3472 004a 08       		.byte	0x8
 3473 004b E1160000 		.4byte	.LASF2
 3474 004f 03       		.uleb128 0x3
 3475 0050 02       		.byte	0x2
 3476 0051 05       		.byte	0x5
 3477 0052 EC480000 		.4byte	.LASF3
 3478 0056 03       		.uleb128 0x3
 3479 0057 02       		.byte	0x2
 3480 0058 07       		.byte	0x7
 3481 0059 172F0000 		.4byte	.LASF4
 3482 005d 05       		.uleb128 0x5
 3483 005e 04       		.byte	0x4
 3484 005f 05       		.byte	0x5
 3485 0060 696E7400 		.ascii	"int\000"
 3486 0064 03       		.uleb128 0x3
 3487 0065 08       		.byte	0x8
 3488 0066 05       		.byte	0x5
 3489 0067 C83D0000 		.4byte	.LASF5
 3490 006b 03       		.uleb128 0x3
 3491 006c 08       		.byte	0x8
 3492 006d 07       		.byte	0x7
 3493 006e 2D570000 		.4byte	.LASF6
 3494 0072 03       		.uleb128 0x3
 3495 0073 04       		.byte	0x4
 3496 0074 05       		.byte	0x5
 3497 0075 C7130000 		.4byte	.LASF7
 3498 0079 03       		.uleb128 0x3
 3499 007a 04       		.byte	0x4
 3500 007b 07       		.byte	0x7
 3501 007c 17010000 		.4byte	.LASF8
 3502 0080 03       		.uleb128 0x3
 3503 0081 04       		.byte	0x4
 3504 0082 07       		.byte	0x7
 3505 0083 87330000 		.4byte	.LASF9
 3506 0087 06       		.uleb128 0x6
 3507 0088 04       		.byte	0x4
 3508 0089 48000000 		.4byte	0x48
 3509 008d 03       		.uleb128 0x3
 3510 008e 01       		.byte	0x1
 3511 008f 08       		.byte	0x8
 3512 0090 D5510000 		.4byte	.LASF10
 3513 0094 02       		.uleb128 0x2
 3514 0095 8B470000 		.4byte	.LASF12
 3515 0099 03       		.byte	0x3
 3516 009a 49       		.byte	0x49
 3517 009b 9F000000 		.4byte	0x9f
 3518 009f 06       		.uleb128 0x6
 3519 00a0 04       		.byte	0x4
 3520 00a1 A5000000 		.4byte	0xa5
 3521 00a5 07       		.uleb128 0x7
 3522 00a6 01       		.byte	0x1
 3523 00a7 B1000000 		.4byte	0xb1
 3524 00ab 08       		.uleb128 0x8
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 111


 3525 00ac 3F000000 		.4byte	0x3f
 3526 00b0 00       		.byte	0
 3527 00b1 02       		.uleb128 0x2
 3528 00b2 51470000 		.4byte	.LASF13
 3529 00b6 04       		.byte	0x4
 3530 00b7 64       		.byte	0x64
 3531 00b8 80000000 		.4byte	0x80
 3532 00bc 09       		.uleb128 0x9
 3533 00bd B7440000 		.4byte	.LASF20
 3534 00c1 14       		.byte	0x14
 3535 00c2 05       		.byte	0x5
 3536 00c3 6B       		.byte	0x6b
 3537 00c4 0F010000 		.4byte	0x10f
 3538 00c8 0A       		.uleb128 0xa
 3539 00c9 2F7F0000 		.4byte	.LASF14
 3540 00cd 05       		.byte	0x5
 3541 00ce 6D       		.byte	0x6d
 3542 00cf B1000000 		.4byte	0xb1
 3543 00d3 02       		.byte	0x2
 3544 00d4 23       		.byte	0x23
 3545 00d5 00       		.uleb128 0
 3546 00d6 0A       		.uleb128 0xa
 3547 00d7 FA0E0000 		.4byte	.LASF15
 3548 00db 05       		.byte	0x5
 3549 00dc 6E       		.byte	0x6e
 3550 00dd 0F010000 		.4byte	0x10f
 3551 00e1 02       		.byte	0x2
 3552 00e2 23       		.byte	0x23
 3553 00e3 04       		.uleb128 0x4
 3554 00e4 0A       		.uleb128 0xa
 3555 00e5 055B0000 		.4byte	.LASF16
 3556 00e9 05       		.byte	0x5
 3557 00ea 6F       		.byte	0x6f
 3558 00eb 0F010000 		.4byte	0x10f
 3559 00ef 02       		.byte	0x2
 3560 00f0 23       		.byte	0x23
 3561 00f1 08       		.uleb128 0x8
 3562 00f2 0A       		.uleb128 0xa
 3563 00f3 4E480000 		.4byte	.LASF17
 3564 00f7 05       		.byte	0x5
 3565 00f8 70       		.byte	0x70
 3566 00f9 3F000000 		.4byte	0x3f
 3567 00fd 02       		.byte	0x2
 3568 00fe 23       		.byte	0x23
 3569 00ff 0C       		.uleb128 0xc
 3570 0100 0A       		.uleb128 0xa
 3571 0101 243D0000 		.4byte	.LASF18
 3572 0105 05       		.byte	0x5
 3573 0106 71       		.byte	0x71
 3574 0107 3F000000 		.4byte	0x3f
 3575 010b 02       		.byte	0x2
 3576 010c 23       		.byte	0x23
 3577 010d 10       		.uleb128 0x10
 3578 010e 00       		.byte	0
 3579 010f 06       		.uleb128 0x6
 3580 0110 04       		.byte	0x4
 3581 0111 15010000 		.4byte	0x115
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 112


 3582 0115 0B       		.uleb128 0xb
 3583 0116 BC000000 		.4byte	0xbc
 3584 011a 02       		.uleb128 0x2
 3585 011b 265E0000 		.4byte	.LASF19
 3586 011f 05       		.byte	0x5
 3587 0120 73       		.byte	0x73
 3588 0121 BC000000 		.4byte	0xbc
 3589 0125 09       		.uleb128 0x9
 3590 0126 13240000 		.4byte	.LASF21
 3591 012a 0C       		.byte	0xc
 3592 012b 05       		.byte	0x5
 3593 012c 75       		.byte	0x75
 3594 012d 5C010000 		.4byte	0x15c
 3595 0131 0A       		.uleb128 0xa
 3596 0132 2F7F0000 		.4byte	.LASF14
 3597 0136 05       		.byte	0x5
 3598 0137 77       		.byte	0x77
 3599 0138 B1000000 		.4byte	0xb1
 3600 013c 02       		.byte	0x2
 3601 013d 23       		.byte	0x23
 3602 013e 00       		.uleb128 0
 3603 013f 0A       		.uleb128 0xa
 3604 0140 FA0E0000 		.4byte	.LASF15
 3605 0144 05       		.byte	0x5
 3606 0145 78       		.byte	0x78
 3607 0146 0F010000 		.4byte	0x10f
 3608 014a 02       		.byte	0x2
 3609 014b 23       		.byte	0x23
 3610 014c 04       		.uleb128 0x4
 3611 014d 0A       		.uleb128 0xa
 3612 014e 055B0000 		.4byte	.LASF16
 3613 0152 05       		.byte	0x5
 3614 0153 79       		.byte	0x79
 3615 0154 0F010000 		.4byte	0x10f
 3616 0158 02       		.byte	0x2
 3617 0159 23       		.byte	0x23
 3618 015a 08       		.uleb128 0x8
 3619 015b 00       		.byte	0
 3620 015c 02       		.uleb128 0x2
 3621 015d 290E0000 		.4byte	.LASF22
 3622 0161 05       		.byte	0x5
 3623 0162 7B       		.byte	0x7b
 3624 0163 25010000 		.4byte	0x125
 3625 0167 09       		.uleb128 0x9
 3626 0168 32670000 		.4byte	.LASF23
 3627 016c 14       		.byte	0x14
 3628 016d 05       		.byte	0x5
 3629 016e 80       		.byte	0x80
 3630 016f 9E010000 		.4byte	0x19e
 3631 0173 0A       		.uleb128 0xa
 3632 0174 03490000 		.4byte	.LASF24
 3633 0178 05       		.byte	0x5
 3634 0179 82       		.byte	0x82
 3635 017a 9E010000 		.4byte	0x19e
 3636 017e 02       		.byte	0x2
 3637 017f 23       		.byte	0x23
 3638 0180 00       		.uleb128 0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 113


 3639 0181 0A       		.uleb128 0xa
 3640 0182 7B220000 		.4byte	.LASF25
 3641 0186 05       		.byte	0x5
 3642 0187 83       		.byte	0x83
 3643 0188 A3010000 		.4byte	0x1a3
 3644 018c 02       		.byte	0x2
 3645 018d 23       		.byte	0x23
 3646 018e 04       		.uleb128 0x4
 3647 018f 0A       		.uleb128 0xa
 3648 0190 BC4F0000 		.4byte	.LASF26
 3649 0194 05       		.byte	0x5
 3650 0195 84       		.byte	0x84
 3651 0196 AE010000 		.4byte	0x1ae
 3652 019a 02       		.byte	0x2
 3653 019b 23       		.byte	0x23
 3654 019c 08       		.uleb128 0x8
 3655 019d 00       		.byte	0
 3656 019e 0B       		.uleb128 0xb
 3657 019f 80000000 		.4byte	0x80
 3658 01a3 06       		.uleb128 0x6
 3659 01a4 04       		.byte	0x4
 3660 01a5 A9010000 		.4byte	0x1a9
 3661 01a9 0B       		.uleb128 0xb
 3662 01aa 1A010000 		.4byte	0x11a
 3663 01ae 0B       		.uleb128 0xb
 3664 01af 5C010000 		.4byte	0x15c
 3665 01b3 02       		.uleb128 0x2
 3666 01b4 8E560000 		.4byte	.LASF27
 3667 01b8 05       		.byte	0x5
 3668 01b9 85       		.byte	0x85
 3669 01ba 67010000 		.4byte	0x167
 3670 01be 02       		.uleb128 0x2
 3671 01bf 54450000 		.4byte	.LASF28
 3672 01c3 06       		.byte	0x6
 3673 01c4 63       		.byte	0x63
 3674 01c5 3F000000 		.4byte	0x3f
 3675 01c9 09       		.uleb128 0x9
 3676 01ca 84060000 		.4byte	.LASF29
 3677 01ce 08       		.byte	0x8
 3678 01cf 06       		.byte	0x6
 3679 01d0 68       		.byte	0x68
 3680 01d1 F2010000 		.4byte	0x1f2
 3681 01d5 0A       		.uleb128 0xa
 3682 01d6 D8310000 		.4byte	.LASF30
 3683 01da 06       		.byte	0x6
 3684 01db 6A       		.byte	0x6a
 3685 01dc 72000000 		.4byte	0x72
 3686 01e0 02       		.byte	0x2
 3687 01e1 23       		.byte	0x23
 3688 01e2 00       		.uleb128 0
 3689 01e3 0A       		.uleb128 0xa
 3690 01e4 A3210000 		.4byte	.LASF31
 3691 01e8 06       		.byte	0x6
 3692 01e9 6B       		.byte	0x6b
 3693 01ea B1000000 		.4byte	0xb1
 3694 01ee 02       		.byte	0x2
 3695 01ef 23       		.byte	0x23
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 114


 3696 01f0 04       		.uleb128 0x4
 3697 01f1 00       		.byte	0
 3698 01f2 02       		.uleb128 0x2
 3699 01f3 74710000 		.4byte	.LASF32
 3700 01f7 06       		.byte	0x6
 3701 01f8 6C       		.byte	0x6c
 3702 01f9 C9010000 		.4byte	0x1c9
 3703 01fd 09       		.uleb128 0x9
 3704 01fe 4D370000 		.4byte	.LASF33
 3705 0202 0C       		.byte	0xc
 3706 0203 06       		.byte	0x6
 3707 0204 71       		.byte	0x71
 3708 0205 34020000 		.4byte	0x234
 3709 0209 0A       		.uleb128 0xa
 3710 020a 703C0000 		.4byte	.LASF34
 3711 020e 06       		.byte	0x6
 3712 020f 73       		.byte	0x73
 3713 0210 3F000000 		.4byte	0x3f
 3714 0214 02       		.byte	0x2
 3715 0215 23       		.byte	0x23
 3716 0216 00       		.uleb128 0
 3717 0217 0A       		.uleb128 0xa
 3718 0218 44450000 		.4byte	.LASF35
 3719 021c 06       		.byte	0x6
 3720 021d 74       		.byte	0x74
 3721 021e 80000000 		.4byte	0x80
 3722 0222 02       		.byte	0x2
 3723 0223 23       		.byte	0x23
 3724 0224 04       		.uleb128 0x4
 3725 0225 0A       		.uleb128 0xa
 3726 0226 4C7B0000 		.4byte	.LASF36
 3727 022a 06       		.byte	0x6
 3728 022b 75       		.byte	0x75
 3729 022c 80000000 		.4byte	0x80
 3730 0230 02       		.byte	0x2
 3731 0231 23       		.byte	0x23
 3732 0232 08       		.uleb128 0x8
 3733 0233 00       		.byte	0
 3734 0234 02       		.uleb128 0x2
 3735 0235 00000000 		.4byte	.LASF37
 3736 0239 06       		.byte	0x6
 3737 023a 76       		.byte	0x76
 3738 023b FD010000 		.4byte	0x1fd
 3739 023f 0C       		.uleb128 0xc
 3740 0240 44020000 		.4byte	0x244
 3741 0244 06       		.uleb128 0x6
 3742 0245 04       		.byte	0x4
 3743 0246 4A020000 		.4byte	0x24a
 3744 024a 0C       		.uleb128 0xc
 3745 024b 41000000 		.4byte	0x41
 3746 024f 06       		.uleb128 0x6
 3747 0250 04       		.byte	0x4
 3748 0251 80000000 		.4byte	0x80
 3749 0255 09       		.uleb128 0x9
 3750 0256 E3550000 		.4byte	.LASF38
 3751 025a 48       		.byte	0x48
 3752 025b 01       		.byte	0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 115


 3753 025c 61       		.byte	0x61
 3754 025d C4020000 		.4byte	0x2c4
 3755 0261 0A       		.uleb128 0xa
 3756 0262 83220000 		.4byte	.LASF39
 3757 0266 01       		.byte	0x1
 3758 0267 63       		.byte	0x63
 3759 0268 C4020000 		.4byte	0x2c4
 3760 026c 02       		.byte	0x2
 3761 026d 23       		.byte	0x23
 3762 026e 00       		.uleb128 0
 3763 026f 0A       		.uleb128 0xa
 3764 0270 22780000 		.4byte	.LASF40
 3765 0274 01       		.byte	0x1
 3766 0275 69       		.byte	0x69
 3767 0276 1A010000 		.4byte	0x11a
 3768 027a 02       		.byte	0x2
 3769 027b 23       		.byte	0x23
 3770 027c 04       		.uleb128 0x4
 3771 027d 0A       		.uleb128 0xa
 3772 027e A7040000 		.4byte	.LASF41
 3773 0282 01       		.byte	0x1
 3774 0283 6A       		.byte	0x6a
 3775 0284 1A010000 		.4byte	0x11a
 3776 0288 02       		.byte	0x2
 3777 0289 23       		.byte	0x23
 3778 028a 18       		.uleb128 0x18
 3779 028b 0A       		.uleb128 0xa
 3780 028c 9B7F0000 		.4byte	.LASF42
 3781 0290 01       		.byte	0x1
 3782 0291 6B       		.byte	0x6b
 3783 0292 80000000 		.4byte	0x80
 3784 0296 02       		.byte	0x2
 3785 0297 23       		.byte	0x23
 3786 0298 2C       		.uleb128 0x2c
 3787 0299 0A       		.uleb128 0xa
 3788 029a 82090000 		.4byte	.LASF43
 3789 029e 01       		.byte	0x1
 3790 029f 6C       		.byte	0x6c
 3791 02a0 4F020000 		.4byte	0x24f
 3792 02a4 02       		.byte	0x2
 3793 02a5 23       		.byte	0x23
 3794 02a6 30       		.uleb128 0x30
 3795 02a7 0A       		.uleb128 0xa
 3796 02a8 C0540000 		.4byte	.LASF44
 3797 02ac 01       		.byte	0x1
 3798 02ad 6D       		.byte	0x6d
 3799 02ae CA020000 		.4byte	0x2ca
 3800 02b2 02       		.byte	0x2
 3801 02b3 23       		.byte	0x23
 3802 02b4 34       		.uleb128 0x34
 3803 02b5 0A       		.uleb128 0xa
 3804 02b6 1B100000 		.4byte	.LASF45
 3805 02ba 01       		.byte	0x1
 3806 02bb 7D       		.byte	0x7d
 3807 02bc 80000000 		.4byte	0x80
 3808 02c0 02       		.byte	0x2
 3809 02c1 23       		.byte	0x23
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 116


 3810 02c2 44       		.uleb128 0x44
 3811 02c3 00       		.byte	0
 3812 02c4 06       		.uleb128 0x6
 3813 02c5 04       		.byte	0x4
 3814 02c6 9E010000 		.4byte	0x19e
 3815 02ca 0D       		.uleb128 0xd
 3816 02cb 41000000 		.4byte	0x41
 3817 02cf DA020000 		.4byte	0x2da
 3818 02d3 0E       		.uleb128 0xe
 3819 02d4 79000000 		.4byte	0x79
 3820 02d8 0F       		.byte	0xf
 3821 02d9 00       		.byte	0
 3822 02da 02       		.uleb128 0x2
 3823 02db 9D100000 		.4byte	.LASF46
 3824 02df 01       		.byte	0x1
 3825 02e0 88       		.byte	0x88
 3826 02e1 55020000 		.4byte	0x255
 3827 02e5 0F       		.uleb128 0xf
 3828 02e6 01       		.byte	0x1
 3829 02e7 EE600000 		.4byte	.LASF67
 3830 02eb 01       		.byte	0x1
 3831 02ec E601     		.2byte	0x1e6
 3832 02ee 01       		.byte	0x1
 3833 02ef 72000000 		.4byte	0x72
 3834 02f3 00000000 		.4byte	.LFB0
 3835 02f7 5C010000 		.4byte	.LFE0
 3836 02fb 00000000 		.4byte	.LLST0
 3837 02ff 01       		.byte	0x1
 3838 0300 B4030000 		.4byte	0x3b4
 3839 0304 10       		.uleb128 0x10
 3840 0305 DC230000 		.4byte	.LASF47
 3841 0309 01       		.byte	0x1
 3842 030a E601     		.2byte	0x1e6
 3843 030c 94000000 		.4byte	0x94
 3844 0310 02       		.byte	0x2
 3845 0311 91       		.byte	0x91
 3846 0312 64       		.sleb128 -28
 3847 0313 10       		.uleb128 0x10
 3848 0314 3E180000 		.4byte	.LASF48
 3849 0318 01       		.byte	0x1
 3850 0319 E601     		.2byte	0x1e6
 3851 031b 3F020000 		.4byte	0x23f
 3852 031f 02       		.byte	0x2
 3853 0320 91       		.byte	0x91
 3854 0321 60       		.sleb128 -32
 3855 0322 10       		.uleb128 0x10
 3856 0323 59020000 		.4byte	.LASF49
 3857 0327 01       		.byte	0x1
 3858 0328 E601     		.2byte	0x1e6
 3859 032a 56000000 		.4byte	0x56
 3860 032e 02       		.byte	0x2
 3861 032f 91       		.byte	0x91
 3862 0330 5E       		.sleb128 -34
 3863 0331 10       		.uleb128 0x10
 3864 0332 0B720000 		.4byte	.LASF50
 3865 0336 01       		.byte	0x1
 3866 0337 E601     		.2byte	0x1e6
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 117


 3867 0339 3F000000 		.4byte	0x3f
 3868 033d 02       		.byte	0x2
 3869 033e 91       		.byte	0x91
 3870 033f 58       		.sleb128 -40
 3871 0340 10       		.uleb128 0x10
 3872 0341 9B7F0000 		.4byte	.LASF42
 3873 0345 01       		.byte	0x1
 3874 0346 E601     		.2byte	0x1e6
 3875 0348 80000000 		.4byte	0x80
 3876 034c 02       		.byte	0x2
 3877 034d 91       		.byte	0x91
 3878 034e 00       		.sleb128 0
 3879 034f 10       		.uleb128 0x10
 3880 0350 302E0000 		.4byte	.LASF51
 3881 0354 01       		.byte	0x1
 3882 0355 E601     		.2byte	0x1e6
 3883 0357 B4030000 		.4byte	0x3b4
 3884 035b 02       		.byte	0x2
 3885 035c 91       		.byte	0x91
 3886 035d 04       		.sleb128 4
 3887 035e 10       		.uleb128 0x10
 3888 035f DF600000 		.4byte	.LASF52
 3889 0363 01       		.byte	0x1
 3890 0364 E601     		.2byte	0x1e6
 3891 0366 4F020000 		.4byte	0x24f
 3892 036a 02       		.byte	0x2
 3893 036b 91       		.byte	0x91
 3894 036c 08       		.sleb128 8
 3895 036d 10       		.uleb128 0x10
 3896 036e AD760000 		.4byte	.LASF53
 3897 0372 01       		.byte	0x1
 3898 0373 E601     		.2byte	0x1e6
 3899 0375 BA030000 		.4byte	0x3ba
 3900 0379 02       		.byte	0x2
 3901 037a 91       		.byte	0x91
 3902 037b 0C       		.sleb128 12
 3903 037c 11       		.uleb128 0x11
 3904 037d BE200000 		.4byte	.LASF54
 3905 0381 01       		.byte	0x1
 3906 0382 E801     		.2byte	0x1e8
 3907 0384 72000000 		.4byte	0x72
 3908 0388 02       		.byte	0x2
 3909 0389 91       		.byte	0x91
 3910 038a 74       		.sleb128 -12
 3911 038b 11       		.uleb128 0x11
 3912 038c 640F0000 		.4byte	.LASF55
 3913 0390 01       		.byte	0x1
 3914 0391 E901     		.2byte	0x1e9
 3915 0393 CA030000 		.4byte	0x3ca
 3916 0397 02       		.byte	0x2
 3917 0398 91       		.byte	0x91
 3918 0399 70       		.sleb128 -16
 3919 039a 12       		.uleb128 0x12
 3920 039b 22000000 		.4byte	.LBB2
 3921 039f 10010000 		.4byte	.LBE2
 3922 03a3 11       		.uleb128 0x11
 3923 03a4 83220000 		.4byte	.LASF39
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 118


 3924 03a8 01       		.byte	0x1
 3925 03a9 F401     		.2byte	0x1f4
 3926 03ab 4F020000 		.4byte	0x24f
 3927 03af 02       		.byte	0x2
 3928 03b0 91       		.byte	0x91
 3929 03b1 6C       		.sleb128 -20
 3930 03b2 00       		.byte	0
 3931 03b3 00       		.byte	0
 3932 03b4 06       		.uleb128 0x6
 3933 03b5 04       		.byte	0x4
 3934 03b6 BE010000 		.4byte	0x1be
 3935 03ba 0C       		.uleb128 0xc
 3936 03bb BF030000 		.4byte	0x3bf
 3937 03bf 06       		.uleb128 0x6
 3938 03c0 04       		.byte	0x4
 3939 03c1 C5030000 		.4byte	0x3c5
 3940 03c5 0C       		.uleb128 0xc
 3941 03c6 34020000 		.4byte	0x234
 3942 03ca 06       		.uleb128 0x6
 3943 03cb 04       		.byte	0x4
 3944 03cc DA020000 		.4byte	0x2da
 3945 03d0 13       		.uleb128 0x13
 3946 03d1 01       		.byte	0x1
 3947 03d2 DE260000 		.4byte	.LASF58
 3948 03d6 01       		.byte	0x1
 3949 03d7 8B02     		.2byte	0x28b
 3950 03d9 01       		.byte	0x1
 3951 03da 00000000 		.4byte	.LFB1
 3952 03de A4000000 		.4byte	.LFE1
 3953 03e2 38000000 		.4byte	.LLST1
 3954 03e6 01       		.byte	0x1
 3955 03e7 0A040000 		.4byte	0x40a
 3956 03eb 10       		.uleb128 0x10
 3957 03ec 6D4C0000 		.4byte	.LASF56
 3958 03f0 01       		.byte	0x1
 3959 03f1 8B02     		.2byte	0x28b
 3960 03f3 BE010000 		.4byte	0x1be
 3961 03f7 02       		.byte	0x2
 3962 03f8 91       		.byte	0x91
 3963 03f9 6C       		.sleb128 -20
 3964 03fa 11       		.uleb128 0x11
 3965 03fb 4E7F0000 		.4byte	.LASF57
 3966 03ff 01       		.byte	0x1
 3967 0400 8D02     		.2byte	0x28d
 3968 0402 CA030000 		.4byte	0x3ca
 3969 0406 02       		.byte	0x2
 3970 0407 91       		.byte	0x91
 3971 0408 74       		.sleb128 -12
 3972 0409 00       		.byte	0
 3973 040a 13       		.uleb128 0x13
 3974 040b 01       		.byte	0x1
 3975 040c 235B0000 		.4byte	.LASF59
 3976 0410 01       		.byte	0x1
 3977 0411 D002     		.2byte	0x2d0
 3978 0413 01       		.byte	0x1
 3979 0414 00000000 		.4byte	.LFB2
 3980 0418 A0000000 		.4byte	.LFE2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 119


 3981 041c 70000000 		.4byte	.LLST2
 3982 0420 01       		.byte	0x1
 3983 0421 71040000 		.4byte	0x471
 3984 0425 10       		.uleb128 0x10
 3985 0426 095D0000 		.4byte	.LASF60
 3986 042a 01       		.byte	0x1
 3987 042b D002     		.2byte	0x2d0
 3988 042d 71040000 		.4byte	0x471
 3989 0431 02       		.byte	0x2
 3990 0432 91       		.byte	0x91
 3991 0433 64       		.sleb128 -28
 3992 0434 10       		.uleb128 0x10
 3993 0435 F7550000 		.4byte	.LASF61
 3994 0439 01       		.byte	0x1
 3995 043a D002     		.2byte	0x2d0
 3996 043c B1000000 		.4byte	0xb1
 3997 0440 02       		.byte	0x2
 3998 0441 91       		.byte	0x91
 3999 0442 60       		.sleb128 -32
 4000 0443 11       		.uleb128 0x11
 4001 0444 D60F0000 		.4byte	.LASF62
 4002 0448 01       		.byte	0x1
 4003 0449 D202     		.2byte	0x2d2
 4004 044b B1000000 		.4byte	0xb1
 4005 044f 02       		.byte	0x2
 4006 0450 91       		.byte	0x91
 4007 0451 70       		.sleb128 -16
 4008 0452 11       		.uleb128 0x11
 4009 0453 C75E0000 		.4byte	.LASF63
 4010 0457 01       		.byte	0x1
 4011 0458 D302     		.2byte	0x2d3
 4012 045a 72000000 		.4byte	0x72
 4013 045e 02       		.byte	0x2
 4014 045f 91       		.byte	0x91
 4015 0460 6C       		.sleb128 -20
 4016 0461 11       		.uleb128 0x11
 4017 0462 07520000 		.4byte	.LASF64
 4018 0466 01       		.byte	0x1
 4019 0467 D302     		.2byte	0x2d3
 4020 0469 72000000 		.4byte	0x72
 4021 046d 02       		.byte	0x2
 4022 046e 91       		.byte	0x91
 4023 046f 74       		.sleb128 -12
 4024 0470 00       		.byte	0
 4025 0471 0C       		.uleb128 0xc
 4026 0472 76040000 		.4byte	0x476
 4027 0476 06       		.uleb128 0x6
 4028 0477 04       		.byte	0x4
 4029 0478 B1000000 		.4byte	0xb1
 4030 047c 13       		.uleb128 0x13
 4031 047d 01       		.byte	0x1
 4032 047e 3B560000 		.4byte	.LASF65
 4033 0482 01       		.byte	0x1
 4034 0483 1803     		.2byte	0x318
 4035 0485 01       		.byte	0x1
 4036 0486 00000000 		.4byte	.LFB3
 4037 048a 58000000 		.4byte	.LFE3
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 120


 4038 048e A8000000 		.4byte	.LLST3
 4039 0492 01       		.byte	0x1
 4040 0493 C5040000 		.4byte	0x4c5
 4041 0497 10       		.uleb128 0x10
 4042 0498 54710000 		.4byte	.LASF66
 4043 049c 01       		.byte	0x1
 4044 049d 1803     		.2byte	0x318
 4045 049f B1000000 		.4byte	0xb1
 4046 04a3 02       		.byte	0x2
 4047 04a4 91       		.byte	0x91
 4048 04a5 6C       		.sleb128 -20
 4049 04a6 11       		.uleb128 0x11
 4050 04a7 D60F0000 		.4byte	.LASF62
 4051 04ab 01       		.byte	0x1
 4052 04ac 1A03     		.2byte	0x31a
 4053 04ae B1000000 		.4byte	0xb1
 4054 04b2 02       		.byte	0x2
 4055 04b3 91       		.byte	0x91
 4056 04b4 70       		.sleb128 -16
 4057 04b5 11       		.uleb128 0x11
 4058 04b6 C75E0000 		.4byte	.LASF63
 4059 04ba 01       		.byte	0x1
 4060 04bb 1B03     		.2byte	0x31b
 4061 04bd 72000000 		.4byte	0x72
 4062 04c1 02       		.byte	0x2
 4063 04c2 91       		.byte	0x91
 4064 04c3 74       		.sleb128 -12
 4065 04c4 00       		.byte	0
 4066 04c5 0F       		.uleb128 0xf
 4067 04c6 01       		.byte	0x1
 4068 04c7 C3510000 		.4byte	.LASF68
 4069 04cb 01       		.byte	0x1
 4070 04cc 8A03     		.2byte	0x38a
 4071 04ce 01       		.byte	0x1
 4072 04cf 80000000 		.4byte	0x80
 4073 04d3 00000000 		.4byte	.LFB4
 4074 04d7 38000000 		.4byte	.LFE4
 4075 04db E0000000 		.4byte	.LLST4
 4076 04df 01       		.byte	0x1
 4077 04e0 12050000 		.4byte	0x512
 4078 04e4 10       		.uleb128 0x10
 4079 04e5 D3150000 		.4byte	.LASF69
 4080 04e9 01       		.byte	0x1
 4081 04ea 8A03     		.2byte	0x38a
 4082 04ec BE010000 		.4byte	0x1be
 4083 04f0 02       		.byte	0x2
 4084 04f1 91       		.byte	0x91
 4085 04f2 6C       		.sleb128 -20
 4086 04f3 11       		.uleb128 0x11
 4087 04f4 4E7F0000 		.4byte	.LASF57
 4088 04f8 01       		.byte	0x1
 4089 04f9 8C03     		.2byte	0x38c
 4090 04fb CA030000 		.4byte	0x3ca
 4091 04ff 02       		.byte	0x2
 4092 0500 91       		.byte	0x91
 4093 0501 74       		.sleb128 -12
 4094 0502 11       		.uleb128 0x11
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 121


 4095 0503 C10E0000 		.4byte	.LASF70
 4096 0507 01       		.byte	0x1
 4097 0508 8D03     		.2byte	0x38d
 4098 050a 80000000 		.4byte	0x80
 4099 050e 02       		.byte	0x2
 4100 050f 91       		.byte	0x91
 4101 0510 70       		.sleb128 -16
 4102 0511 00       		.byte	0
 4103 0512 13       		.uleb128 0x13
 4104 0513 01       		.byte	0x1
 4105 0514 116A0000 		.4byte	.LASF71
 4106 0518 01       		.byte	0x1
 4107 0519 A003     		.2byte	0x3a0
 4108 051b 01       		.byte	0x1
 4109 051c 00000000 		.4byte	.LFB5
 4110 0520 18010000 		.4byte	.LFE5
 4111 0524 18010000 		.4byte	.LLST5
 4112 0528 01       		.byte	0x1
 4113 0529 88050000 		.4byte	0x588
 4114 052d 10       		.uleb128 0x10
 4115 052e D3150000 		.4byte	.LASF69
 4116 0532 01       		.byte	0x1
 4117 0533 A003     		.2byte	0x3a0
 4118 0535 BE010000 		.4byte	0x1be
 4119 0539 02       		.byte	0x2
 4120 053a 91       		.byte	0x91
 4121 053b 64       		.sleb128 -28
 4122 053c 10       		.uleb128 0x10
 4123 053d 226C0000 		.4byte	.LASF72
 4124 0541 01       		.byte	0x1
 4125 0542 A003     		.2byte	0x3a0
 4126 0544 80000000 		.4byte	0x80
 4127 0548 02       		.byte	0x2
 4128 0549 91       		.byte	0x91
 4129 054a 60       		.sleb128 -32
 4130 054b 11       		.uleb128 0x11
 4131 054c 4E7F0000 		.4byte	.LASF57
 4132 0550 01       		.byte	0x1
 4133 0551 A203     		.2byte	0x3a2
 4134 0553 CA030000 		.4byte	0x3ca
 4135 0557 02       		.byte	0x2
 4136 0558 91       		.byte	0x91
 4137 0559 70       		.sleb128 -16
 4138 055a 11       		.uleb128 0x11
 4139 055b F5110000 		.4byte	.LASF73
 4140 055f 01       		.byte	0x1
 4141 0560 A303     		.2byte	0x3a3
 4142 0562 80000000 		.4byte	0x80
 4143 0566 02       		.byte	0x2
 4144 0567 91       		.byte	0x91
 4145 0568 6C       		.sleb128 -20
 4146 0569 11       		.uleb128 0x11
 4147 056a E7450000 		.4byte	.LASF74
 4148 056e 01       		.byte	0x1
 4149 056f A303     		.2byte	0x3a3
 4150 0571 80000000 		.4byte	0x80
 4151 0575 02       		.byte	0x2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 122


 4152 0576 91       		.byte	0x91
 4153 0577 68       		.sleb128 -24
 4154 0578 11       		.uleb128 0x11
 4155 0579 C4410000 		.4byte	.LASF75
 4156 057d 01       		.byte	0x1
 4157 057e A403     		.2byte	0x3a4
 4158 0580 72000000 		.4byte	0x72
 4159 0584 02       		.byte	0x2
 4160 0585 91       		.byte	0x91
 4161 0586 74       		.sleb128 -12
 4162 0587 00       		.byte	0
 4163 0588 13       		.uleb128 0x13
 4164 0589 01       		.byte	0x1
 4165 058a 30530000 		.4byte	.LASF76
 4166 058e 01       		.byte	0x1
 4167 058f 1604     		.2byte	0x416
 4168 0591 01       		.byte	0x1
 4169 0592 00000000 		.4byte	.LFB6
 4170 0596 A4000000 		.4byte	.LFE6
 4171 059a 50010000 		.4byte	.LLST6
 4172 059e 01       		.byte	0x1
 4173 059f C2050000 		.4byte	0x5c2
 4174 05a3 10       		.uleb128 0x10
 4175 05a4 87210000 		.4byte	.LASF77
 4176 05a8 01       		.byte	0x1
 4177 05a9 1604     		.2byte	0x416
 4178 05ab BE010000 		.4byte	0x1be
 4179 05af 02       		.byte	0x2
 4180 05b0 91       		.byte	0x91
 4181 05b1 6C       		.sleb128 -20
 4182 05b2 11       		.uleb128 0x11
 4183 05b3 4E7F0000 		.4byte	.LASF57
 4184 05b7 01       		.byte	0x1
 4185 05b8 1804     		.2byte	0x418
 4186 05ba CA030000 		.4byte	0x3ca
 4187 05be 02       		.byte	0x2
 4188 05bf 91       		.byte	0x91
 4189 05c0 74       		.sleb128 -12
 4190 05c1 00       		.byte	0
 4191 05c2 14       		.uleb128 0x14
 4192 05c3 01       		.byte	0x1
 4193 05c4 5A000000 		.4byte	.LASF78
 4194 05c8 01       		.byte	0x1
 4195 05c9 5904     		.2byte	0x459
 4196 05cb 01       		.byte	0x1
 4197 05cc 72000000 		.4byte	0x72
 4198 05d0 00000000 		.4byte	.LFB7
 4199 05d4 4C000000 		.4byte	.LFE7
 4200 05d8 88010000 		.4byte	.LLST7
 4201 05dc 01       		.byte	0x1
 4202 05dd 0F060000 		.4byte	0x60f
 4203 05e1 10       		.uleb128 0x10
 4204 05e2 230E0000 		.4byte	.LASF79
 4205 05e6 01       		.byte	0x1
 4206 05e7 5904     		.2byte	0x459
 4207 05e9 BE010000 		.4byte	0x1be
 4208 05ed 02       		.byte	0x2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 123


 4209 05ee 91       		.byte	0x91
 4210 05ef 6C       		.sleb128 -20
 4211 05f0 11       		.uleb128 0x11
 4212 05f1 BE200000 		.4byte	.LASF54
 4213 05f5 01       		.byte	0x1
 4214 05f6 5B04     		.2byte	0x45b
 4215 05f8 72000000 		.4byte	0x72
 4216 05fc 02       		.byte	0x2
 4217 05fd 91       		.byte	0x91
 4218 05fe 74       		.sleb128 -12
 4219 05ff 11       		.uleb128 0x11
 4220 0600 4E7F0000 		.4byte	.LASF57
 4221 0604 01       		.byte	0x1
 4222 0605 5C04     		.2byte	0x45c
 4223 0607 0F060000 		.4byte	0x60f
 4224 060b 02       		.byte	0x2
 4225 060c 91       		.byte	0x91
 4226 060d 70       		.sleb128 -16
 4227 060e 00       		.byte	0
 4228 060f 0C       		.uleb128 0xc
 4229 0610 14060000 		.4byte	0x614
 4230 0614 06       		.uleb128 0x6
 4231 0615 04       		.byte	0x4
 4232 0616 1A060000 		.4byte	0x61a
 4233 061a 0C       		.uleb128 0xc
 4234 061b DA020000 		.4byte	0x2da
 4235 061f 13       		.uleb128 0x13
 4236 0620 01       		.byte	0x1
 4237 0621 975B0000 		.4byte	.LASF80
 4238 0625 01       		.byte	0x1
 4239 0626 7B04     		.2byte	0x47b
 4240 0628 01       		.byte	0x1
 4241 0629 00000000 		.4byte	.LFB8
 4242 062d 98000000 		.4byte	.LFE8
 4243 0631 C0010000 		.4byte	.LLST8
 4244 0635 01       		.byte	0x1
 4245 0636 59060000 		.4byte	0x659
 4246 063a 10       		.uleb128 0x10
 4247 063b 6E780000 		.4byte	.LASF81
 4248 063f 01       		.byte	0x1
 4249 0640 7B04     		.2byte	0x47b
 4250 0642 BE010000 		.4byte	0x1be
 4251 0646 02       		.byte	0x2
 4252 0647 91       		.byte	0x91
 4253 0648 6C       		.sleb128 -20
 4254 0649 11       		.uleb128 0x11
 4255 064a 4E7F0000 		.4byte	.LASF57
 4256 064e 01       		.byte	0x1
 4257 064f 7D04     		.2byte	0x47d
 4258 0651 CA030000 		.4byte	0x3ca
 4259 0655 02       		.byte	0x2
 4260 0656 91       		.byte	0x91
 4261 0657 74       		.sleb128 -12
 4262 0658 00       		.byte	0
 4263 0659 0F       		.uleb128 0xf
 4264 065a 01       		.byte	0x1
 4265 065b D3270000 		.4byte	.LASF82
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 124


 4266 065f 01       		.byte	0x1
 4267 0660 A804     		.2byte	0x4a8
 4268 0662 01       		.byte	0x1
 4269 0663 72000000 		.4byte	0x72
 4270 0667 00000000 		.4byte	.LFB9
 4271 066b BC000000 		.4byte	.LFE9
 4272 066f F8010000 		.4byte	.LLST9
 4273 0673 01       		.byte	0x1
 4274 0674 B5060000 		.4byte	0x6b5
 4275 0678 10       		.uleb128 0x10
 4276 0679 6E780000 		.4byte	.LASF81
 4277 067d 01       		.byte	0x1
 4278 067e A804     		.2byte	0x4a8
 4279 0680 BE010000 		.4byte	0x1be
 4280 0684 02       		.byte	0x2
 4281 0685 91       		.byte	0x91
 4282 0686 64       		.sleb128 -28
 4283 0687 11       		.uleb128 0x11
 4284 0688 C4410000 		.4byte	.LASF75
 4285 068c 01       		.byte	0x1
 4286 068d AA04     		.2byte	0x4aa
 4287 068f 72000000 		.4byte	0x72
 4288 0693 02       		.byte	0x2
 4289 0694 91       		.byte	0x91
 4290 0695 74       		.sleb128 -12
 4291 0696 11       		.uleb128 0x11
 4292 0697 4E7F0000 		.4byte	.LASF57
 4293 069b 01       		.byte	0x1
 4294 069c AB04     		.2byte	0x4ab
 4295 069e CA030000 		.4byte	0x3ca
 4296 06a2 02       		.byte	0x2
 4297 06a3 91       		.byte	0x91
 4298 06a4 70       		.sleb128 -16
 4299 06a5 11       		.uleb128 0x11
 4300 06a6 8B3D0000 		.4byte	.LASF83
 4301 06aa 01       		.byte	0x1
 4302 06ab AC04     		.2byte	0x4ac
 4303 06ad 80000000 		.4byte	0x80
 4304 06b1 02       		.byte	0x2
 4305 06b2 91       		.byte	0x91
 4306 06b3 6C       		.sleb128 -20
 4307 06b4 00       		.byte	0
 4308 06b5 13       		.uleb128 0x13
 4309 06b6 01       		.byte	0x1
 4310 06b7 932D0000 		.4byte	.LASF84
 4311 06bb 01       		.byte	0x1
 4312 06bc D604     		.2byte	0x4d6
 4313 06be 01       		.byte	0x1
 4314 06bf 00000000 		.4byte	.LFB10
 4315 06c3 68000000 		.4byte	.LFE10
 4316 06c7 30020000 		.4byte	.LLST10
 4317 06cb 01       		.byte	0x1
 4318 06cc E0060000 		.4byte	0x6e0
 4319 06d0 11       		.uleb128 0x11
 4320 06d1 BE200000 		.4byte	.LASF54
 4321 06d5 01       		.byte	0x1
 4322 06d6 D804     		.2byte	0x4d8
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 125


 4323 06d8 72000000 		.4byte	0x72
 4324 06dc 02       		.byte	0x2
 4325 06dd 91       		.byte	0x91
 4326 06de 74       		.sleb128 -12
 4327 06df 00       		.byte	0
 4328 06e0 15       		.uleb128 0x15
 4329 06e1 01       		.byte	0x1
 4330 06e2 32450000 		.4byte	.LASF85
 4331 06e6 01       		.byte	0x1
 4332 06e7 1705     		.2byte	0x517
 4333 06e9 01       		.byte	0x1
 4334 06ea 00000000 		.4byte	.LFB11
 4335 06ee 1C000000 		.4byte	.LFE11
 4336 06f2 68020000 		.4byte	.LLST11
 4337 06f6 01       		.byte	0x1
 4338 06f7 16       		.uleb128 0x16
 4339 06f8 01       		.byte	0x1
 4340 06f9 31310000 		.4byte	.LASF86
 4341 06fd 01       		.byte	0x1
 4342 06fe 2205     		.2byte	0x522
 4343 0700 01       		.byte	0x1
 4344 0701 00000000 		.4byte	.LFB12
 4345 0705 1C000000 		.4byte	.LFE12
 4346 0709 94020000 		.4byte	.LLST12
 4347 070d 01       		.byte	0x1
 4348 070e 0F       		.uleb128 0xf
 4349 070f 01       		.byte	0x1
 4350 0710 E34C0000 		.4byte	.LASF87
 4351 0714 01       		.byte	0x1
 4352 0715 4605     		.2byte	0x546
 4353 0717 01       		.byte	0x1
 4354 0718 72000000 		.4byte	0x72
 4355 071c 00000000 		.4byte	.LFB13
 4356 0720 10010000 		.4byte	.LFE13
 4357 0724 C0020000 		.4byte	.LLST13
 4358 0728 01       		.byte	0x1
 4359 0729 64070000 		.4byte	0x764
 4360 072d 11       		.uleb128 0x11
 4361 072e 4E7F0000 		.4byte	.LASF57
 4362 0732 01       		.byte	0x1
 4363 0733 4805     		.2byte	0x548
 4364 0735 CA030000 		.4byte	0x3ca
 4365 0739 01       		.byte	0x1
 4366 073a 54       		.byte	0x54
 4367 073b 11       		.uleb128 0x11
 4368 073c C75E0000 		.4byte	.LASF63
 4369 0740 01       		.byte	0x1
 4370 0741 4905     		.2byte	0x549
 4371 0743 72000000 		.4byte	0x72
 4372 0747 02       		.byte	0x2
 4373 0748 91       		.byte	0x91
 4374 0749 6C       		.sleb128 -20
 4375 074a 12       		.uleb128 0x12
 4376 074b 2C000000 		.4byte	.LBB3
 4377 074f DE000000 		.4byte	.LBE3
 4378 0753 11       		.uleb128 0x11
 4379 0754 C4410000 		.4byte	.LASF75
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 126


 4380 0758 01       		.byte	0x1
 4381 0759 5C05     		.2byte	0x55c
 4382 075b 72000000 		.4byte	0x72
 4383 075f 02       		.byte	0x2
 4384 0760 91       		.byte	0x91
 4385 0761 68       		.sleb128 -24
 4386 0762 00       		.byte	0
 4387 0763 00       		.byte	0
 4388 0764 0F       		.uleb128 0xf
 4389 0765 01       		.byte	0x1
 4390 0766 C1150000 		.4byte	.LASF88
 4391 076a 01       		.byte	0x1
 4392 076b 9D05     		.2byte	0x59d
 4393 076d 01       		.byte	0x1
 4394 076e B1000000 		.4byte	0xb1
 4395 0772 00000000 		.4byte	.LFB14
 4396 0776 24000000 		.4byte	.LFE14
 4397 077a F8020000 		.4byte	.LLST14
 4398 077e 01       		.byte	0x1
 4399 077f 93070000 		.4byte	0x793
 4400 0783 11       		.uleb128 0x11
 4401 0784 C7300000 		.4byte	.LASF89
 4402 0788 01       		.byte	0x1
 4403 0789 9F05     		.2byte	0x59f
 4404 078b B1000000 		.4byte	0xb1
 4405 078f 02       		.byte	0x2
 4406 0790 91       		.byte	0x91
 4407 0791 74       		.sleb128 -12
 4408 0792 00       		.byte	0
 4409 0793 0F       		.uleb128 0xf
 4410 0794 01       		.byte	0x1
 4411 0795 9A030000 		.4byte	.LASF90
 4412 0799 01       		.byte	0x1
 4413 079a AC05     		.2byte	0x5ac
 4414 079c 01       		.byte	0x1
 4415 079d B1000000 		.4byte	0xb1
 4416 07a1 00000000 		.4byte	.LFB15
 4417 07a5 28000000 		.4byte	.LFE15
 4418 07a9 30030000 		.4byte	.LLST15
 4419 07ad 01       		.byte	0x1
 4420 07ae D1070000 		.4byte	0x7d1
 4421 07b2 11       		.uleb128 0x11
 4422 07b3 BE200000 		.4byte	.LASF54
 4423 07b7 01       		.byte	0x1
 4424 07b8 AE05     		.2byte	0x5ae
 4425 07ba B1000000 		.4byte	0xb1
 4426 07be 02       		.byte	0x2
 4427 07bf 91       		.byte	0x91
 4428 07c0 70       		.sleb128 -16
 4429 07c1 11       		.uleb128 0x11
 4430 07c2 8B3D0000 		.4byte	.LASF83
 4431 07c6 01       		.byte	0x1
 4432 07c7 AF05     		.2byte	0x5af
 4433 07c9 80000000 		.4byte	0x80
 4434 07cd 02       		.byte	0x2
 4435 07ce 91       		.byte	0x91
 4436 07cf 74       		.sleb128 -12
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 127


 4437 07d0 00       		.byte	0
 4438 07d1 17       		.uleb128 0x17
 4439 07d2 01       		.byte	0x1
 4440 07d3 860A0000 		.4byte	.LASF146
 4441 07d7 01       		.byte	0x1
 4442 07d8 B905     		.2byte	0x5b9
 4443 07da 01       		.byte	0x1
 4444 07db 80000000 		.4byte	0x80
 4445 07df 00000000 		.4byte	.LFB16
 4446 07e3 14000000 		.4byte	.LFE16
 4447 07e7 68030000 		.4byte	.LLST16
 4448 07eb 01       		.byte	0x1
 4449 07ec 13       		.uleb128 0x13
 4450 07ed 01       		.byte	0x1
 4451 07ee 50160000 		.4byte	.LASF91
 4452 07f2 01       		.byte	0x1
 4453 07f3 7A06     		.2byte	0x67a
 4454 07f5 01       		.byte	0x1
 4455 07f6 00000000 		.4byte	.LFB17
 4456 07fa 3C010000 		.4byte	.LFE17
 4457 07fe 94030000 		.4byte	.LLST17
 4458 0802 01       		.byte	0x1
 4459 0803 4D080000 		.4byte	0x84d
 4460 0807 11       		.uleb128 0x11
 4461 0808 4E7F0000 		.4byte	.LASF57
 4462 080c 01       		.byte	0x1
 4463 080d 7C06     		.2byte	0x67c
 4464 080f CA030000 		.4byte	0x3ca
 4465 0813 02       		.byte	0x2
 4466 0814 91       		.byte	0x91
 4467 0815 70       		.sleb128 -16
 4468 0816 18       		.uleb128 0x18
 4469 0817 22000000 		.4byte	.LBB4
 4470 081b 68000000 		.4byte	.LBE4
 4471 081f 33080000 		.4byte	0x833
 4472 0823 11       		.uleb128 0x11
 4473 0824 5B600000 		.4byte	.LASF92
 4474 0828 01       		.byte	0x1
 4475 0829 8706     		.2byte	0x687
 4476 082b 4D080000 		.4byte	0x84d
 4477 082f 02       		.byte	0x2
 4478 0830 91       		.byte	0x91
 4479 0831 74       		.sleb128 -12
 4480 0832 00       		.byte	0
 4481 0833 12       		.uleb128 0x12
 4482 0834 68000000 		.4byte	.LBB5
 4483 0838 02010000 		.4byte	.LBE5
 4484 083c 11       		.uleb128 0x11
 4485 083d 2F7F0000 		.4byte	.LASF14
 4486 0841 01       		.byte	0x1
 4487 0842 A806     		.2byte	0x6a8
 4488 0844 B1000000 		.4byte	0xb1
 4489 0848 02       		.byte	0x2
 4490 0849 91       		.byte	0x91
 4491 084a 6C       		.sleb128 -20
 4492 084b 00       		.byte	0
 4493 084c 00       		.byte	0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 128


 4494 084d 06       		.uleb128 0x6
 4495 084e 04       		.byte	0x4
 4496 084f B3010000 		.4byte	0x1b3
 4497 0853 13       		.uleb128 0x13
 4498 0854 01       		.byte	0x1
 4499 0855 1A2C0000 		.4byte	.LASF93
 4500 0859 01       		.byte	0x1
 4501 085a 1B07     		.2byte	0x71b
 4502 085c 01       		.byte	0x1
 4503 085d 00000000 		.4byte	.LFB18
 4504 0861 F4000000 		.4byte	.LFE18
 4505 0865 CC030000 		.4byte	.LLST18
 4506 0869 01       		.byte	0x1
 4507 086a A8080000 		.4byte	0x8a8
 4508 086e 18       		.uleb128 0x18
 4509 086f 3C000000 		.4byte	.LBB6
 4510 0873 68000000 		.4byte	.LBE6
 4511 0877 8E080000 		.4byte	0x88e
 4512 087b 11       		.uleb128 0x11
 4513 087c 84260000 		.4byte	.LASF94
 4514 0880 01       		.byte	0x1
 4515 0881 3C07     		.2byte	0x73c
 4516 0883 B8080000 		.4byte	0x8b8
 4517 0887 05       		.byte	0x5
 4518 0888 03       		.byte	0x3
 4519 0889 00000000 		.4byte	ucExpectedStackBytes.5891
 4520 088d 00       		.byte	0
 4521 088e 12       		.uleb128 0x12
 4522 088f 90000000 		.4byte	.LBB7
 4523 0893 D2000000 		.4byte	.LBE7
 4524 0897 11       		.uleb128 0x11
 4525 0898 DF2D0000 		.4byte	.LASF95
 4526 089c 01       		.byte	0x1
 4527 089d 3E07     		.2byte	0x73e
 4528 089f BD080000 		.4byte	0x8bd
 4529 08a3 02       		.byte	0x2
 4530 08a4 91       		.byte	0x91
 4531 08a5 74       		.sleb128 -12
 4532 08a6 00       		.byte	0
 4533 08a7 00       		.byte	0
 4534 08a8 0D       		.uleb128 0xd
 4535 08a9 48000000 		.4byte	0x48
 4536 08ad B8080000 		.4byte	0x8b8
 4537 08b1 0E       		.uleb128 0xe
 4538 08b2 79000000 		.4byte	0x79
 4539 08b6 13       		.byte	0x13
 4540 08b7 00       		.byte	0
 4541 08b8 0C       		.uleb128 0xc
 4542 08b9 A8080000 		.4byte	0x8a8
 4543 08bd 0C       		.uleb128 0xc
 4544 08be 4D080000 		.4byte	0x84d
 4545 08c2 13       		.uleb128 0x13
 4546 08c3 01       		.byte	0x1
 4547 08c4 6C3B0000 		.4byte	.LASF96
 4548 08c8 01       		.byte	0x1
 4549 08c9 4507     		.2byte	0x745
 4550 08cb 01       		.byte	0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 129


 4551 08cc 00000000 		.4byte	.LFB19
 4552 08d0 68000000 		.4byte	.LFE19
 4553 08d4 04040000 		.4byte	.LLST19
 4554 08d8 01       		.byte	0x1
 4555 08d9 0B090000 		.4byte	0x90b
 4556 08dd 10       		.uleb128 0x10
 4557 08de 7B330000 		.4byte	.LASF97
 4558 08e2 01       		.byte	0x1
 4559 08e3 4507     		.2byte	0x745
 4560 08e5 0B090000 		.4byte	0x90b
 4561 08e9 02       		.byte	0x2
 4562 08ea 91       		.byte	0x91
 4563 08eb 6C       		.sleb128 -20
 4564 08ec 10       		.uleb128 0x10
 4565 08ed 8C4C0000 		.4byte	.LASF98
 4566 08f1 01       		.byte	0x1
 4567 08f2 4507     		.2byte	0x745
 4568 08f4 B1000000 		.4byte	0xb1
 4569 08f8 02       		.byte	0x2
 4570 08f9 91       		.byte	0x91
 4571 08fa 68       		.sleb128 -24
 4572 08fb 11       		.uleb128 0x11
 4573 08fc D60F0000 		.4byte	.LASF62
 4574 0900 01       		.byte	0x1
 4575 0901 4707     		.2byte	0x747
 4576 0903 B1000000 		.4byte	0xb1
 4577 0907 02       		.byte	0x2
 4578 0908 91       		.byte	0x91
 4579 0909 74       		.sleb128 -12
 4580 090a 00       		.byte	0
 4581 090b 0C       		.uleb128 0xc
 4582 090c 10090000 		.4byte	0x910
 4583 0910 06       		.uleb128 0x6
 4584 0911 04       		.byte	0x4
 4585 0912 16090000 		.4byte	0x916
 4586 0916 0C       		.uleb128 0xc
 4587 0917 B3010000 		.4byte	0x1b3
 4588 091b 0F       		.uleb128 0xf
 4589 091c 01       		.byte	0x1
 4590 091d 6A230000 		.4byte	.LASF99
 4591 0921 01       		.byte	0x1
 4592 0922 A207     		.2byte	0x7a2
 4593 0924 01       		.byte	0x1
 4594 0925 72000000 		.4byte	0x72
 4595 0929 00000000 		.4byte	.LFB20
 4596 092d B4000000 		.4byte	.LFE20
 4597 0931 3C040000 		.4byte	.LLST20
 4598 0935 01       		.byte	0x1
 4599 0936 68090000 		.4byte	0x968
 4600 093a 10       		.uleb128 0x10
 4601 093b 7B330000 		.4byte	.LASF97
 4602 093f 01       		.byte	0x1
 4603 0940 A207     		.2byte	0x7a2
 4604 0942 0B090000 		.4byte	0x90b
 4605 0946 02       		.byte	0x2
 4606 0947 91       		.byte	0x91
 4607 0948 6C       		.sleb128 -20
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 130


 4608 0949 11       		.uleb128 0x11
 4609 094a 834A0000 		.4byte	.LASF100
 4610 094e 01       		.byte	0x1
 4611 094f A407     		.2byte	0x7a4
 4612 0951 CA030000 		.4byte	0x3ca
 4613 0955 02       		.byte	0x2
 4614 0956 91       		.byte	0x91
 4615 0957 70       		.sleb128 -16
 4616 0958 11       		.uleb128 0x11
 4617 0959 BE200000 		.4byte	.LASF54
 4618 095d 01       		.byte	0x1
 4619 095e A507     		.2byte	0x7a5
 4620 0960 72000000 		.4byte	0x72
 4621 0964 02       		.byte	0x2
 4622 0965 91       		.byte	0x91
 4623 0966 74       		.sleb128 -12
 4624 0967 00       		.byte	0
 4625 0968 19       		.uleb128 0x19
 4626 0969 01       		.byte	0x1
 4627 096a 46360000 		.4byte	.LASF101
 4628 096e 01       		.byte	0x1
 4629 096f D507     		.2byte	0x7d5
 4630 0971 01       		.byte	0x1
 4631 0972 00000000 		.4byte	.LFB21
 4632 0976 2C000000 		.4byte	.LFE21
 4633 097a 74040000 		.4byte	.LLST21
 4634 097e 01       		.byte	0x1
 4635 097f 93090000 		.4byte	0x993
 4636 0983 10       		.uleb128 0x10
 4637 0984 32320000 		.4byte	.LASF102
 4638 0988 01       		.byte	0x1
 4639 0989 D507     		.2byte	0x7d5
 4640 098b 93090000 		.4byte	0x993
 4641 098f 02       		.byte	0x2
 4642 0990 91       		.byte	0x91
 4643 0991 74       		.sleb128 -12
 4644 0992 00       		.byte	0
 4645 0993 0C       		.uleb128 0xc
 4646 0994 98090000 		.4byte	0x998
 4647 0998 06       		.uleb128 0x6
 4648 0999 04       		.byte	0x4
 4649 099a F2010000 		.4byte	0x1f2
 4650 099e 0F       		.uleb128 0xf
 4651 099f 01       		.byte	0x1
 4652 09a0 0D390000 		.4byte	.LASF103
 4653 09a4 01       		.byte	0x1
 4654 09a5 DD07     		.2byte	0x7dd
 4655 09a7 01       		.byte	0x1
 4656 09a8 72000000 		.4byte	0x72
 4657 09ac 00000000 		.4byte	.LFB22
 4658 09b0 94000000 		.4byte	.LFE22
 4659 09b4 AC040000 		.4byte	.LLST22
 4660 09b8 01       		.byte	0x1
 4661 09b9 EB090000 		.4byte	0x9eb
 4662 09bd 10       		.uleb128 0x10
 4663 09be 32320000 		.4byte	.LASF102
 4664 09c2 01       		.byte	0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 131


 4665 09c3 DD07     		.2byte	0x7dd
 4666 09c5 93090000 		.4byte	0x993
 4667 09c9 02       		.byte	0x2
 4668 09ca 91       		.byte	0x91
 4669 09cb 6C       		.sleb128 -20
 4670 09cc 10       		.uleb128 0x10
 4671 09cd E5170000 		.4byte	.LASF104
 4672 09d1 01       		.byte	0x1
 4673 09d2 DD07     		.2byte	0x7dd
 4674 09d4 71040000 		.4byte	0x471
 4675 09d8 02       		.byte	0x2
 4676 09d9 91       		.byte	0x91
 4677 09da 68       		.sleb128 -24
 4678 09db 11       		.uleb128 0x11
 4679 09dc BE200000 		.4byte	.LASF54
 4680 09e0 01       		.byte	0x1
 4681 09e1 DF07     		.2byte	0x7df
 4682 09e3 72000000 		.4byte	0x72
 4683 09e7 02       		.byte	0x2
 4684 09e8 91       		.byte	0x91
 4685 09e9 74       		.sleb128 -12
 4686 09ea 00       		.byte	0
 4687 09eb 16       		.uleb128 0x16
 4688 09ec 01       		.byte	0x1
 4689 09ed A8330000 		.4byte	.LASF105
 4690 09f1 01       		.byte	0x1
 4691 09f2 0B08     		.2byte	0x80b
 4692 09f4 01       		.byte	0x1
 4693 09f5 00000000 		.4byte	.LFB23
 4694 09f9 18000000 		.4byte	.LFE23
 4695 09fd E4040000 		.4byte	.LLST23
 4696 0a01 01       		.byte	0x1
 4697 0a02 1A       		.uleb128 0x1a
 4698 0a03 643C0000 		.4byte	.LASF106
 4699 0a07 01       		.byte	0x1
 4700 0a08 3F08     		.2byte	0x83f
 4701 0a0a 01       		.byte	0x1
 4702 0a0b 00000000 		.4byte	.LFB24
 4703 0a0f 24000000 		.4byte	.LFE24
 4704 0a13 10050000 		.4byte	.LLST24
 4705 0a17 01       		.byte	0x1
 4706 0a18 2C0A0000 		.4byte	0xa2c
 4707 0a1c 10       		.uleb128 0x10
 4708 0a1d 0B720000 		.4byte	.LASF50
 4709 0a21 01       		.byte	0x1
 4710 0a22 3F08     		.2byte	0x83f
 4711 0a24 3F000000 		.4byte	0x3f
 4712 0a28 02       		.byte	0x2
 4713 0a29 91       		.byte	0x91
 4714 0a2a 74       		.sleb128 -12
 4715 0a2b 00       		.byte	0
 4716 0a2c 1A       		.uleb128 0x1a
 4717 0a2d FF1E0000 		.4byte	.LASF107
 4718 0a31 01       		.byte	0x1
 4719 0a32 A908     		.2byte	0x8a9
 4720 0a34 01       		.byte	0x1
 4721 0a35 00000000 		.4byte	.LFB25
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 132


 4722 0a39 78000000 		.4byte	.LFE25
 4723 0a3d 48050000 		.4byte	.LLST25
 4724 0a41 01       		.byte	0x1
 4725 0a42 920A0000 		.4byte	0xa92
 4726 0a46 10       		.uleb128 0x10
 4727 0a47 4E7F0000 		.4byte	.LASF57
 4728 0a4b 01       		.byte	0x1
 4729 0a4c A908     		.2byte	0x8a9
 4730 0a4e CA030000 		.4byte	0x3ca
 4731 0a52 02       		.byte	0x2
 4732 0a53 91       		.byte	0x91
 4733 0a54 74       		.sleb128 -12
 4734 0a55 10       		.uleb128 0x10
 4735 0a56 3E180000 		.4byte	.LASF48
 4736 0a5a 01       		.byte	0x1
 4737 0a5b A908     		.2byte	0x8a9
 4738 0a5d 3F020000 		.4byte	0x23f
 4739 0a61 02       		.byte	0x2
 4740 0a62 91       		.byte	0x91
 4741 0a63 70       		.sleb128 -16
 4742 0a64 10       		.uleb128 0x10
 4743 0a65 9B7F0000 		.4byte	.LASF42
 4744 0a69 01       		.byte	0x1
 4745 0a6a A908     		.2byte	0x8a9
 4746 0a6c 80000000 		.4byte	0x80
 4747 0a70 02       		.byte	0x2
 4748 0a71 91       		.byte	0x91
 4749 0a72 6C       		.sleb128 -20
 4750 0a73 10       		.uleb128 0x10
 4751 0a74 AD760000 		.4byte	.LASF53
 4752 0a78 01       		.byte	0x1
 4753 0a79 A908     		.2byte	0x8a9
 4754 0a7b BA030000 		.4byte	0x3ba
 4755 0a7f 02       		.byte	0x2
 4756 0a80 91       		.byte	0x91
 4757 0a81 68       		.sleb128 -24
 4758 0a82 10       		.uleb128 0x10
 4759 0a83 59020000 		.4byte	.LASF49
 4760 0a87 01       		.byte	0x1
 4761 0a88 A908     		.2byte	0x8a9
 4762 0a8a 56000000 		.4byte	0x56
 4763 0a8e 02       		.byte	0x2
 4764 0a8f 91       		.byte	0x91
 4765 0a90 00       		.sleb128 0
 4766 0a91 00       		.byte	0
 4767 0a92 1A       		.uleb128 0x1a
 4768 0a93 3E7A0000 		.4byte	.LASF108
 4769 0a97 01       		.byte	0x1
 4770 0a98 FF08     		.2byte	0x8ff
 4771 0a9a 01       		.byte	0x1
 4772 0a9b 00000000 		.4byte	.LFB26
 4773 0a9f 88000000 		.4byte	.LFE26
 4774 0aa3 80050000 		.4byte	.LLST26
 4775 0aa7 01       		.byte	0x1
 4776 0aa8 BC0A0000 		.4byte	0xabc
 4777 0aac 11       		.uleb128 0x11
 4778 0aad 9B7F0000 		.4byte	.LASF42
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 133


 4779 0ab1 01       		.byte	0x1
 4780 0ab2 0109     		.2byte	0x901
 4781 0ab4 80000000 		.4byte	0x80
 4782 0ab8 02       		.byte	0x2
 4783 0ab9 91       		.byte	0x91
 4784 0aba 74       		.sleb128 -12
 4785 0abb 00       		.byte	0
 4786 0abc 1A       		.uleb128 0x1a
 4787 0abd 745C0000 		.4byte	.LASF109
 4788 0ac1 01       		.byte	0x1
 4789 0ac2 1F09     		.2byte	0x91f
 4790 0ac4 01       		.byte	0x1
 4791 0ac5 00000000 		.4byte	.LFB27
 4792 0ac9 7C000000 		.4byte	.LFE27
 4793 0acd B8050000 		.4byte	.LLST27
 4794 0ad1 01       		.byte	0x1
 4795 0ad2 090B0000 		.4byte	0xb09
 4796 0ad6 12       		.uleb128 0x12
 4797 0ad7 06000000 		.4byte	.LBB8
 4798 0adb 68000000 		.4byte	.LBE8
 4799 0adf 11       		.uleb128 0x11
 4800 0ae0 D87D0000 		.4byte	.LASF110
 4801 0ae4 01       		.byte	0x1
 4802 0ae5 2309     		.2byte	0x923
 4803 0ae7 72000000 		.4byte	0x72
 4804 0aeb 02       		.byte	0x2
 4805 0aec 91       		.byte	0x91
 4806 0aed 74       		.sleb128 -12
 4807 0aee 12       		.uleb128 0x12
 4808 0aef 26000000 		.4byte	.LBB9
 4809 0af3 60000000 		.4byte	.LBE9
 4810 0af7 11       		.uleb128 0x11
 4811 0af8 4E7F0000 		.4byte	.LASF57
 4812 0afc 01       		.byte	0x1
 4813 0afd 2F09     		.2byte	0x92f
 4814 0aff CA030000 		.4byte	0x3ca
 4815 0b03 02       		.byte	0x2
 4816 0b04 91       		.byte	0x91
 4817 0b05 70       		.sleb128 -16
 4818 0b06 00       		.byte	0
 4819 0b07 00       		.byte	0
 4820 0b08 00       		.byte	0
 4821 0b09 1A       		.uleb128 0x1a
 4822 0b0a AF5A0000 		.4byte	.LASF111
 4823 0b0e 01       		.byte	0x1
 4824 0b0f 4209     		.2byte	0x942
 4825 0b11 01       		.byte	0x1
 4826 0b12 00000000 		.4byte	.LFB28
 4827 0b16 70000000 		.4byte	.LFE28
 4828 0b1a F0050000 		.4byte	.LLST28
 4829 0b1e 01       		.byte	0x1
 4830 0b1f 330B0000 		.4byte	0xb33
 4831 0b23 10       		.uleb128 0x10
 4832 0b24 D60F0000 		.4byte	.LASF62
 4833 0b28 01       		.byte	0x1
 4834 0b29 4209     		.2byte	0x942
 4835 0b2b B1000000 		.4byte	0xb1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 134


 4836 0b2f 02       		.byte	0x2
 4837 0b30 91       		.byte	0x91
 4838 0b31 74       		.sleb128 -12
 4839 0b32 00       		.byte	0
 4840 0b33 1B       		.uleb128 0x1b
 4841 0b34 B8220000 		.4byte	.LASF112
 4842 0b38 01       		.byte	0x1
 4843 0b39 5C09     		.2byte	0x95c
 4844 0b3b 01       		.byte	0x1
 4845 0b3c CA030000 		.4byte	0x3ca
 4846 0b40 00000000 		.4byte	.LFB29
 4847 0b44 70000000 		.4byte	.LFE29
 4848 0b48 28060000 		.4byte	.LLST29
 4849 0b4c 01       		.byte	0x1
 4850 0b4d 7F0B0000 		.4byte	0xb7f
 4851 0b51 10       		.uleb128 0x10
 4852 0b52 59020000 		.4byte	.LASF49
 4853 0b56 01       		.byte	0x1
 4854 0b57 5C09     		.2byte	0x95c
 4855 0b59 56000000 		.4byte	0x56
 4856 0b5d 02       		.byte	0x2
 4857 0b5e 91       		.byte	0x91
 4858 0b5f 6E       		.sleb128 -18
 4859 0b60 10       		.uleb128 0x10
 4860 0b61 DF600000 		.4byte	.LASF52
 4861 0b65 01       		.byte	0x1
 4862 0b66 5C09     		.2byte	0x95c
 4863 0b68 4F020000 		.4byte	0x24f
 4864 0b6c 02       		.byte	0x2
 4865 0b6d 91       		.byte	0x91
 4866 0b6e 68       		.sleb128 -24
 4867 0b6f 11       		.uleb128 0x11
 4868 0b70 640F0000 		.4byte	.LASF55
 4869 0b74 01       		.byte	0x1
 4870 0b75 5E09     		.2byte	0x95e
 4871 0b77 CA030000 		.4byte	0x3ca
 4872 0b7b 02       		.byte	0x2
 4873 0b7c 91       		.byte	0x91
 4874 0b7d 74       		.sleb128 -12
 4875 0b7e 00       		.byte	0
 4876 0b7f 1C       		.uleb128 0x1c
 4877 0b80 1B2B0000 		.4byte	.LASF113
 4878 0b84 01       		.byte	0x1
 4879 0b85 E509     		.2byte	0x9e5
 4880 0b87 01       		.byte	0x1
 4881 0b88 56000000 		.4byte	0x56
 4882 0b8c 00000000 		.4byte	.LFB30
 4883 0b90 38000000 		.4byte	.LFE30
 4884 0b94 60060000 		.4byte	.LLST30
 4885 0b98 01       		.byte	0x1
 4886 0b99 BB0B0000 		.4byte	0xbbb
 4887 0b9d 10       		.uleb128 0x10
 4888 0b9e 68640000 		.4byte	.LASF114
 4889 0ba2 01       		.byte	0x1
 4890 0ba3 E509     		.2byte	0x9e5
 4891 0ba5 BB0B0000 		.4byte	0xbbb
 4892 0ba9 02       		.byte	0x2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 135


 4893 0baa 91       		.byte	0x91
 4894 0bab 74       		.sleb128 -12
 4895 0bac 11       		.uleb128 0x11
 4896 0bad 90220000 		.4byte	.LASF115
 4897 0bb1 01       		.byte	0x1
 4898 0bb2 E709     		.2byte	0x9e7
 4899 0bb4 56000000 		.4byte	0x56
 4900 0bb8 01       		.byte	0x1
 4901 0bb9 54       		.byte	0x54
 4902 0bba 00       		.byte	0
 4903 0bbb 06       		.uleb128 0x6
 4904 0bbc 04       		.byte	0x4
 4905 0bbd C10B0000 		.4byte	0xbc1
 4906 0bc1 0C       		.uleb128 0xc
 4907 0bc2 48000000 		.4byte	0x48
 4908 0bc6 0F       		.uleb128 0xf
 4909 0bc7 01       		.byte	0x1
 4910 0bc8 E04A0000 		.4byte	.LASF116
 4911 0bcc 01       		.byte	0x1
 4912 0bcd F909     		.2byte	0x9f9
 4913 0bcf 01       		.byte	0x1
 4914 0bd0 80000000 		.4byte	0x80
 4915 0bd4 00000000 		.4byte	.LFB31
 4916 0bd8 38000000 		.4byte	.LFE31
 4917 0bdc 98060000 		.4byte	.LLST31
 4918 0be0 01       		.byte	0x1
 4919 0be1 220C0000 		.4byte	0xc22
 4920 0be5 10       		.uleb128 0x10
 4921 0be6 230E0000 		.4byte	.LASF79
 4922 0bea 01       		.byte	0x1
 4923 0beb F909     		.2byte	0x9f9
 4924 0bed BE010000 		.4byte	0x1be
 4925 0bf1 02       		.byte	0x2
 4926 0bf2 91       		.byte	0x91
 4927 0bf3 64       		.sleb128 -28
 4928 0bf4 11       		.uleb128 0x11
 4929 0bf5 4E7F0000 		.4byte	.LASF57
 4930 0bf9 01       		.byte	0x1
 4931 0bfa FB09     		.2byte	0x9fb
 4932 0bfc CA030000 		.4byte	0x3ca
 4933 0c00 02       		.byte	0x2
 4934 0c01 91       		.byte	0x91
 4935 0c02 74       		.sleb128 -12
 4936 0c03 11       		.uleb128 0x11
 4937 0c04 B8230000 		.4byte	.LASF117
 4938 0c08 01       		.byte	0x1
 4939 0c09 FC09     		.2byte	0x9fc
 4940 0c0b 87000000 		.4byte	0x87
 4941 0c0f 02       		.byte	0x2
 4942 0c10 91       		.byte	0x91
 4943 0c11 70       		.sleb128 -16
 4944 0c12 11       		.uleb128 0x11
 4945 0c13 C10E0000 		.4byte	.LASF70
 4946 0c17 01       		.byte	0x1
 4947 0c18 FD09     		.2byte	0x9fd
 4948 0c1a 80000000 		.4byte	0x80
 4949 0c1e 02       		.byte	0x2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 136


 4950 0c1f 91       		.byte	0x91
 4951 0c20 6C       		.sleb128 -20
 4952 0c21 00       		.byte	0
 4953 0c22 1A       		.uleb128 0x1a
 4954 0c23 69480000 		.4byte	.LASF118
 4955 0c27 01       		.byte	0x1
 4956 0c28 150A     		.2byte	0xa15
 4957 0c2a 01       		.byte	0x1
 4958 0c2b 00000000 		.4byte	.LFB32
 4959 0c2f 20000000 		.4byte	.LFE32
 4960 0c33 D0060000 		.4byte	.LLST32
 4961 0c37 01       		.byte	0x1
 4962 0c38 4C0C0000 		.4byte	0xc4c
 4963 0c3c 10       		.uleb128 0x10
 4964 0c3d 4E7F0000 		.4byte	.LASF57
 4965 0c41 01       		.byte	0x1
 4966 0c42 150A     		.2byte	0xa15
 4967 0c44 CA030000 		.4byte	0x3ca
 4968 0c48 02       		.byte	0x2
 4969 0c49 91       		.byte	0x91
 4970 0c4a 74       		.sleb128 -12
 4971 0c4b 00       		.byte	0
 4972 0c4c 14       		.uleb128 0x14
 4973 0c4d 01       		.byte	0x1
 4974 0c4e DF7E0000 		.4byte	.LASF119
 4975 0c52 01       		.byte	0x1
 4976 0c53 290A     		.2byte	0xa29
 4977 0c55 01       		.byte	0x1
 4978 0c56 BE010000 		.4byte	0x1be
 4979 0c5a 00000000 		.4byte	.LFB33
 4980 0c5e 20000000 		.4byte	.LFE33
 4981 0c62 08070000 		.4byte	.LLST33
 4982 0c66 01       		.byte	0x1
 4983 0c67 7B0C0000 		.4byte	0xc7b
 4984 0c6b 11       		.uleb128 0x11
 4985 0c6c BE200000 		.4byte	.LASF54
 4986 0c70 01       		.byte	0x1
 4987 0c71 2B0A     		.2byte	0xa2b
 4988 0c73 BE010000 		.4byte	0x1be
 4989 0c77 02       		.byte	0x2
 4990 0c78 91       		.byte	0x91
 4991 0c79 74       		.sleb128 -12
 4992 0c7a 00       		.byte	0
 4993 0c7b 13       		.uleb128 0x13
 4994 0c7c 01       		.byte	0x1
 4995 0c7d AB540000 		.4byte	.LASF120
 4996 0c81 01       		.byte	0x1
 4997 0c82 570A     		.2byte	0xa57
 4998 0c84 01       		.byte	0x1
 4999 0c85 00000000 		.4byte	.LFB34
 5000 0c89 B8000000 		.4byte	.LFE34
 5001 0c8d 40070000 		.4byte	.LLST34
 5002 0c91 01       		.byte	0x1
 5003 0c92 B50C0000 		.4byte	0xcb5
 5004 0c96 10       		.uleb128 0x10
 5005 0c97 9A3A0000 		.4byte	.LASF121
 5006 0c9b 01       		.byte	0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 137


 5007 0c9c 570A     		.2byte	0xa57
 5008 0c9e B50C0000 		.4byte	0xcb5
 5009 0ca2 02       		.byte	0x2
 5010 0ca3 91       		.byte	0x91
 5011 0ca4 6C       		.sleb128 -20
 5012 0ca5 11       		.uleb128 0x11
 5013 0ca6 4E7F0000 		.4byte	.LASF57
 5014 0caa 01       		.byte	0x1
 5015 0cab 590A     		.2byte	0xa59
 5016 0cad BA0C0000 		.4byte	0xcba
 5017 0cb1 02       		.byte	0x2
 5018 0cb2 91       		.byte	0x91
 5019 0cb3 74       		.sleb128 -12
 5020 0cb4 00       		.byte	0
 5021 0cb5 0C       		.uleb128 0xc
 5022 0cb6 B4030000 		.4byte	0x3b4
 5023 0cba 0C       		.uleb128 0xc
 5024 0cbb CA030000 		.4byte	0x3ca
 5025 0cbf 13       		.uleb128 0x13
 5026 0cc0 01       		.byte	0x1
 5027 0cc1 DB490000 		.4byte	.LASF122
 5028 0cc5 01       		.byte	0x1
 5029 0cc6 810A     		.2byte	0xa81
 5030 0cc8 01       		.byte	0x1
 5031 0cc9 00000000 		.4byte	.LFB35
 5032 0ccd 84000000 		.4byte	.LFE35
 5033 0cd1 78070000 		.4byte	.LLST35
 5034 0cd5 01       		.byte	0x1
 5035 0cd6 F90C0000 		.4byte	0xcf9
 5036 0cda 10       		.uleb128 0x10
 5037 0cdb 9A3A0000 		.4byte	.LASF121
 5038 0cdf 01       		.byte	0x1
 5039 0ce0 810A     		.2byte	0xa81
 5040 0ce2 B50C0000 		.4byte	0xcb5
 5041 0ce6 02       		.byte	0x2
 5042 0ce7 91       		.byte	0x91
 5043 0ce8 6C       		.sleb128 -20
 5044 0ce9 11       		.uleb128 0x11
 5045 0cea 4E7F0000 		.4byte	.LASF57
 5046 0cee 01       		.byte	0x1
 5047 0cef 830A     		.2byte	0xa83
 5048 0cf1 BA0C0000 		.4byte	0xcba
 5049 0cf5 02       		.byte	0x2
 5050 0cf6 91       		.byte	0x91
 5051 0cf7 74       		.sleb128 -12
 5052 0cf8 00       		.byte	0
 5053 0cf9 0D       		.uleb128 0xd
 5054 0cfa B3010000 		.4byte	0x1b3
 5055 0cfe 090D0000 		.4byte	0xd09
 5056 0d02 0E       		.uleb128 0xe
 5057 0d03 79000000 		.4byte	0x79
 5058 0d07 04       		.byte	0x4
 5059 0d08 00       		.byte	0
 5060 0d09 1D       		.uleb128 0x1d
 5061 0d0a 9C450000 		.4byte	.LASF123
 5062 0d0e 01       		.byte	0x1
 5063 0d0f 97       		.byte	0x97
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 138


 5064 0d10 F90C0000 		.4byte	0xcf9
 5065 0d14 05       		.byte	0x5
 5066 0d15 03       		.byte	0x3
 5067 0d16 00000000 		.4byte	pxReadyTasksLists
 5068 0d1a 1D       		.uleb128 0x1d
 5069 0d1b 757A0000 		.4byte	.LASF124
 5070 0d1f 01       		.byte	0x1
 5071 0d20 98       		.byte	0x98
 5072 0d21 B3010000 		.4byte	0x1b3
 5073 0d25 05       		.byte	0x5
 5074 0d26 03       		.byte	0x3
 5075 0d27 00000000 		.4byte	xDelayedTaskList1
 5076 0d2b 1D       		.uleb128 0x1d
 5077 0d2c 877A0000 		.4byte	.LASF125
 5078 0d30 01       		.byte	0x1
 5079 0d31 99       		.byte	0x99
 5080 0d32 B3010000 		.4byte	0x1b3
 5081 0d36 05       		.byte	0x5
 5082 0d37 03       		.byte	0x3
 5083 0d38 00000000 		.4byte	xDelayedTaskList2
 5084 0d3c 1D       		.uleb128 0x1d
 5085 0d3d 20670000 		.4byte	.LASF126
 5086 0d41 01       		.byte	0x1
 5087 0d42 9A       		.byte	0x9a
 5088 0d43 4D0D0000 		.4byte	0xd4d
 5089 0d47 05       		.byte	0x5
 5090 0d48 03       		.byte	0x3
 5091 0d49 00000000 		.4byte	pxDelayedTaskList
 5092 0d4d 0B       		.uleb128 0xb
 5093 0d4e 4D080000 		.4byte	0x84d
 5094 0d52 1D       		.uleb128 0x1d
 5095 0d53 78690000 		.4byte	.LASF127
 5096 0d57 01       		.byte	0x1
 5097 0d58 9B       		.byte	0x9b
 5098 0d59 4D0D0000 		.4byte	0xd4d
 5099 0d5d 05       		.byte	0x5
 5100 0d5e 03       		.byte	0x3
 5101 0d5f 00000000 		.4byte	pxOverflowDelayedTaskList
 5102 0d63 1D       		.uleb128 0x1d
 5103 0d64 61290000 		.4byte	.LASF128
 5104 0d68 01       		.byte	0x1
 5105 0d69 9C       		.byte	0x9c
 5106 0d6a B3010000 		.4byte	0x1b3
 5107 0d6e 05       		.byte	0x5
 5108 0d6f 03       		.byte	0x3
 5109 0d70 00000000 		.4byte	xPendingReadyList
 5110 0d74 1D       		.uleb128 0x1d
 5111 0d75 84100000 		.4byte	.LASF129
 5112 0d79 01       		.byte	0x1
 5113 0d7a A0       		.byte	0xa0
 5114 0d7b B3010000 		.4byte	0x1b3
 5115 0d7f 05       		.byte	0x5
 5116 0d80 03       		.byte	0x3
 5117 0d81 00000000 		.4byte	xTasksWaitingTermination
 5118 0d85 1D       		.uleb128 0x1d
 5119 0d86 D82F0000 		.4byte	.LASF130
 5120 0d8a 01       		.byte	0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 139


 5121 0d8b A1       		.byte	0xa1
 5122 0d8c 9E010000 		.4byte	0x19e
 5123 0d90 05       		.byte	0x5
 5124 0d91 03       		.byte	0x3
 5125 0d92 00000000 		.4byte	uxTasksDeleted
 5126 0d96 1D       		.uleb128 0x1d
 5127 0d97 85190000 		.4byte	.LASF131
 5128 0d9b 01       		.byte	0x1
 5129 0d9c A7       		.byte	0xa7
 5130 0d9d B3010000 		.4byte	0x1b3
 5131 0da1 05       		.byte	0x5
 5132 0da2 03       		.byte	0x3
 5133 0da3 00000000 		.4byte	xSuspendedTaskList
 5134 0da7 1D       		.uleb128 0x1d
 5135 0da8 1A310000 		.4byte	.LASF132
 5136 0dac 01       		.byte	0x1
 5137 0dad B2       		.byte	0xb2
 5138 0dae 9E010000 		.4byte	0x19e
 5139 0db2 05       		.byte	0x5
 5140 0db3 03       		.byte	0x3
 5141 0db4 00000000 		.4byte	uxCurrentNumberOfTasks
 5142 0db8 1D       		.uleb128 0x1d
 5143 0db9 18070000 		.4byte	.LASF133
 5144 0dbd 01       		.byte	0x1
 5145 0dbe B3       		.byte	0xb3
 5146 0dbf C90D0000 		.4byte	0xdc9
 5147 0dc3 05       		.byte	0x5
 5148 0dc4 03       		.byte	0x3
 5149 0dc5 00000000 		.4byte	xTickCount
 5150 0dc9 0B       		.uleb128 0xb
 5151 0dca B1000000 		.4byte	0xb1
 5152 0dce 1D       		.uleb128 0x1d
 5153 0dcf 587E0000 		.4byte	.LASF134
 5154 0dd3 01       		.byte	0x1
 5155 0dd4 B4       		.byte	0xb4
 5156 0dd5 80000000 		.4byte	0x80
 5157 0dd9 05       		.byte	0x5
 5158 0dda 03       		.byte	0x3
 5159 0ddb 00000000 		.4byte	uxTopUsedPriority
 5160 0ddf 1D       		.uleb128 0x1d
 5161 0de0 305E0000 		.4byte	.LASF135
 5162 0de4 01       		.byte	0x1
 5163 0de5 B5       		.byte	0xb5
 5164 0de6 9E010000 		.4byte	0x19e
 5165 0dea 05       		.byte	0x5
 5166 0deb 03       		.byte	0x3
 5167 0dec 00000000 		.4byte	uxTopReadyPriority
 5168 0df0 1D       		.uleb128 0x1d
 5169 0df1 E8220000 		.4byte	.LASF136
 5170 0df5 01       		.byte	0x1
 5171 0df6 B6       		.byte	0xb6
 5172 0df7 010E0000 		.4byte	0xe01
 5173 0dfb 05       		.byte	0x5
 5174 0dfc 03       		.byte	0x3
 5175 0dfd 00000000 		.4byte	xSchedulerRunning
 5176 0e01 0B       		.uleb128 0xb
 5177 0e02 72000000 		.4byte	0x72
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 140


 5178 0e06 1D       		.uleb128 0x1d
 5179 0e07 E6270000 		.4byte	.LASF137
 5180 0e0b 01       		.byte	0x1
 5181 0e0c B7       		.byte	0xb7
 5182 0e0d 9E010000 		.4byte	0x19e
 5183 0e11 05       		.byte	0x5
 5184 0e12 03       		.byte	0x3
 5185 0e13 00000000 		.4byte	uxSchedulerSuspended
 5186 0e17 1D       		.uleb128 0x1d
 5187 0e18 C6200000 		.4byte	.LASF138
 5188 0e1c 01       		.byte	0x1
 5189 0e1d B8       		.byte	0xb8
 5190 0e1e 9E010000 		.4byte	0x19e
 5191 0e22 05       		.byte	0x5
 5192 0e23 03       		.byte	0x3
 5193 0e24 00000000 		.4byte	uxMissedTicks
 5194 0e28 1D       		.uleb128 0x1d
 5195 0e29 FB720000 		.4byte	.LASF139
 5196 0e2d 01       		.byte	0x1
 5197 0e2e B9       		.byte	0xb9
 5198 0e2f 010E0000 		.4byte	0xe01
 5199 0e33 05       		.byte	0x5
 5200 0e34 03       		.byte	0x3
 5201 0e35 00000000 		.4byte	xMissedYield
 5202 0e39 1D       		.uleb128 0x1d
 5203 0e3a 0A6E0000 		.4byte	.LASF140
 5204 0e3e 01       		.byte	0x1
 5205 0e3f BA       		.byte	0xba
 5206 0e40 010E0000 		.4byte	0xe01
 5207 0e44 05       		.byte	0x5
 5208 0e45 03       		.byte	0x3
 5209 0e46 00000000 		.4byte	xNumOfOverflows
 5210 0e4a 1D       		.uleb128 0x1d
 5211 0e4b 23070000 		.4byte	.LASF141
 5212 0e4f 01       		.byte	0x1
 5213 0e50 BB       		.byte	0xbb
 5214 0e51 80000000 		.4byte	0x80
 5215 0e55 05       		.byte	0x5
 5216 0e56 03       		.byte	0x3
 5217 0e57 00000000 		.4byte	uxTaskNumber
 5218 0e5b 1D       		.uleb128 0x1d
 5219 0e5c EA260000 		.4byte	.LASF142
 5220 0e60 01       		.byte	0x1
 5221 0e61 BC       		.byte	0xbc
 5222 0e62 C90D0000 		.4byte	0xdc9
 5223 0e66 05       		.byte	0x5
 5224 0e67 03       		.byte	0x3
 5225 0e68 00000000 		.4byte	xNextTaskUnblockTime
 5226 0e6c 1E       		.uleb128 0x1e
 5227 0e6d FC130000 		.4byte	.LASF147
 5228 0e71 01       		.byte	0x1
 5229 0e72 94       		.byte	0x94
 5230 0e73 7E0E0000 		.4byte	0xe7e
 5231 0e77 01       		.byte	0x1
 5232 0e78 05       		.byte	0x5
 5233 0e79 03       		.byte	0x3
 5234 0e7a 00000000 		.4byte	pxCurrentTCB
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 141


 5235 0e7e 0B       		.uleb128 0xb
 5236 0e7f CA030000 		.4byte	0x3ca
 5237 0e83 00       		.byte	0
 5238              		.section	.debug_abbrev,"",%progbits
 5239              	.Ldebug_abbrev0:
 5240 0000 01       		.uleb128 0x1
 5241 0001 11       		.uleb128 0x11
 5242 0002 01       		.byte	0x1
 5243 0003 25       		.uleb128 0x25
 5244 0004 0E       		.uleb128 0xe
 5245 0005 13       		.uleb128 0x13
 5246 0006 0B       		.uleb128 0xb
 5247 0007 03       		.uleb128 0x3
 5248 0008 0E       		.uleb128 0xe
 5249 0009 1B       		.uleb128 0x1b
 5250 000a 0E       		.uleb128 0xe
 5251 000b 55       		.uleb128 0x55
 5252 000c 06       		.uleb128 0x6
 5253 000d 11       		.uleb128 0x11
 5254 000e 01       		.uleb128 0x1
 5255 000f 52       		.uleb128 0x52
 5256 0010 01       		.uleb128 0x1
 5257 0011 10       		.uleb128 0x10
 5258 0012 06       		.uleb128 0x6
 5259 0013 9942     		.uleb128 0x2119
 5260 0015 06       		.uleb128 0x6
 5261 0016 00       		.byte	0
 5262 0017 00       		.byte	0
 5263 0018 02       		.uleb128 0x2
 5264 0019 16       		.uleb128 0x16
 5265 001a 00       		.byte	0
 5266 001b 03       		.uleb128 0x3
 5267 001c 0E       		.uleb128 0xe
 5268 001d 3A       		.uleb128 0x3a
 5269 001e 0B       		.uleb128 0xb
 5270 001f 3B       		.uleb128 0x3b
 5271 0020 0B       		.uleb128 0xb
 5272 0021 49       		.uleb128 0x49
 5273 0022 13       		.uleb128 0x13
 5274 0023 00       		.byte	0
 5275 0024 00       		.byte	0
 5276 0025 03       		.uleb128 0x3
 5277 0026 24       		.uleb128 0x24
 5278 0027 00       		.byte	0
 5279 0028 0B       		.uleb128 0xb
 5280 0029 0B       		.uleb128 0xb
 5281 002a 3E       		.uleb128 0x3e
 5282 002b 0B       		.uleb128 0xb
 5283 002c 03       		.uleb128 0x3
 5284 002d 0E       		.uleb128 0xe
 5285 002e 00       		.byte	0
 5286 002f 00       		.byte	0
 5287 0030 04       		.uleb128 0x4
 5288 0031 0F       		.uleb128 0xf
 5289 0032 00       		.byte	0
 5290 0033 0B       		.uleb128 0xb
 5291 0034 0B       		.uleb128 0xb
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 142


 5292 0035 00       		.byte	0
 5293 0036 00       		.byte	0
 5294 0037 05       		.uleb128 0x5
 5295 0038 24       		.uleb128 0x24
 5296 0039 00       		.byte	0
 5297 003a 0B       		.uleb128 0xb
 5298 003b 0B       		.uleb128 0xb
 5299 003c 3E       		.uleb128 0x3e
 5300 003d 0B       		.uleb128 0xb
 5301 003e 03       		.uleb128 0x3
 5302 003f 08       		.uleb128 0x8
 5303 0040 00       		.byte	0
 5304 0041 00       		.byte	0
 5305 0042 06       		.uleb128 0x6
 5306 0043 0F       		.uleb128 0xf
 5307 0044 00       		.byte	0
 5308 0045 0B       		.uleb128 0xb
 5309 0046 0B       		.uleb128 0xb
 5310 0047 49       		.uleb128 0x49
 5311 0048 13       		.uleb128 0x13
 5312 0049 00       		.byte	0
 5313 004a 00       		.byte	0
 5314 004b 07       		.uleb128 0x7
 5315 004c 15       		.uleb128 0x15
 5316 004d 01       		.byte	0x1
 5317 004e 27       		.uleb128 0x27
 5318 004f 0C       		.uleb128 0xc
 5319 0050 01       		.uleb128 0x1
 5320 0051 13       		.uleb128 0x13
 5321 0052 00       		.byte	0
 5322 0053 00       		.byte	0
 5323 0054 08       		.uleb128 0x8
 5324 0055 05       		.uleb128 0x5
 5325 0056 00       		.byte	0
 5326 0057 49       		.uleb128 0x49
 5327 0058 13       		.uleb128 0x13
 5328 0059 00       		.byte	0
 5329 005a 00       		.byte	0
 5330 005b 09       		.uleb128 0x9
 5331 005c 13       		.uleb128 0x13
 5332 005d 01       		.byte	0x1
 5333 005e 03       		.uleb128 0x3
 5334 005f 0E       		.uleb128 0xe
 5335 0060 0B       		.uleb128 0xb
 5336 0061 0B       		.uleb128 0xb
 5337 0062 3A       		.uleb128 0x3a
 5338 0063 0B       		.uleb128 0xb
 5339 0064 3B       		.uleb128 0x3b
 5340 0065 0B       		.uleb128 0xb
 5341 0066 01       		.uleb128 0x1
 5342 0067 13       		.uleb128 0x13
 5343 0068 00       		.byte	0
 5344 0069 00       		.byte	0
 5345 006a 0A       		.uleb128 0xa
 5346 006b 0D       		.uleb128 0xd
 5347 006c 00       		.byte	0
 5348 006d 03       		.uleb128 0x3
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 143


 5349 006e 0E       		.uleb128 0xe
 5350 006f 3A       		.uleb128 0x3a
 5351 0070 0B       		.uleb128 0xb
 5352 0071 3B       		.uleb128 0x3b
 5353 0072 0B       		.uleb128 0xb
 5354 0073 49       		.uleb128 0x49
 5355 0074 13       		.uleb128 0x13
 5356 0075 38       		.uleb128 0x38
 5357 0076 0A       		.uleb128 0xa
 5358 0077 00       		.byte	0
 5359 0078 00       		.byte	0
 5360 0079 0B       		.uleb128 0xb
 5361 007a 35       		.uleb128 0x35
 5362 007b 00       		.byte	0
 5363 007c 49       		.uleb128 0x49
 5364 007d 13       		.uleb128 0x13
 5365 007e 00       		.byte	0
 5366 007f 00       		.byte	0
 5367 0080 0C       		.uleb128 0xc
 5368 0081 26       		.uleb128 0x26
 5369 0082 00       		.byte	0
 5370 0083 49       		.uleb128 0x49
 5371 0084 13       		.uleb128 0x13
 5372 0085 00       		.byte	0
 5373 0086 00       		.byte	0
 5374 0087 0D       		.uleb128 0xd
 5375 0088 01       		.uleb128 0x1
 5376 0089 01       		.byte	0x1
 5377 008a 49       		.uleb128 0x49
 5378 008b 13       		.uleb128 0x13
 5379 008c 01       		.uleb128 0x1
 5380 008d 13       		.uleb128 0x13
 5381 008e 00       		.byte	0
 5382 008f 00       		.byte	0
 5383 0090 0E       		.uleb128 0xe
 5384 0091 21       		.uleb128 0x21
 5385 0092 00       		.byte	0
 5386 0093 49       		.uleb128 0x49
 5387 0094 13       		.uleb128 0x13
 5388 0095 2F       		.uleb128 0x2f
 5389 0096 0B       		.uleb128 0xb
 5390 0097 00       		.byte	0
 5391 0098 00       		.byte	0
 5392 0099 0F       		.uleb128 0xf
 5393 009a 2E       		.uleb128 0x2e
 5394 009b 01       		.byte	0x1
 5395 009c 3F       		.uleb128 0x3f
 5396 009d 0C       		.uleb128 0xc
 5397 009e 03       		.uleb128 0x3
 5398 009f 0E       		.uleb128 0xe
 5399 00a0 3A       		.uleb128 0x3a
 5400 00a1 0B       		.uleb128 0xb
 5401 00a2 3B       		.uleb128 0x3b
 5402 00a3 05       		.uleb128 0x5
 5403 00a4 27       		.uleb128 0x27
 5404 00a5 0C       		.uleb128 0xc
 5405 00a6 49       		.uleb128 0x49
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 144


 5406 00a7 13       		.uleb128 0x13
 5407 00a8 11       		.uleb128 0x11
 5408 00a9 01       		.uleb128 0x1
 5409 00aa 12       		.uleb128 0x12
 5410 00ab 01       		.uleb128 0x1
 5411 00ac 40       		.uleb128 0x40
 5412 00ad 06       		.uleb128 0x6
 5413 00ae 9642     		.uleb128 0x2116
 5414 00b0 0C       		.uleb128 0xc
 5415 00b1 01       		.uleb128 0x1
 5416 00b2 13       		.uleb128 0x13
 5417 00b3 00       		.byte	0
 5418 00b4 00       		.byte	0
 5419 00b5 10       		.uleb128 0x10
 5420 00b6 05       		.uleb128 0x5
 5421 00b7 00       		.byte	0
 5422 00b8 03       		.uleb128 0x3
 5423 00b9 0E       		.uleb128 0xe
 5424 00ba 3A       		.uleb128 0x3a
 5425 00bb 0B       		.uleb128 0xb
 5426 00bc 3B       		.uleb128 0x3b
 5427 00bd 05       		.uleb128 0x5
 5428 00be 49       		.uleb128 0x49
 5429 00bf 13       		.uleb128 0x13
 5430 00c0 02       		.uleb128 0x2
 5431 00c1 0A       		.uleb128 0xa
 5432 00c2 00       		.byte	0
 5433 00c3 00       		.byte	0
 5434 00c4 11       		.uleb128 0x11
 5435 00c5 34       		.uleb128 0x34
 5436 00c6 00       		.byte	0
 5437 00c7 03       		.uleb128 0x3
 5438 00c8 0E       		.uleb128 0xe
 5439 00c9 3A       		.uleb128 0x3a
 5440 00ca 0B       		.uleb128 0xb
 5441 00cb 3B       		.uleb128 0x3b
 5442 00cc 05       		.uleb128 0x5
 5443 00cd 49       		.uleb128 0x49
 5444 00ce 13       		.uleb128 0x13
 5445 00cf 02       		.uleb128 0x2
 5446 00d0 0A       		.uleb128 0xa
 5447 00d1 00       		.byte	0
 5448 00d2 00       		.byte	0
 5449 00d3 12       		.uleb128 0x12
 5450 00d4 0B       		.uleb128 0xb
 5451 00d5 01       		.byte	0x1
 5452 00d6 11       		.uleb128 0x11
 5453 00d7 01       		.uleb128 0x1
 5454 00d8 12       		.uleb128 0x12
 5455 00d9 01       		.uleb128 0x1
 5456 00da 00       		.byte	0
 5457 00db 00       		.byte	0
 5458 00dc 13       		.uleb128 0x13
 5459 00dd 2E       		.uleb128 0x2e
 5460 00de 01       		.byte	0x1
 5461 00df 3F       		.uleb128 0x3f
 5462 00e0 0C       		.uleb128 0xc
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 145


 5463 00e1 03       		.uleb128 0x3
 5464 00e2 0E       		.uleb128 0xe
 5465 00e3 3A       		.uleb128 0x3a
 5466 00e4 0B       		.uleb128 0xb
 5467 00e5 3B       		.uleb128 0x3b
 5468 00e6 05       		.uleb128 0x5
 5469 00e7 27       		.uleb128 0x27
 5470 00e8 0C       		.uleb128 0xc
 5471 00e9 11       		.uleb128 0x11
 5472 00ea 01       		.uleb128 0x1
 5473 00eb 12       		.uleb128 0x12
 5474 00ec 01       		.uleb128 0x1
 5475 00ed 40       		.uleb128 0x40
 5476 00ee 06       		.uleb128 0x6
 5477 00ef 9642     		.uleb128 0x2116
 5478 00f1 0C       		.uleb128 0xc
 5479 00f2 01       		.uleb128 0x1
 5480 00f3 13       		.uleb128 0x13
 5481 00f4 00       		.byte	0
 5482 00f5 00       		.byte	0
 5483 00f6 14       		.uleb128 0x14
 5484 00f7 2E       		.uleb128 0x2e
 5485 00f8 01       		.byte	0x1
 5486 00f9 3F       		.uleb128 0x3f
 5487 00fa 0C       		.uleb128 0xc
 5488 00fb 03       		.uleb128 0x3
 5489 00fc 0E       		.uleb128 0xe
 5490 00fd 3A       		.uleb128 0x3a
 5491 00fe 0B       		.uleb128 0xb
 5492 00ff 3B       		.uleb128 0x3b
 5493 0100 05       		.uleb128 0x5
 5494 0101 27       		.uleb128 0x27
 5495 0102 0C       		.uleb128 0xc
 5496 0103 49       		.uleb128 0x49
 5497 0104 13       		.uleb128 0x13
 5498 0105 11       		.uleb128 0x11
 5499 0106 01       		.uleb128 0x1
 5500 0107 12       		.uleb128 0x12
 5501 0108 01       		.uleb128 0x1
 5502 0109 40       		.uleb128 0x40
 5503 010a 06       		.uleb128 0x6
 5504 010b 9742     		.uleb128 0x2117
 5505 010d 0C       		.uleb128 0xc
 5506 010e 01       		.uleb128 0x1
 5507 010f 13       		.uleb128 0x13
 5508 0110 00       		.byte	0
 5509 0111 00       		.byte	0
 5510 0112 15       		.uleb128 0x15
 5511 0113 2E       		.uleb128 0x2e
 5512 0114 00       		.byte	0
 5513 0115 3F       		.uleb128 0x3f
 5514 0116 0C       		.uleb128 0xc
 5515 0117 03       		.uleb128 0x3
 5516 0118 0E       		.uleb128 0xe
 5517 0119 3A       		.uleb128 0x3a
 5518 011a 0B       		.uleb128 0xb
 5519 011b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 146


 5520 011c 05       		.uleb128 0x5
 5521 011d 27       		.uleb128 0x27
 5522 011e 0C       		.uleb128 0xc
 5523 011f 11       		.uleb128 0x11
 5524 0120 01       		.uleb128 0x1
 5525 0121 12       		.uleb128 0x12
 5526 0122 01       		.uleb128 0x1
 5527 0123 40       		.uleb128 0x40
 5528 0124 06       		.uleb128 0x6
 5529 0125 9642     		.uleb128 0x2116
 5530 0127 0C       		.uleb128 0xc
 5531 0128 00       		.byte	0
 5532 0129 00       		.byte	0
 5533 012a 16       		.uleb128 0x16
 5534 012b 2E       		.uleb128 0x2e
 5535 012c 00       		.byte	0
 5536 012d 3F       		.uleb128 0x3f
 5537 012e 0C       		.uleb128 0xc
 5538 012f 03       		.uleb128 0x3
 5539 0130 0E       		.uleb128 0xe
 5540 0131 3A       		.uleb128 0x3a
 5541 0132 0B       		.uleb128 0xb
 5542 0133 3B       		.uleb128 0x3b
 5543 0134 05       		.uleb128 0x5
 5544 0135 27       		.uleb128 0x27
 5545 0136 0C       		.uleb128 0xc
 5546 0137 11       		.uleb128 0x11
 5547 0138 01       		.uleb128 0x1
 5548 0139 12       		.uleb128 0x12
 5549 013a 01       		.uleb128 0x1
 5550 013b 40       		.uleb128 0x40
 5551 013c 06       		.uleb128 0x6
 5552 013d 9742     		.uleb128 0x2117
 5553 013f 0C       		.uleb128 0xc
 5554 0140 00       		.byte	0
 5555 0141 00       		.byte	0
 5556 0142 17       		.uleb128 0x17
 5557 0143 2E       		.uleb128 0x2e
 5558 0144 00       		.byte	0
 5559 0145 3F       		.uleb128 0x3f
 5560 0146 0C       		.uleb128 0xc
 5561 0147 03       		.uleb128 0x3
 5562 0148 0E       		.uleb128 0xe
 5563 0149 3A       		.uleb128 0x3a
 5564 014a 0B       		.uleb128 0xb
 5565 014b 3B       		.uleb128 0x3b
 5566 014c 05       		.uleb128 0x5
 5567 014d 27       		.uleb128 0x27
 5568 014e 0C       		.uleb128 0xc
 5569 014f 49       		.uleb128 0x49
 5570 0150 13       		.uleb128 0x13
 5571 0151 11       		.uleb128 0x11
 5572 0152 01       		.uleb128 0x1
 5573 0153 12       		.uleb128 0x12
 5574 0154 01       		.uleb128 0x1
 5575 0155 40       		.uleb128 0x40
 5576 0156 06       		.uleb128 0x6
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 147


 5577 0157 9742     		.uleb128 0x2117
 5578 0159 0C       		.uleb128 0xc
 5579 015a 00       		.byte	0
 5580 015b 00       		.byte	0
 5581 015c 18       		.uleb128 0x18
 5582 015d 0B       		.uleb128 0xb
 5583 015e 01       		.byte	0x1
 5584 015f 11       		.uleb128 0x11
 5585 0160 01       		.uleb128 0x1
 5586 0161 12       		.uleb128 0x12
 5587 0162 01       		.uleb128 0x1
 5588 0163 01       		.uleb128 0x1
 5589 0164 13       		.uleb128 0x13
 5590 0165 00       		.byte	0
 5591 0166 00       		.byte	0
 5592 0167 19       		.uleb128 0x19
 5593 0168 2E       		.uleb128 0x2e
 5594 0169 01       		.byte	0x1
 5595 016a 3F       		.uleb128 0x3f
 5596 016b 0C       		.uleb128 0xc
 5597 016c 03       		.uleb128 0x3
 5598 016d 0E       		.uleb128 0xe
 5599 016e 3A       		.uleb128 0x3a
 5600 016f 0B       		.uleb128 0xb
 5601 0170 3B       		.uleb128 0x3b
 5602 0171 05       		.uleb128 0x5
 5603 0172 27       		.uleb128 0x27
 5604 0173 0C       		.uleb128 0xc
 5605 0174 11       		.uleb128 0x11
 5606 0175 01       		.uleb128 0x1
 5607 0176 12       		.uleb128 0x12
 5608 0177 01       		.uleb128 0x1
 5609 0178 40       		.uleb128 0x40
 5610 0179 06       		.uleb128 0x6
 5611 017a 9742     		.uleb128 0x2117
 5612 017c 0C       		.uleb128 0xc
 5613 017d 01       		.uleb128 0x1
 5614 017e 13       		.uleb128 0x13
 5615 017f 00       		.byte	0
 5616 0180 00       		.byte	0
 5617 0181 1A       		.uleb128 0x1a
 5618 0182 2E       		.uleb128 0x2e
 5619 0183 01       		.byte	0x1
 5620 0184 03       		.uleb128 0x3
 5621 0185 0E       		.uleb128 0xe
 5622 0186 3A       		.uleb128 0x3a
 5623 0187 0B       		.uleb128 0xb
 5624 0188 3B       		.uleb128 0x3b
 5625 0189 05       		.uleb128 0x5
 5626 018a 27       		.uleb128 0x27
 5627 018b 0C       		.uleb128 0xc
 5628 018c 11       		.uleb128 0x11
 5629 018d 01       		.uleb128 0x1
 5630 018e 12       		.uleb128 0x12
 5631 018f 01       		.uleb128 0x1
 5632 0190 40       		.uleb128 0x40
 5633 0191 06       		.uleb128 0x6
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 148


 5634 0192 9642     		.uleb128 0x2116
 5635 0194 0C       		.uleb128 0xc
 5636 0195 01       		.uleb128 0x1
 5637 0196 13       		.uleb128 0x13
 5638 0197 00       		.byte	0
 5639 0198 00       		.byte	0
 5640 0199 1B       		.uleb128 0x1b
 5641 019a 2E       		.uleb128 0x2e
 5642 019b 01       		.byte	0x1
 5643 019c 03       		.uleb128 0x3
 5644 019d 0E       		.uleb128 0xe
 5645 019e 3A       		.uleb128 0x3a
 5646 019f 0B       		.uleb128 0xb
 5647 01a0 3B       		.uleb128 0x3b
 5648 01a1 05       		.uleb128 0x5
 5649 01a2 27       		.uleb128 0x27
 5650 01a3 0C       		.uleb128 0xc
 5651 01a4 49       		.uleb128 0x49
 5652 01a5 13       		.uleb128 0x13
 5653 01a6 11       		.uleb128 0x11
 5654 01a7 01       		.uleb128 0x1
 5655 01a8 12       		.uleb128 0x12
 5656 01a9 01       		.uleb128 0x1
 5657 01aa 40       		.uleb128 0x40
 5658 01ab 06       		.uleb128 0x6
 5659 01ac 9642     		.uleb128 0x2116
 5660 01ae 0C       		.uleb128 0xc
 5661 01af 01       		.uleb128 0x1
 5662 01b0 13       		.uleb128 0x13
 5663 01b1 00       		.byte	0
 5664 01b2 00       		.byte	0
 5665 01b3 1C       		.uleb128 0x1c
 5666 01b4 2E       		.uleb128 0x2e
 5667 01b5 01       		.byte	0x1
 5668 01b6 03       		.uleb128 0x3
 5669 01b7 0E       		.uleb128 0xe
 5670 01b8 3A       		.uleb128 0x3a
 5671 01b9 0B       		.uleb128 0xb
 5672 01ba 3B       		.uleb128 0x3b
 5673 01bb 05       		.uleb128 0x5
 5674 01bc 27       		.uleb128 0x27
 5675 01bd 0C       		.uleb128 0xc
 5676 01be 49       		.uleb128 0x49
 5677 01bf 13       		.uleb128 0x13
 5678 01c0 11       		.uleb128 0x11
 5679 01c1 01       		.uleb128 0x1
 5680 01c2 12       		.uleb128 0x12
 5681 01c3 01       		.uleb128 0x1
 5682 01c4 40       		.uleb128 0x40
 5683 01c5 06       		.uleb128 0x6
 5684 01c6 9742     		.uleb128 0x2117
 5685 01c8 0C       		.uleb128 0xc
 5686 01c9 01       		.uleb128 0x1
 5687 01ca 13       		.uleb128 0x13
 5688 01cb 00       		.byte	0
 5689 01cc 00       		.byte	0
 5690 01cd 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 149


 5691 01ce 34       		.uleb128 0x34
 5692 01cf 00       		.byte	0
 5693 01d0 03       		.uleb128 0x3
 5694 01d1 0E       		.uleb128 0xe
 5695 01d2 3A       		.uleb128 0x3a
 5696 01d3 0B       		.uleb128 0xb
 5697 01d4 3B       		.uleb128 0x3b
 5698 01d5 0B       		.uleb128 0xb
 5699 01d6 49       		.uleb128 0x49
 5700 01d7 13       		.uleb128 0x13
 5701 01d8 02       		.uleb128 0x2
 5702 01d9 0A       		.uleb128 0xa
 5703 01da 00       		.byte	0
 5704 01db 00       		.byte	0
 5705 01dc 1E       		.uleb128 0x1e
 5706 01dd 34       		.uleb128 0x34
 5707 01de 00       		.byte	0
 5708 01df 03       		.uleb128 0x3
 5709 01e0 0E       		.uleb128 0xe
 5710 01e1 3A       		.uleb128 0x3a
 5711 01e2 0B       		.uleb128 0xb
 5712 01e3 3B       		.uleb128 0x3b
 5713 01e4 0B       		.uleb128 0xb
 5714 01e5 49       		.uleb128 0x49
 5715 01e6 13       		.uleb128 0x13
 5716 01e7 3F       		.uleb128 0x3f
 5717 01e8 0C       		.uleb128 0xc
 5718 01e9 02       		.uleb128 0x2
 5719 01ea 0A       		.uleb128 0xa
 5720 01eb 00       		.byte	0
 5721 01ec 00       		.byte	0
 5722 01ed 00       		.byte	0
 5723              		.section	.debug_loc,"",%progbits
 5724              	.Ldebug_loc0:
 5725              	.LLST0:
 5726 0000 00000000 		.4byte	.LFB0
 5727 0004 02000000 		.4byte	.LCFI0
 5728 0008 0200     		.2byte	0x2
 5729 000a 7D       		.byte	0x7d
 5730 000b 00       		.sleb128 0
 5731 000c 02000000 		.4byte	.LCFI0
 5732 0010 04000000 		.4byte	.LCFI1
 5733 0014 0200     		.2byte	0x2
 5734 0016 7D       		.byte	0x7d
 5735 0017 08       		.sleb128 8
 5736 0018 04000000 		.4byte	.LCFI1
 5737 001c 06000000 		.4byte	.LCFI2
 5738 0020 0200     		.2byte	0x2
 5739 0022 7D       		.byte	0x7d
 5740 0023 30       		.sleb128 48
 5741 0024 06000000 		.4byte	.LCFI2
 5742 0028 5C010000 		.4byte	.LFE0
 5743 002c 0200     		.2byte	0x2
 5744 002e 77       		.byte	0x77
 5745 002f 28       		.sleb128 40
 5746 0030 00000000 		.4byte	0
 5747 0034 00000000 		.4byte	0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 150


 5748              	.LLST1:
 5749 0038 00000000 		.4byte	.LFB1
 5750 003c 02000000 		.4byte	.LCFI3
 5751 0040 0200     		.2byte	0x2
 5752 0042 7D       		.byte	0x7d
 5753 0043 00       		.sleb128 0
 5754 0044 02000000 		.4byte	.LCFI3
 5755 0048 04000000 		.4byte	.LCFI4
 5756 004c 0200     		.2byte	0x2
 5757 004e 7D       		.byte	0x7d
 5758 004f 08       		.sleb128 8
 5759 0050 04000000 		.4byte	.LCFI4
 5760 0054 06000000 		.4byte	.LCFI5
 5761 0058 0200     		.2byte	0x2
 5762 005a 7D       		.byte	0x7d
 5763 005b 18       		.sleb128 24
 5764 005c 06000000 		.4byte	.LCFI5
 5765 0060 A4000000 		.4byte	.LFE1
 5766 0064 0200     		.2byte	0x2
 5767 0066 77       		.byte	0x77
 5768 0067 18       		.sleb128 24
 5769 0068 00000000 		.4byte	0
 5770 006c 00000000 		.4byte	0
 5771              	.LLST2:
 5772 0070 00000000 		.4byte	.LFB2
 5773 0074 02000000 		.4byte	.LCFI6
 5774 0078 0200     		.2byte	0x2
 5775 007a 7D       		.byte	0x7d
 5776 007b 00       		.sleb128 0
 5777 007c 02000000 		.4byte	.LCFI6
 5778 0080 04000000 		.4byte	.LCFI7
 5779 0084 0200     		.2byte	0x2
 5780 0086 7D       		.byte	0x7d
 5781 0087 08       		.sleb128 8
 5782 0088 04000000 		.4byte	.LCFI7
 5783 008c 06000000 		.4byte	.LCFI8
 5784 0090 0200     		.2byte	0x2
 5785 0092 7D       		.byte	0x7d
 5786 0093 20       		.sleb128 32
 5787 0094 06000000 		.4byte	.LCFI8
 5788 0098 A0000000 		.4byte	.LFE2
 5789 009c 0200     		.2byte	0x2
 5790 009e 77       		.byte	0x77
 5791 009f 20       		.sleb128 32
 5792 00a0 00000000 		.4byte	0
 5793 00a4 00000000 		.4byte	0
 5794              	.LLST3:
 5795 00a8 00000000 		.4byte	.LFB3
 5796 00ac 02000000 		.4byte	.LCFI9
 5797 00b0 0200     		.2byte	0x2
 5798 00b2 7D       		.byte	0x7d
 5799 00b3 00       		.sleb128 0
 5800 00b4 02000000 		.4byte	.LCFI9
 5801 00b8 04000000 		.4byte	.LCFI10
 5802 00bc 0200     		.2byte	0x2
 5803 00be 7D       		.byte	0x7d
 5804 00bf 08       		.sleb128 8
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 151


 5805 00c0 04000000 		.4byte	.LCFI10
 5806 00c4 06000000 		.4byte	.LCFI11
 5807 00c8 0200     		.2byte	0x2
 5808 00ca 7D       		.byte	0x7d
 5809 00cb 18       		.sleb128 24
 5810 00cc 06000000 		.4byte	.LCFI11
 5811 00d0 58000000 		.4byte	.LFE3
 5812 00d4 0200     		.2byte	0x2
 5813 00d6 77       		.byte	0x77
 5814 00d7 18       		.sleb128 24
 5815 00d8 00000000 		.4byte	0
 5816 00dc 00000000 		.4byte	0
 5817              	.LLST4:
 5818 00e0 00000000 		.4byte	.LFB4
 5819 00e4 02000000 		.4byte	.LCFI12
 5820 00e8 0200     		.2byte	0x2
 5821 00ea 7D       		.byte	0x7d
 5822 00eb 00       		.sleb128 0
 5823 00ec 02000000 		.4byte	.LCFI12
 5824 00f0 04000000 		.4byte	.LCFI13
 5825 00f4 0200     		.2byte	0x2
 5826 00f6 7D       		.byte	0x7d
 5827 00f7 08       		.sleb128 8
 5828 00f8 04000000 		.4byte	.LCFI13
 5829 00fc 06000000 		.4byte	.LCFI14
 5830 0100 0200     		.2byte	0x2
 5831 0102 7D       		.byte	0x7d
 5832 0103 18       		.sleb128 24
 5833 0104 06000000 		.4byte	.LCFI14
 5834 0108 38000000 		.4byte	.LFE4
 5835 010c 0200     		.2byte	0x2
 5836 010e 77       		.byte	0x77
 5837 010f 18       		.sleb128 24
 5838 0110 00000000 		.4byte	0
 5839 0114 00000000 		.4byte	0
 5840              	.LLST5:
 5841 0118 00000000 		.4byte	.LFB5
 5842 011c 02000000 		.4byte	.LCFI15
 5843 0120 0200     		.2byte	0x2
 5844 0122 7D       		.byte	0x7d
 5845 0123 00       		.sleb128 0
 5846 0124 02000000 		.4byte	.LCFI15
 5847 0128 04000000 		.4byte	.LCFI16
 5848 012c 0200     		.2byte	0x2
 5849 012e 7D       		.byte	0x7d
 5850 012f 08       		.sleb128 8
 5851 0130 04000000 		.4byte	.LCFI16
 5852 0134 06000000 		.4byte	.LCFI17
 5853 0138 0200     		.2byte	0x2
 5854 013a 7D       		.byte	0x7d
 5855 013b 20       		.sleb128 32
 5856 013c 06000000 		.4byte	.LCFI17
 5857 0140 18010000 		.4byte	.LFE5
 5858 0144 0200     		.2byte	0x2
 5859 0146 77       		.byte	0x77
 5860 0147 20       		.sleb128 32
 5861 0148 00000000 		.4byte	0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 152


 5862 014c 00000000 		.4byte	0
 5863              	.LLST6:
 5864 0150 00000000 		.4byte	.LFB6
 5865 0154 02000000 		.4byte	.LCFI18
 5866 0158 0200     		.2byte	0x2
 5867 015a 7D       		.byte	0x7d
 5868 015b 00       		.sleb128 0
 5869 015c 02000000 		.4byte	.LCFI18
 5870 0160 04000000 		.4byte	.LCFI19
 5871 0164 0200     		.2byte	0x2
 5872 0166 7D       		.byte	0x7d
 5873 0167 08       		.sleb128 8
 5874 0168 04000000 		.4byte	.LCFI19
 5875 016c 06000000 		.4byte	.LCFI20
 5876 0170 0200     		.2byte	0x2
 5877 0172 7D       		.byte	0x7d
 5878 0173 18       		.sleb128 24
 5879 0174 06000000 		.4byte	.LCFI20
 5880 0178 A4000000 		.4byte	.LFE6
 5881 017c 0200     		.2byte	0x2
 5882 017e 77       		.byte	0x77
 5883 017f 18       		.sleb128 24
 5884 0180 00000000 		.4byte	0
 5885 0184 00000000 		.4byte	0
 5886              	.LLST7:
 5887 0188 00000000 		.4byte	.LFB7
 5888 018c 02000000 		.4byte	.LCFI21
 5889 0190 0200     		.2byte	0x2
 5890 0192 7D       		.byte	0x7d
 5891 0193 00       		.sleb128 0
 5892 0194 02000000 		.4byte	.LCFI21
 5893 0198 04000000 		.4byte	.LCFI22
 5894 019c 0200     		.2byte	0x2
 5895 019e 7D       		.byte	0x7d
 5896 019f 04       		.sleb128 4
 5897 01a0 04000000 		.4byte	.LCFI22
 5898 01a4 06000000 		.4byte	.LCFI23
 5899 01a8 0200     		.2byte	0x2
 5900 01aa 7D       		.byte	0x7d
 5901 01ab 18       		.sleb128 24
 5902 01ac 06000000 		.4byte	.LCFI23
 5903 01b0 4C000000 		.4byte	.LFE7
 5904 01b4 0200     		.2byte	0x2
 5905 01b6 77       		.byte	0x77
 5906 01b7 18       		.sleb128 24
 5907 01b8 00000000 		.4byte	0
 5908 01bc 00000000 		.4byte	0
 5909              	.LLST8:
 5910 01c0 00000000 		.4byte	.LFB8
 5911 01c4 02000000 		.4byte	.LCFI24
 5912 01c8 0200     		.2byte	0x2
 5913 01ca 7D       		.byte	0x7d
 5914 01cb 00       		.sleb128 0
 5915 01cc 02000000 		.4byte	.LCFI24
 5916 01d0 04000000 		.4byte	.LCFI25
 5917 01d4 0200     		.2byte	0x2
 5918 01d6 7D       		.byte	0x7d
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 153


 5919 01d7 08       		.sleb128 8
 5920 01d8 04000000 		.4byte	.LCFI25
 5921 01dc 06000000 		.4byte	.LCFI26
 5922 01e0 0200     		.2byte	0x2
 5923 01e2 7D       		.byte	0x7d
 5924 01e3 18       		.sleb128 24
 5925 01e4 06000000 		.4byte	.LCFI26
 5926 01e8 98000000 		.4byte	.LFE8
 5927 01ec 0200     		.2byte	0x2
 5928 01ee 77       		.byte	0x77
 5929 01ef 18       		.sleb128 24
 5930 01f0 00000000 		.4byte	0
 5931 01f4 00000000 		.4byte	0
 5932              	.LLST9:
 5933 01f8 00000000 		.4byte	.LFB9
 5934 01fc 02000000 		.4byte	.LCFI27
 5935 0200 0200     		.2byte	0x2
 5936 0202 7D       		.byte	0x7d
 5937 0203 00       		.sleb128 0
 5938 0204 02000000 		.4byte	.LCFI27
 5939 0208 04000000 		.4byte	.LCFI28
 5940 020c 0200     		.2byte	0x2
 5941 020e 7D       		.byte	0x7d
 5942 020f 08       		.sleb128 8
 5943 0210 04000000 		.4byte	.LCFI28
 5944 0214 06000000 		.4byte	.LCFI29
 5945 0218 0200     		.2byte	0x2
 5946 021a 7D       		.byte	0x7d
 5947 021b 20       		.sleb128 32
 5948 021c 06000000 		.4byte	.LCFI29
 5949 0220 BC000000 		.4byte	.LFE9
 5950 0224 0200     		.2byte	0x2
 5951 0226 77       		.byte	0x77
 5952 0227 20       		.sleb128 32
 5953 0228 00000000 		.4byte	0
 5954 022c 00000000 		.4byte	0
 5955              	.LLST10:
 5956 0230 00000000 		.4byte	.LFB10
 5957 0234 02000000 		.4byte	.LCFI30
 5958 0238 0200     		.2byte	0x2
 5959 023a 7D       		.byte	0x7d
 5960 023b 00       		.sleb128 0
 5961 023c 02000000 		.4byte	.LCFI30
 5962 0240 04000000 		.4byte	.LCFI31
 5963 0244 0200     		.2byte	0x2
 5964 0246 7D       		.byte	0x7d
 5965 0247 08       		.sleb128 8
 5966 0248 04000000 		.4byte	.LCFI31
 5967 024c 06000000 		.4byte	.LCFI32
 5968 0250 0200     		.2byte	0x2
 5969 0252 7D       		.byte	0x7d
 5970 0253 20       		.sleb128 32
 5971 0254 06000000 		.4byte	.LCFI32
 5972 0258 68000000 		.4byte	.LFE10
 5973 025c 0200     		.2byte	0x2
 5974 025e 77       		.byte	0x77
 5975 025f 10       		.sleb128 16
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 154


 5976 0260 00000000 		.4byte	0
 5977 0264 00000000 		.4byte	0
 5978              	.LLST11:
 5979 0268 00000000 		.4byte	.LFB11
 5980 026c 02000000 		.4byte	.LCFI33
 5981 0270 0200     		.2byte	0x2
 5982 0272 7D       		.byte	0x7d
 5983 0273 00       		.sleb128 0
 5984 0274 02000000 		.4byte	.LCFI33
 5985 0278 04000000 		.4byte	.LCFI34
 5986 027c 0200     		.2byte	0x2
 5987 027e 7D       		.byte	0x7d
 5988 027f 08       		.sleb128 8
 5989 0280 04000000 		.4byte	.LCFI34
 5990 0284 1C000000 		.4byte	.LFE11
 5991 0288 0200     		.2byte	0x2
 5992 028a 77       		.byte	0x77
 5993 028b 08       		.sleb128 8
 5994 028c 00000000 		.4byte	0
 5995 0290 00000000 		.4byte	0
 5996              	.LLST12:
 5997 0294 00000000 		.4byte	.LFB12
 5998 0298 02000000 		.4byte	.LCFI35
 5999 029c 0200     		.2byte	0x2
 6000 029e 7D       		.byte	0x7d
 6001 029f 00       		.sleb128 0
 6002 02a0 02000000 		.4byte	.LCFI35
 6003 02a4 04000000 		.4byte	.LCFI36
 6004 02a8 0200     		.2byte	0x2
 6005 02aa 7D       		.byte	0x7d
 6006 02ab 04       		.sleb128 4
 6007 02ac 04000000 		.4byte	.LCFI36
 6008 02b0 1C000000 		.4byte	.LFE12
 6009 02b4 0200     		.2byte	0x2
 6010 02b6 77       		.byte	0x77
 6011 02b7 04       		.sleb128 4
 6012 02b8 00000000 		.4byte	0
 6013 02bc 00000000 		.4byte	0
 6014              	.LLST13:
 6015 02c0 00000000 		.4byte	.LFB13
 6016 02c4 02000000 		.4byte	.LCFI37
 6017 02c8 0200     		.2byte	0x2
 6018 02ca 7D       		.byte	0x7d
 6019 02cb 00       		.sleb128 0
 6020 02cc 02000000 		.4byte	.LCFI37
 6021 02d0 04000000 		.4byte	.LCFI38
 6022 02d4 0200     		.2byte	0x2
 6023 02d6 7D       		.byte	0x7d
 6024 02d7 0C       		.sleb128 12
 6025 02d8 04000000 		.4byte	.LCFI38
 6026 02dc 06000000 		.4byte	.LCFI39
 6027 02e0 0200     		.2byte	0x2
 6028 02e2 7D       		.byte	0x7d
 6029 02e3 18       		.sleb128 24
 6030 02e4 06000000 		.4byte	.LCFI39
 6031 02e8 10010000 		.4byte	.LFE13
 6032 02ec 0200     		.2byte	0x2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 155


 6033 02ee 77       		.byte	0x77
 6034 02ef 18       		.sleb128 24
 6035 02f0 00000000 		.4byte	0
 6036 02f4 00000000 		.4byte	0
 6037              	.LLST14:
 6038 02f8 00000000 		.4byte	.LFB14
 6039 02fc 02000000 		.4byte	.LCFI40
 6040 0300 0200     		.2byte	0x2
 6041 0302 7D       		.byte	0x7d
 6042 0303 00       		.sleb128 0
 6043 0304 02000000 		.4byte	.LCFI40
 6044 0308 04000000 		.4byte	.LCFI41
 6045 030c 0200     		.2byte	0x2
 6046 030e 7D       		.byte	0x7d
 6047 030f 08       		.sleb128 8
 6048 0310 04000000 		.4byte	.LCFI41
 6049 0314 06000000 		.4byte	.LCFI42
 6050 0318 0200     		.2byte	0x2
 6051 031a 7D       		.byte	0x7d
 6052 031b 10       		.sleb128 16
 6053 031c 06000000 		.4byte	.LCFI42
 6054 0320 24000000 		.4byte	.LFE14
 6055 0324 0200     		.2byte	0x2
 6056 0326 77       		.byte	0x77
 6057 0327 10       		.sleb128 16
 6058 0328 00000000 		.4byte	0
 6059 032c 00000000 		.4byte	0
 6060              	.LLST15:
 6061 0330 00000000 		.4byte	.LFB15
 6062 0334 02000000 		.4byte	.LCFI43
 6063 0338 0200     		.2byte	0x2
 6064 033a 7D       		.byte	0x7d
 6065 033b 00       		.sleb128 0
 6066 033c 02000000 		.4byte	.LCFI43
 6067 0340 04000000 		.4byte	.LCFI44
 6068 0344 0200     		.2byte	0x2
 6069 0346 7D       		.byte	0x7d
 6070 0347 08       		.sleb128 8
 6071 0348 04000000 		.4byte	.LCFI44
 6072 034c 06000000 		.4byte	.LCFI45
 6073 0350 0200     		.2byte	0x2
 6074 0352 7D       		.byte	0x7d
 6075 0353 10       		.sleb128 16
 6076 0354 06000000 		.4byte	.LCFI45
 6077 0358 28000000 		.4byte	.LFE15
 6078 035c 0200     		.2byte	0x2
 6079 035e 77       		.byte	0x77
 6080 035f 10       		.sleb128 16
 6081 0360 00000000 		.4byte	0
 6082 0364 00000000 		.4byte	0
 6083              	.LLST16:
 6084 0368 00000000 		.4byte	.LFB16
 6085 036c 02000000 		.4byte	.LCFI46
 6086 0370 0200     		.2byte	0x2
 6087 0372 7D       		.byte	0x7d
 6088 0373 00       		.sleb128 0
 6089 0374 02000000 		.4byte	.LCFI46
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 156


 6090 0378 04000000 		.4byte	.LCFI47
 6091 037c 0200     		.2byte	0x2
 6092 037e 7D       		.byte	0x7d
 6093 037f 04       		.sleb128 4
 6094 0380 04000000 		.4byte	.LCFI47
 6095 0384 14000000 		.4byte	.LFE16
 6096 0388 0200     		.2byte	0x2
 6097 038a 77       		.byte	0x77
 6098 038b 04       		.sleb128 4
 6099 038c 00000000 		.4byte	0
 6100 0390 00000000 		.4byte	0
 6101              	.LLST17:
 6102 0394 00000000 		.4byte	.LFB17
 6103 0398 02000000 		.4byte	.LCFI48
 6104 039c 0200     		.2byte	0x2
 6105 039e 7D       		.byte	0x7d
 6106 039f 00       		.sleb128 0
 6107 03a0 02000000 		.4byte	.LCFI48
 6108 03a4 04000000 		.4byte	.LCFI49
 6109 03a8 0200     		.2byte	0x2
 6110 03aa 7D       		.byte	0x7d
 6111 03ab 08       		.sleb128 8
 6112 03ac 04000000 		.4byte	.LCFI49
 6113 03b0 06000000 		.4byte	.LCFI50
 6114 03b4 0200     		.2byte	0x2
 6115 03b6 7D       		.byte	0x7d
 6116 03b7 18       		.sleb128 24
 6117 03b8 06000000 		.4byte	.LCFI50
 6118 03bc 3C010000 		.4byte	.LFE17
 6119 03c0 0200     		.2byte	0x2
 6120 03c2 77       		.byte	0x77
 6121 03c3 18       		.sleb128 24
 6122 03c4 00000000 		.4byte	0
 6123 03c8 00000000 		.4byte	0
 6124              	.LLST18:
 6125 03cc 00000000 		.4byte	.LFB18
 6126 03d0 02000000 		.4byte	.LCFI51
 6127 03d4 0200     		.2byte	0x2
 6128 03d6 7D       		.byte	0x7d
 6129 03d7 00       		.sleb128 0
 6130 03d8 02000000 		.4byte	.LCFI51
 6131 03dc 04000000 		.4byte	.LCFI52
 6132 03e0 0200     		.2byte	0x2
 6133 03e2 7D       		.byte	0x7d
 6134 03e3 08       		.sleb128 8
 6135 03e4 04000000 		.4byte	.LCFI52
 6136 03e8 06000000 		.4byte	.LCFI53
 6137 03ec 0200     		.2byte	0x2
 6138 03ee 7D       		.byte	0x7d
 6139 03ef 10       		.sleb128 16
 6140 03f0 06000000 		.4byte	.LCFI53
 6141 03f4 F4000000 		.4byte	.LFE18
 6142 03f8 0200     		.2byte	0x2
 6143 03fa 77       		.byte	0x77
 6144 03fb 10       		.sleb128 16
 6145 03fc 00000000 		.4byte	0
 6146 0400 00000000 		.4byte	0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 157


 6147              	.LLST19:
 6148 0404 00000000 		.4byte	.LFB19
 6149 0408 02000000 		.4byte	.LCFI54
 6150 040c 0200     		.2byte	0x2
 6151 040e 7D       		.byte	0x7d
 6152 040f 00       		.sleb128 0
 6153 0410 02000000 		.4byte	.LCFI54
 6154 0414 04000000 		.4byte	.LCFI55
 6155 0418 0200     		.2byte	0x2
 6156 041a 7D       		.byte	0x7d
 6157 041b 08       		.sleb128 8
 6158 041c 04000000 		.4byte	.LCFI55
 6159 0420 06000000 		.4byte	.LCFI56
 6160 0424 0200     		.2byte	0x2
 6161 0426 7D       		.byte	0x7d
 6162 0427 18       		.sleb128 24
 6163 0428 06000000 		.4byte	.LCFI56
 6164 042c 68000000 		.4byte	.LFE19
 6165 0430 0200     		.2byte	0x2
 6166 0432 77       		.byte	0x77
 6167 0433 18       		.sleb128 24
 6168 0434 00000000 		.4byte	0
 6169 0438 00000000 		.4byte	0
 6170              	.LLST20:
 6171 043c 00000000 		.4byte	.LFB20
 6172 0440 02000000 		.4byte	.LCFI57
 6173 0444 0200     		.2byte	0x2
 6174 0446 7D       		.byte	0x7d
 6175 0447 00       		.sleb128 0
 6176 0448 02000000 		.4byte	.LCFI57
 6177 044c 04000000 		.4byte	.LCFI58
 6178 0450 0200     		.2byte	0x2
 6179 0452 7D       		.byte	0x7d
 6180 0453 08       		.sleb128 8
 6181 0454 04000000 		.4byte	.LCFI58
 6182 0458 06000000 		.4byte	.LCFI59
 6183 045c 0200     		.2byte	0x2
 6184 045e 7D       		.byte	0x7d
 6185 045f 18       		.sleb128 24
 6186 0460 06000000 		.4byte	.LCFI59
 6187 0464 B4000000 		.4byte	.LFE20
 6188 0468 0200     		.2byte	0x2
 6189 046a 77       		.byte	0x77
 6190 046b 18       		.sleb128 24
 6191 046c 00000000 		.4byte	0
 6192 0470 00000000 		.4byte	0
 6193              	.LLST21:
 6194 0474 00000000 		.4byte	.LFB21
 6195 0478 02000000 		.4byte	.LCFI60
 6196 047c 0200     		.2byte	0x2
 6197 047e 7D       		.byte	0x7d
 6198 047f 00       		.sleb128 0
 6199 0480 02000000 		.4byte	.LCFI60
 6200 0484 04000000 		.4byte	.LCFI61
 6201 0488 0200     		.2byte	0x2
 6202 048a 7D       		.byte	0x7d
 6203 048b 04       		.sleb128 4
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 158


 6204 048c 04000000 		.4byte	.LCFI61
 6205 0490 06000000 		.4byte	.LCFI62
 6206 0494 0200     		.2byte	0x2
 6207 0496 7D       		.byte	0x7d
 6208 0497 10       		.sleb128 16
 6209 0498 06000000 		.4byte	.LCFI62
 6210 049c 2C000000 		.4byte	.LFE21
 6211 04a0 0200     		.2byte	0x2
 6212 04a2 77       		.byte	0x77
 6213 04a3 10       		.sleb128 16
 6214 04a4 00000000 		.4byte	0
 6215 04a8 00000000 		.4byte	0
 6216              	.LLST22:
 6217 04ac 00000000 		.4byte	.LFB22
 6218 04b0 02000000 		.4byte	.LCFI63
 6219 04b4 0200     		.2byte	0x2
 6220 04b6 7D       		.byte	0x7d
 6221 04b7 00       		.sleb128 0
 6222 04b8 02000000 		.4byte	.LCFI63
 6223 04bc 04000000 		.4byte	.LCFI64
 6224 04c0 0200     		.2byte	0x2
 6225 04c2 7D       		.byte	0x7d
 6226 04c3 08       		.sleb128 8
 6227 04c4 04000000 		.4byte	.LCFI64
 6228 04c8 06000000 		.4byte	.LCFI65
 6229 04cc 0200     		.2byte	0x2
 6230 04ce 7D       		.byte	0x7d
 6231 04cf 18       		.sleb128 24
 6232 04d0 06000000 		.4byte	.LCFI65
 6233 04d4 94000000 		.4byte	.LFE22
 6234 04d8 0200     		.2byte	0x2
 6235 04da 77       		.byte	0x77
 6236 04db 18       		.sleb128 24
 6237 04dc 00000000 		.4byte	0
 6238 04e0 00000000 		.4byte	0
 6239              	.LLST23:
 6240 04e4 00000000 		.4byte	.LFB23
 6241 04e8 02000000 		.4byte	.LCFI66
 6242 04ec 0200     		.2byte	0x2
 6243 04ee 7D       		.byte	0x7d
 6244 04ef 00       		.sleb128 0
 6245 04f0 02000000 		.4byte	.LCFI66
 6246 04f4 04000000 		.4byte	.LCFI67
 6247 04f8 0200     		.2byte	0x2
 6248 04fa 7D       		.byte	0x7d
 6249 04fb 04       		.sleb128 4
 6250 04fc 04000000 		.4byte	.LCFI67
 6251 0500 18000000 		.4byte	.LFE23
 6252 0504 0200     		.2byte	0x2
 6253 0506 77       		.byte	0x77
 6254 0507 04       		.sleb128 4
 6255 0508 00000000 		.4byte	0
 6256 050c 00000000 		.4byte	0
 6257              	.LLST24:
 6258 0510 00000000 		.4byte	.LFB24
 6259 0514 02000000 		.4byte	.LCFI68
 6260 0518 0200     		.2byte	0x2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 159


 6261 051a 7D       		.byte	0x7d
 6262 051b 00       		.sleb128 0
 6263 051c 02000000 		.4byte	.LCFI68
 6264 0520 04000000 		.4byte	.LCFI69
 6265 0524 0200     		.2byte	0x2
 6266 0526 7D       		.byte	0x7d
 6267 0527 08       		.sleb128 8
 6268 0528 04000000 		.4byte	.LCFI69
 6269 052c 06000000 		.4byte	.LCFI70
 6270 0530 0200     		.2byte	0x2
 6271 0532 7D       		.byte	0x7d
 6272 0533 10       		.sleb128 16
 6273 0534 06000000 		.4byte	.LCFI70
 6274 0538 24000000 		.4byte	.LFE24
 6275 053c 0200     		.2byte	0x2
 6276 053e 77       		.byte	0x77
 6277 053f 10       		.sleb128 16
 6278 0540 00000000 		.4byte	0
 6279 0544 00000000 		.4byte	0
 6280              	.LLST25:
 6281 0548 00000000 		.4byte	.LFB25
 6282 054c 02000000 		.4byte	.LCFI71
 6283 0550 0200     		.2byte	0x2
 6284 0552 7D       		.byte	0x7d
 6285 0553 00       		.sleb128 0
 6286 0554 02000000 		.4byte	.LCFI71
 6287 0558 04000000 		.4byte	.LCFI72
 6288 055c 0200     		.2byte	0x2
 6289 055e 7D       		.byte	0x7d
 6290 055f 08       		.sleb128 8
 6291 0560 04000000 		.4byte	.LCFI72
 6292 0564 06000000 		.4byte	.LCFI73
 6293 0568 0200     		.2byte	0x2
 6294 056a 7D       		.byte	0x7d
 6295 056b 18       		.sleb128 24
 6296 056c 06000000 		.4byte	.LCFI73
 6297 0570 78000000 		.4byte	.LFE25
 6298 0574 0200     		.2byte	0x2
 6299 0576 77       		.byte	0x77
 6300 0577 18       		.sleb128 24
 6301 0578 00000000 		.4byte	0
 6302 057c 00000000 		.4byte	0
 6303              	.LLST26:
 6304 0580 00000000 		.4byte	.LFB26
 6305 0584 02000000 		.4byte	.LCFI74
 6306 0588 0200     		.2byte	0x2
 6307 058a 7D       		.byte	0x7d
 6308 058b 00       		.sleb128 0
 6309 058c 02000000 		.4byte	.LCFI74
 6310 0590 04000000 		.4byte	.LCFI75
 6311 0594 0200     		.2byte	0x2
 6312 0596 7D       		.byte	0x7d
 6313 0597 08       		.sleb128 8
 6314 0598 04000000 		.4byte	.LCFI75
 6315 059c 06000000 		.4byte	.LCFI76
 6316 05a0 0200     		.2byte	0x2
 6317 05a2 7D       		.byte	0x7d
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 160


 6318 05a3 10       		.sleb128 16
 6319 05a4 06000000 		.4byte	.LCFI76
 6320 05a8 88000000 		.4byte	.LFE26
 6321 05ac 0200     		.2byte	0x2
 6322 05ae 77       		.byte	0x77
 6323 05af 10       		.sleb128 16
 6324 05b0 00000000 		.4byte	0
 6325 05b4 00000000 		.4byte	0
 6326              	.LLST27:
 6327 05b8 00000000 		.4byte	.LFB27
 6328 05bc 02000000 		.4byte	.LCFI77
 6329 05c0 0200     		.2byte	0x2
 6330 05c2 7D       		.byte	0x7d
 6331 05c3 00       		.sleb128 0
 6332 05c4 02000000 		.4byte	.LCFI77
 6333 05c8 04000000 		.4byte	.LCFI78
 6334 05cc 0200     		.2byte	0x2
 6335 05ce 7D       		.byte	0x7d
 6336 05cf 08       		.sleb128 8
 6337 05d0 04000000 		.4byte	.LCFI78
 6338 05d4 06000000 		.4byte	.LCFI79
 6339 05d8 0200     		.2byte	0x2
 6340 05da 7D       		.byte	0x7d
 6341 05db 10       		.sleb128 16
 6342 05dc 06000000 		.4byte	.LCFI79
 6343 05e0 7C000000 		.4byte	.LFE27
 6344 05e4 0200     		.2byte	0x2
 6345 05e6 77       		.byte	0x77
 6346 05e7 10       		.sleb128 16
 6347 05e8 00000000 		.4byte	0
 6348 05ec 00000000 		.4byte	0
 6349              	.LLST28:
 6350 05f0 00000000 		.4byte	.LFB28
 6351 05f4 02000000 		.4byte	.LCFI80
 6352 05f8 0200     		.2byte	0x2
 6353 05fa 7D       		.byte	0x7d
 6354 05fb 00       		.sleb128 0
 6355 05fc 02000000 		.4byte	.LCFI80
 6356 0600 04000000 		.4byte	.LCFI81
 6357 0604 0200     		.2byte	0x2
 6358 0606 7D       		.byte	0x7d
 6359 0607 08       		.sleb128 8
 6360 0608 04000000 		.4byte	.LCFI81
 6361 060c 06000000 		.4byte	.LCFI82
 6362 0610 0200     		.2byte	0x2
 6363 0612 7D       		.byte	0x7d
 6364 0613 10       		.sleb128 16
 6365 0614 06000000 		.4byte	.LCFI82
 6366 0618 70000000 		.4byte	.LFE28
 6367 061c 0200     		.2byte	0x2
 6368 061e 77       		.byte	0x77
 6369 061f 10       		.sleb128 16
 6370 0620 00000000 		.4byte	0
 6371 0624 00000000 		.4byte	0
 6372              	.LLST29:
 6373 0628 00000000 		.4byte	.LFB29
 6374 062c 02000000 		.4byte	.LCFI83
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 161


 6375 0630 0200     		.2byte	0x2
 6376 0632 7D       		.byte	0x7d
 6377 0633 00       		.sleb128 0
 6378 0634 02000000 		.4byte	.LCFI83
 6379 0638 04000000 		.4byte	.LCFI84
 6380 063c 0200     		.2byte	0x2
 6381 063e 7D       		.byte	0x7d
 6382 063f 08       		.sleb128 8
 6383 0640 04000000 		.4byte	.LCFI84
 6384 0644 06000000 		.4byte	.LCFI85
 6385 0648 0200     		.2byte	0x2
 6386 064a 7D       		.byte	0x7d
 6387 064b 18       		.sleb128 24
 6388 064c 06000000 		.4byte	.LCFI85
 6389 0650 70000000 		.4byte	.LFE29
 6390 0654 0200     		.2byte	0x2
 6391 0656 77       		.byte	0x77
 6392 0657 18       		.sleb128 24
 6393 0658 00000000 		.4byte	0
 6394 065c 00000000 		.4byte	0
 6395              	.LLST30:
 6396 0660 00000000 		.4byte	.LFB30
 6397 0664 02000000 		.4byte	.LCFI86
 6398 0668 0200     		.2byte	0x2
 6399 066a 7D       		.byte	0x7d
 6400 066b 00       		.sleb128 0
 6401 066c 02000000 		.4byte	.LCFI86
 6402 0670 04000000 		.4byte	.LCFI87
 6403 0674 0200     		.2byte	0x2
 6404 0676 7D       		.byte	0x7d
 6405 0677 08       		.sleb128 8
 6406 0678 04000000 		.4byte	.LCFI87
 6407 067c 06000000 		.4byte	.LCFI88
 6408 0680 0200     		.2byte	0x2
 6409 0682 7D       		.byte	0x7d
 6410 0683 10       		.sleb128 16
 6411 0684 06000000 		.4byte	.LCFI88
 6412 0688 38000000 		.4byte	.LFE30
 6413 068c 0200     		.2byte	0x2
 6414 068e 77       		.byte	0x77
 6415 068f 10       		.sleb128 16
 6416 0690 00000000 		.4byte	0
 6417 0694 00000000 		.4byte	0
 6418              	.LLST31:
 6419 0698 00000000 		.4byte	.LFB31
 6420 069c 02000000 		.4byte	.LCFI89
 6421 06a0 0200     		.2byte	0x2
 6422 06a2 7D       		.byte	0x7d
 6423 06a3 00       		.sleb128 0
 6424 06a4 02000000 		.4byte	.LCFI89
 6425 06a8 04000000 		.4byte	.LCFI90
 6426 06ac 0200     		.2byte	0x2
 6427 06ae 7D       		.byte	0x7d
 6428 06af 08       		.sleb128 8
 6429 06b0 04000000 		.4byte	.LCFI90
 6430 06b4 06000000 		.4byte	.LCFI91
 6431 06b8 0200     		.2byte	0x2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 162


 6432 06ba 7D       		.byte	0x7d
 6433 06bb 20       		.sleb128 32
 6434 06bc 06000000 		.4byte	.LCFI91
 6435 06c0 38000000 		.4byte	.LFE31
 6436 06c4 0200     		.2byte	0x2
 6437 06c6 77       		.byte	0x77
 6438 06c7 20       		.sleb128 32
 6439 06c8 00000000 		.4byte	0
 6440 06cc 00000000 		.4byte	0
 6441              	.LLST32:
 6442 06d0 00000000 		.4byte	.LFB32
 6443 06d4 02000000 		.4byte	.LCFI92
 6444 06d8 0200     		.2byte	0x2
 6445 06da 7D       		.byte	0x7d
 6446 06db 00       		.sleb128 0
 6447 06dc 02000000 		.4byte	.LCFI92
 6448 06e0 04000000 		.4byte	.LCFI93
 6449 06e4 0200     		.2byte	0x2
 6450 06e6 7D       		.byte	0x7d
 6451 06e7 08       		.sleb128 8
 6452 06e8 04000000 		.4byte	.LCFI93
 6453 06ec 06000000 		.4byte	.LCFI94
 6454 06f0 0200     		.2byte	0x2
 6455 06f2 7D       		.byte	0x7d
 6456 06f3 10       		.sleb128 16
 6457 06f4 06000000 		.4byte	.LCFI94
 6458 06f8 20000000 		.4byte	.LFE32
 6459 06fc 0200     		.2byte	0x2
 6460 06fe 77       		.byte	0x77
 6461 06ff 10       		.sleb128 16
 6462 0700 00000000 		.4byte	0
 6463 0704 00000000 		.4byte	0
 6464              	.LLST33:
 6465 0708 00000000 		.4byte	.LFB33
 6466 070c 02000000 		.4byte	.LCFI95
 6467 0710 0200     		.2byte	0x2
 6468 0712 7D       		.byte	0x7d
 6469 0713 00       		.sleb128 0
 6470 0714 02000000 		.4byte	.LCFI95
 6471 0718 04000000 		.4byte	.LCFI96
 6472 071c 0200     		.2byte	0x2
 6473 071e 7D       		.byte	0x7d
 6474 071f 04       		.sleb128 4
 6475 0720 04000000 		.4byte	.LCFI96
 6476 0724 06000000 		.4byte	.LCFI97
 6477 0728 0200     		.2byte	0x2
 6478 072a 7D       		.byte	0x7d
 6479 072b 10       		.sleb128 16
 6480 072c 06000000 		.4byte	.LCFI97
 6481 0730 20000000 		.4byte	.LFE33
 6482 0734 0200     		.2byte	0x2
 6483 0736 77       		.byte	0x77
 6484 0737 10       		.sleb128 16
 6485 0738 00000000 		.4byte	0
 6486 073c 00000000 		.4byte	0
 6487              	.LLST34:
 6488 0740 00000000 		.4byte	.LFB34
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 163


 6489 0744 02000000 		.4byte	.LCFI98
 6490 0748 0200     		.2byte	0x2
 6491 074a 7D       		.byte	0x7d
 6492 074b 00       		.sleb128 0
 6493 074c 02000000 		.4byte	.LCFI98
 6494 0750 04000000 		.4byte	.LCFI99
 6495 0754 0200     		.2byte	0x2
 6496 0756 7D       		.byte	0x7d
 6497 0757 08       		.sleb128 8
 6498 0758 04000000 		.4byte	.LCFI99
 6499 075c 06000000 		.4byte	.LCFI100
 6500 0760 0200     		.2byte	0x2
 6501 0762 7D       		.byte	0x7d
 6502 0763 18       		.sleb128 24
 6503 0764 06000000 		.4byte	.LCFI100
 6504 0768 B8000000 		.4byte	.LFE34
 6505 076c 0200     		.2byte	0x2
 6506 076e 77       		.byte	0x77
 6507 076f 18       		.sleb128 24
 6508 0770 00000000 		.4byte	0
 6509 0774 00000000 		.4byte	0
 6510              	.LLST35:
 6511 0778 00000000 		.4byte	.LFB35
 6512 077c 02000000 		.4byte	.LCFI101
 6513 0780 0200     		.2byte	0x2
 6514 0782 7D       		.byte	0x7d
 6515 0783 00       		.sleb128 0
 6516 0784 02000000 		.4byte	.LCFI101
 6517 0788 04000000 		.4byte	.LCFI102
 6518 078c 0200     		.2byte	0x2
 6519 078e 7D       		.byte	0x7d
 6520 078f 08       		.sleb128 8
 6521 0790 04000000 		.4byte	.LCFI102
 6522 0794 06000000 		.4byte	.LCFI103
 6523 0798 0200     		.2byte	0x2
 6524 079a 7D       		.byte	0x7d
 6525 079b 18       		.sleb128 24
 6526 079c 06000000 		.4byte	.LCFI103
 6527 07a0 84000000 		.4byte	.LFE35
 6528 07a4 0200     		.2byte	0x2
 6529 07a6 77       		.byte	0x77
 6530 07a7 18       		.sleb128 24
 6531 07a8 00000000 		.4byte	0
 6532 07ac 00000000 		.4byte	0
 6533              		.section	.debug_aranges,"",%progbits
 6534 0000 34010000 		.4byte	0x134
 6535 0004 0200     		.2byte	0x2
 6536 0006 00000000 		.4byte	.Ldebug_info0
 6537 000a 04       		.byte	0x4
 6538 000b 00       		.byte	0
 6539 000c 0000     		.2byte	0
 6540 000e 0000     		.2byte	0
 6541 0010 00000000 		.4byte	.LFB0
 6542 0014 5C010000 		.4byte	.LFE0-.LFB0
 6543 0018 00000000 		.4byte	.LFB1
 6544 001c A4000000 		.4byte	.LFE1-.LFB1
 6545 0020 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 164


 6546 0024 A0000000 		.4byte	.LFE2-.LFB2
 6547 0028 00000000 		.4byte	.LFB3
 6548 002c 58000000 		.4byte	.LFE3-.LFB3
 6549 0030 00000000 		.4byte	.LFB4
 6550 0034 38000000 		.4byte	.LFE4-.LFB4
 6551 0038 00000000 		.4byte	.LFB5
 6552 003c 18010000 		.4byte	.LFE5-.LFB5
 6553 0040 00000000 		.4byte	.LFB6
 6554 0044 A4000000 		.4byte	.LFE6-.LFB6
 6555 0048 00000000 		.4byte	.LFB7
 6556 004c 4C000000 		.4byte	.LFE7-.LFB7
 6557 0050 00000000 		.4byte	.LFB8
 6558 0054 98000000 		.4byte	.LFE8-.LFB8
 6559 0058 00000000 		.4byte	.LFB9
 6560 005c BC000000 		.4byte	.LFE9-.LFB9
 6561 0060 00000000 		.4byte	.LFB10
 6562 0064 68000000 		.4byte	.LFE10-.LFB10
 6563 0068 00000000 		.4byte	.LFB11
 6564 006c 1C000000 		.4byte	.LFE11-.LFB11
 6565 0070 00000000 		.4byte	.LFB12
 6566 0074 1C000000 		.4byte	.LFE12-.LFB12
 6567 0078 00000000 		.4byte	.LFB13
 6568 007c 10010000 		.4byte	.LFE13-.LFB13
 6569 0080 00000000 		.4byte	.LFB14
 6570 0084 24000000 		.4byte	.LFE14-.LFB14
 6571 0088 00000000 		.4byte	.LFB15
 6572 008c 28000000 		.4byte	.LFE15-.LFB15
 6573 0090 00000000 		.4byte	.LFB16
 6574 0094 14000000 		.4byte	.LFE16-.LFB16
 6575 0098 00000000 		.4byte	.LFB17
 6576 009c 3C010000 		.4byte	.LFE17-.LFB17
 6577 00a0 00000000 		.4byte	.LFB18
 6578 00a4 F4000000 		.4byte	.LFE18-.LFB18
 6579 00a8 00000000 		.4byte	.LFB19
 6580 00ac 68000000 		.4byte	.LFE19-.LFB19
 6581 00b0 00000000 		.4byte	.LFB20
 6582 00b4 B4000000 		.4byte	.LFE20-.LFB20
 6583 00b8 00000000 		.4byte	.LFB21
 6584 00bc 2C000000 		.4byte	.LFE21-.LFB21
 6585 00c0 00000000 		.4byte	.LFB22
 6586 00c4 94000000 		.4byte	.LFE22-.LFB22
 6587 00c8 00000000 		.4byte	.LFB23
 6588 00cc 18000000 		.4byte	.LFE23-.LFB23
 6589 00d0 00000000 		.4byte	.LFB24
 6590 00d4 24000000 		.4byte	.LFE24-.LFB24
 6591 00d8 00000000 		.4byte	.LFB25
 6592 00dc 78000000 		.4byte	.LFE25-.LFB25
 6593 00e0 00000000 		.4byte	.LFB26
 6594 00e4 88000000 		.4byte	.LFE26-.LFB26
 6595 00e8 00000000 		.4byte	.LFB27
 6596 00ec 7C000000 		.4byte	.LFE27-.LFB27
 6597 00f0 00000000 		.4byte	.LFB28
 6598 00f4 70000000 		.4byte	.LFE28-.LFB28
 6599 00f8 00000000 		.4byte	.LFB29
 6600 00fc 70000000 		.4byte	.LFE29-.LFB29
 6601 0100 00000000 		.4byte	.LFB30
 6602 0104 38000000 		.4byte	.LFE30-.LFB30
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 165


 6603 0108 00000000 		.4byte	.LFB31
 6604 010c 38000000 		.4byte	.LFE31-.LFB31
 6605 0110 00000000 		.4byte	.LFB32
 6606 0114 20000000 		.4byte	.LFE32-.LFB32
 6607 0118 00000000 		.4byte	.LFB33
 6608 011c 20000000 		.4byte	.LFE33-.LFB33
 6609 0120 00000000 		.4byte	.LFB34
 6610 0124 B8000000 		.4byte	.LFE34-.LFB34
 6611 0128 00000000 		.4byte	.LFB35
 6612 012c 84000000 		.4byte	.LFE35-.LFB35
 6613 0130 00000000 		.4byte	0
 6614 0134 00000000 		.4byte	0
 6615              		.section	.debug_ranges,"",%progbits
 6616              	.Ldebug_ranges0:
 6617 0000 00000000 		.4byte	.LFB0
 6618 0004 5C010000 		.4byte	.LFE0
 6619 0008 00000000 		.4byte	.LFB1
 6620 000c A4000000 		.4byte	.LFE1
 6621 0010 00000000 		.4byte	.LFB2
 6622 0014 A0000000 		.4byte	.LFE2
 6623 0018 00000000 		.4byte	.LFB3
 6624 001c 58000000 		.4byte	.LFE3
 6625 0020 00000000 		.4byte	.LFB4
 6626 0024 38000000 		.4byte	.LFE4
 6627 0028 00000000 		.4byte	.LFB5
 6628 002c 18010000 		.4byte	.LFE5
 6629 0030 00000000 		.4byte	.LFB6
 6630 0034 A4000000 		.4byte	.LFE6
 6631 0038 00000000 		.4byte	.LFB7
 6632 003c 4C000000 		.4byte	.LFE7
 6633 0040 00000000 		.4byte	.LFB8
 6634 0044 98000000 		.4byte	.LFE8
 6635 0048 00000000 		.4byte	.LFB9
 6636 004c BC000000 		.4byte	.LFE9
 6637 0050 00000000 		.4byte	.LFB10
 6638 0054 68000000 		.4byte	.LFE10
 6639 0058 00000000 		.4byte	.LFB11
 6640 005c 1C000000 		.4byte	.LFE11
 6641 0060 00000000 		.4byte	.LFB12
 6642 0064 1C000000 		.4byte	.LFE12
 6643 0068 00000000 		.4byte	.LFB13
 6644 006c 10010000 		.4byte	.LFE13
 6645 0070 00000000 		.4byte	.LFB14
 6646 0074 24000000 		.4byte	.LFE14
 6647 0078 00000000 		.4byte	.LFB15
 6648 007c 28000000 		.4byte	.LFE15
 6649 0080 00000000 		.4byte	.LFB16
 6650 0084 14000000 		.4byte	.LFE16
 6651 0088 00000000 		.4byte	.LFB17
 6652 008c 3C010000 		.4byte	.LFE17
 6653 0090 00000000 		.4byte	.LFB18
 6654 0094 F4000000 		.4byte	.LFE18
 6655 0098 00000000 		.4byte	.LFB19
 6656 009c 68000000 		.4byte	.LFE19
 6657 00a0 00000000 		.4byte	.LFB20
 6658 00a4 B4000000 		.4byte	.LFE20
 6659 00a8 00000000 		.4byte	.LFB21
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 166


 6660 00ac 2C000000 		.4byte	.LFE21
 6661 00b0 00000000 		.4byte	.LFB22
 6662 00b4 94000000 		.4byte	.LFE22
 6663 00b8 00000000 		.4byte	.LFB23
 6664 00bc 18000000 		.4byte	.LFE23
 6665 00c0 00000000 		.4byte	.LFB24
 6666 00c4 24000000 		.4byte	.LFE24
 6667 00c8 00000000 		.4byte	.LFB25
 6668 00cc 78000000 		.4byte	.LFE25
 6669 00d0 00000000 		.4byte	.LFB26
 6670 00d4 88000000 		.4byte	.LFE26
 6671 00d8 00000000 		.4byte	.LFB27
 6672 00dc 7C000000 		.4byte	.LFE27
 6673 00e0 00000000 		.4byte	.LFB28
 6674 00e4 70000000 		.4byte	.LFE28
 6675 00e8 00000000 		.4byte	.LFB29
 6676 00ec 70000000 		.4byte	.LFE29
 6677 00f0 00000000 		.4byte	.LFB30
 6678 00f4 38000000 		.4byte	.LFE30
 6679 00f8 00000000 		.4byte	.LFB31
 6680 00fc 38000000 		.4byte	.LFE31
 6681 0100 00000000 		.4byte	.LFB32
 6682 0104 20000000 		.4byte	.LFE32
 6683 0108 00000000 		.4byte	.LFB33
 6684 010c 20000000 		.4byte	.LFE33
 6685 0110 00000000 		.4byte	.LFB34
 6686 0114 B8000000 		.4byte	.LFE34
 6687 0118 00000000 		.4byte	.LFB35
 6688 011c 84000000 		.4byte	.LFE35
 6689 0120 00000000 		.4byte	0
 6690 0124 00000000 		.4byte	0
 6691              		.section	.debug_macro,"",%progbits
 6692              	.Ldebug_macro0:
 6693 0000 0400     		.2byte	0x4
 6694 0002 02       		.byte	0x2
 6695 0003 00000000 		.4byte	.Ldebug_line0
 6696 0007 07       		.byte	0x7
 6697 0008 00000000 		.4byte	.Ldebug_macro1
 6698 000c 03       		.byte	0x3
 6699 000d 00       		.uleb128 0
 6700 000e 01       		.uleb128 0x1
 6701              		.file 7 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.7
 6702 000f 03       		.byte	0x3
 6703 0010 46       		.uleb128 0x46
 6704 0011 07       		.uleb128 0x7
 6705 0012 05       		.byte	0x5
 6706 0013 1B       		.uleb128 0x1b
 6707 0014 D45C0000 		.4byte	.LASF148
 6708              		.file 8 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.7
 6709 0018 03       		.byte	0x3
 6710 0019 1D       		.uleb128 0x1d
 6711 001a 08       		.uleb128 0x8
 6712 001b 05       		.byte	0x5
 6713 001c 0D       		.uleb128 0xd
 6714 001d B8450000 		.4byte	.LASF149
 6715              		.file 9 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.7
 6716 0021 03       		.byte	0x3
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 167


 6717 0022 0F       		.uleb128 0xf
 6718 0023 09       		.uleb128 0x9
 6719 0024 07       		.byte	0x7
 6720 0025 00000000 		.4byte	.Ldebug_macro2
 6721 0029 04       		.byte	0x4
 6722              		.file 10 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6723 002a 03       		.byte	0x3
 6724 002b 10       		.uleb128 0x10
 6725 002c 0A       		.uleb128 0xa
 6726 002d 05       		.byte	0x5
 6727 002e 02       		.uleb128 0x2
 6728 002f BB430000 		.4byte	.LASF150
 6729              		.file 11 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6730 0033 03       		.byte	0x3
 6731 0034 04       		.uleb128 0x4
 6732 0035 0B       		.uleb128 0xb
 6733 0036 05       		.byte	0x5
 6734 0037 3C       		.uleb128 0x3c
 6735 0038 CD4C0000 		.4byte	.LASF151
 6736 003c 04       		.byte	0x4
 6737              		.file 12 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6738 003d 03       		.byte	0x3
 6739 003e 05       		.uleb128 0x5
 6740 003f 0C       		.uleb128 0xc
 6741 0040 05       		.byte	0x5
 6742 0041 16       		.uleb128 0x16
 6743 0042 6A220000 		.4byte	.LASF152
 6744 0046 04       		.byte	0x4
 6745 0047 07       		.byte	0x7
 6746 0048 00000000 		.4byte	.Ldebug_macro3
 6747 004c 04       		.byte	0x4
 6748 004d 07       		.byte	0x7
 6749 004e 00000000 		.4byte	.Ldebug_macro4
 6750 0052 04       		.byte	0x4
 6751 0053 07       		.byte	0x7
 6752 0054 00000000 		.4byte	.Ldebug_macro5
 6753 0058 03       		.byte	0x3
 6754 0059 22       		.uleb128 0x22
 6755 005a 02       		.uleb128 0x2
 6756 005b 07       		.byte	0x7
 6757 005c 00000000 		.4byte	.Ldebug_macro6
 6758 0060 04       		.byte	0x4
 6759 0061 05       		.byte	0x5
 6760 0062 24       		.uleb128 0x24
 6761 0063 E70A0000 		.4byte	.LASF153
 6762              		.file 13 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6763 0067 03       		.byte	0x3
 6764 0068 25       		.uleb128 0x25
 6765 0069 0D       		.uleb128 0xd
 6766 006a 07       		.byte	0x7
 6767 006b 00000000 		.4byte	.Ldebug_macro7
 6768 006f 04       		.byte	0x4
 6769              		.file 14 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6770 0070 03       		.byte	0x3
 6771 0071 2D       		.uleb128 0x2d
 6772 0072 0E       		.uleb128 0xe
 6773 0073 05       		.byte	0x5
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 168


 6774 0074 0B       		.uleb128 0xb
 6775 0075 C7480000 		.4byte	.LASF154
 6776 0079 03       		.byte	0x3
 6777 007a 0D       		.uleb128 0xd
 6778 007b 08       		.uleb128 0x8
 6779 007c 04       		.byte	0x4
 6780              		.file 15 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6781 007d 03       		.byte	0x3
 6782 007e 0E       		.uleb128 0xe
 6783 007f 0F       		.uleb128 0xf
 6784 0080 05       		.byte	0x5
 6785 0081 0A       		.uleb128 0xa
 6786 0082 AA290000 		.4byte	.LASF155
 6787              		.file 16 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6788 0086 03       		.byte	0x3
 6789 0087 0C       		.uleb128 0xc
 6790 0088 10       		.uleb128 0x10
 6791 0089 05       		.byte	0x5
 6792 008a 06       		.uleb128 0x6
 6793 008b 994C0000 		.4byte	.LASF156
 6794              		.file 17 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6795 008f 03       		.byte	0x3
 6796 0090 07       		.uleb128 0x7
 6797 0091 11       		.uleb128 0x11
 6798 0092 07       		.byte	0x7
 6799 0093 00000000 		.4byte	.Ldebug_macro8
 6800 0097 04       		.byte	0x4
 6801 0098 04       		.byte	0x4
 6802              		.file 18 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6803 0099 03       		.byte	0x3
 6804 009a 0D       		.uleb128 0xd
 6805 009b 12       		.uleb128 0x12
 6806 009c 07       		.byte	0x7
 6807 009d 00000000 		.4byte	.Ldebug_macro9
 6808 00a1 04       		.byte	0x4
 6809 00a2 05       		.byte	0x5
 6810 00a3 44       		.uleb128 0x44
 6811 00a4 3D770000 		.4byte	.LASF157
 6812 00a8 03       		.byte	0x3
 6813 00a9 45       		.uleb128 0x45
 6814 00aa 02       		.uleb128 0x2
 6815 00ab 07       		.byte	0x7
 6816 00ac 00000000 		.4byte	.Ldebug_macro10
 6817 00b0 04       		.byte	0x4
 6818 00b1 04       		.byte	0x4
 6819 00b2 07       		.byte	0x7
 6820 00b3 00000000 		.4byte	.Ldebug_macro11
 6821 00b7 04       		.byte	0x4
 6822              		.file 19 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6823 00b8 03       		.byte	0x3
 6824 00b9 2E       		.uleb128 0x2e
 6825 00ba 13       		.uleb128 0x13
 6826 00bb 07       		.byte	0x7
 6827 00bc 00000000 		.4byte	.Ldebug_macro12
 6828 00c0 03       		.byte	0x3
 6829 00c1 45       		.uleb128 0x45
 6830 00c2 02       		.uleb128 0x2
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 169


 6831 00c3 07       		.byte	0x7
 6832 00c4 00000000 		.4byte	.Ldebug_macro13
 6833 00c8 04       		.byte	0x4
 6834              		.file 20 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6835 00c9 03       		.byte	0x3
 6836 00ca 46       		.uleb128 0x46
 6837 00cb 14       		.uleb128 0x14
 6838 00cc 07       		.byte	0x7
 6839 00cd 00000000 		.4byte	.Ldebug_macro14
 6840 00d1 04       		.byte	0x4
 6841 00d2 07       		.byte	0x7
 6842 00d3 00000000 		.4byte	.Ldebug_macro15
 6843 00d7 04       		.byte	0x4
 6844              		.file 21 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6845 00d8 03       		.byte	0x3
 6846 00d9 3D       		.uleb128 0x3d
 6847 00da 15       		.uleb128 0x15
 6848 00db 07       		.byte	0x7
 6849 00dc 00000000 		.4byte	.Ldebug_macro16
 6850 00e0 04       		.byte	0x4
 6851 00e1 07       		.byte	0x7
 6852 00e2 00000000 		.4byte	.Ldebug_macro17
 6853 00e6 04       		.byte	0x4
 6854              		.file 22 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6855 00e7 03       		.byte	0x3
 6856 00e8 47       		.uleb128 0x47
 6857 00e9 16       		.uleb128 0x16
 6858 00ea 05       		.byte	0x5
 6859 00eb 08       		.uleb128 0x8
 6860 00ec BB600000 		.4byte	.LASF158
 6861 00f0 03       		.byte	0x3
 6862 00f1 0A       		.uleb128 0xa
 6863 00f2 0B       		.uleb128 0xb
 6864 00f3 04       		.byte	0x4
 6865 00f4 07       		.byte	0x7
 6866 00f5 00000000 		.4byte	.Ldebug_macro18
 6867 00f9 03       		.byte	0x3
 6868 00fa 14       		.uleb128 0x14
 6869 00fb 02       		.uleb128 0x2
 6870 00fc 07       		.byte	0x7
 6871 00fd 00000000 		.4byte	.Ldebug_macro19
 6872 0101 04       		.byte	0x4
 6873              		.file 23 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6874 0102 03       		.byte	0x3
 6875 0103 17       		.uleb128 0x17
 6876 0104 17       		.uleb128 0x17
 6877 0105 05       		.byte	0x5
 6878 0106 02       		.uleb128 0x2
 6879 0107 1A6E0000 		.4byte	.LASF159
 6880 010b 04       		.byte	0x4
 6881              		.file 24 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6882 010c 03       		.byte	0x3
 6883 010d 19       		.uleb128 0x19
 6884 010e 18       		.uleb128 0x18
 6885 010f 07       		.byte	0x7
 6886 0110 00000000 		.4byte	.Ldebug_macro20
 6887 0114 04       		.byte	0x4
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 170


 6888 0115 07       		.byte	0x7
 6889 0116 00000000 		.4byte	.Ldebug_macro21
 6890 011a 04       		.byte	0x4
 6891              		.file 25 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6892 011b 03       		.byte	0x3
 6893 011c 48       		.uleb128 0x48
 6894 011d 19       		.uleb128 0x19
 6895 011e 07       		.byte	0x7
 6896 011f 00000000 		.4byte	.Ldebug_macro22
 6897 0123 03       		.byte	0x3
 6898 0124 0E       		.uleb128 0xe
 6899 0125 02       		.uleb128 0x2
 6900 0126 07       		.byte	0x7
 6901 0127 00000000 		.4byte	.Ldebug_macro19
 6902 012b 04       		.byte	0x4
 6903 012c 07       		.byte	0x7
 6904 012d 00000000 		.4byte	.Ldebug_macro23
 6905              		.file 26 "c:\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.
 6906 0131 03       		.byte	0x3
 6907 0132 64       		.uleb128 0x64
 6908 0133 1A       		.uleb128 0x1a
 6909 0134 04       		.byte	0x4
 6910 0135 04       		.byte	0x4
 6911 0136 05       		.byte	0x5
 6912 0137 4D       		.uleb128 0x4d
 6913 0138 88760000 		.4byte	.LASF160
 6914              		.file 27 "./Source/include/FreeRTOS.h"
 6915 013c 03       		.byte	0x3
 6916 013d 50       		.uleb128 0x50
 6917 013e 1B       		.uleb128 0x1b
 6918 013f 05       		.byte	0x5
 6919 0140 46       		.uleb128 0x46
 6920 0141 CB540000 		.4byte	.LASF161
 6921 0145 03       		.byte	0x3
 6922 0146 4C       		.uleb128 0x4c
 6923 0147 02       		.uleb128 0x2
 6924 0148 04       		.byte	0x4
 6925 0149 03       		.byte	0x3
 6926 014a 4F       		.uleb128 0x4f
 6927 014b 03       		.uleb128 0x3
 6928 014c 07       		.byte	0x7
 6929 014d 00000000 		.4byte	.Ldebug_macro24
 6930 0151 04       		.byte	0x4
 6931              		.file 28 "./FreeRTOSConfig.h"
 6932 0152 03       		.byte	0x3
 6933 0153 52       		.uleb128 0x52
 6934 0154 1C       		.uleb128 0x1c
 6935 0155 07       		.byte	0x7
 6936 0156 00000000 		.4byte	.Ldebug_macro25
 6937 015a 04       		.byte	0x4
 6938 015b 05       		.byte	0x5
 6939 015c 57       		.uleb128 0x57
 6940 015d A96D0000 		.4byte	.LASF162
 6941              		.file 29 "./Source/include/portable.h"
 6942 0161 03       		.byte	0x3
 6943 0162 5B       		.uleb128 0x5b
 6944 0163 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 171


 6945 0164 05       		.byte	0x5
 6946 0165 4A       		.uleb128 0x4a
 6947 0166 5E230000 		.4byte	.LASF163
 6948 016a 03       		.byte	0x3
 6949 016b C501     		.uleb128 0xc5
 6950 016d 04       		.uleb128 0x4
 6951 016e 07       		.byte	0x7
 6952 016f 00000000 		.4byte	.Ldebug_macro26
 6953 0173 04       		.byte	0x4
 6954 0174 07       		.byte	0x7
 6955 0175 00000000 		.4byte	.Ldebug_macro27
 6956              		.file 30 "./Source/include/mpu_wrappers.h"
 6957 0179 03       		.byte	0x3
 6958 017a E102     		.uleb128 0x161
 6959 017c 1E       		.uleb128 0x1e
 6960 017d 07       		.byte	0x7
 6961 017e 00000000 		.4byte	.Ldebug_macro28
 6962 0182 04       		.byte	0x4
 6963 0183 04       		.byte	0x4
 6964 0184 07       		.byte	0x7
 6965 0185 00000000 		.4byte	.Ldebug_macro29
 6966 0189 04       		.byte	0x4
 6967 018a 03       		.byte	0x3
 6968 018b 51       		.uleb128 0x51
 6969 018c 06       		.uleb128 0x6
 6970 018d 05       		.byte	0x5
 6971 018e 46       		.uleb128 0x46
 6972 018f C14E0000 		.4byte	.LASF164
 6973 0193 03       		.byte	0x3
 6974 0194 4D       		.uleb128 0x4d
 6975 0195 05       		.uleb128 0x5
 6976 0196 07       		.byte	0x7
 6977 0197 00000000 		.4byte	.Ldebug_macro30
 6978 019b 04       		.byte	0x4
 6979 019c 07       		.byte	0x7
 6980 019d 00000000 		.4byte	.Ldebug_macro31
 6981 01a1 04       		.byte	0x4
 6982              		.file 31 "./Source/include/timers.h"
 6983 01a2 03       		.byte	0x3
 6984 01a3 52       		.uleb128 0x52
 6985 01a4 1F       		.uleb128 0x1f
 6986 01a5 05       		.byte	0x5
 6987 01a6 47       		.uleb128 0x47
 6988 01a7 FD0B0000 		.4byte	.LASF165
 6989 01ab 03       		.byte	0x3
 6990 01ac 4F       		.uleb128 0x4f
 6991 01ad 06       		.uleb128 0x6
 6992 01ae 04       		.byte	0x4
 6993 01af 07       		.byte	0x7
 6994 01b0 00000000 		.4byte	.Ldebug_macro32
 6995 01b4 04       		.byte	0x4
 6996              		.file 32 "./Source/include/StackMacros.h"
 6997 01b5 03       		.byte	0x3
 6998 01b6 53       		.uleb128 0x53
 6999 01b7 20       		.uleb128 0x20
 7000 01b8 07       		.byte	0x7
 7001 01b9 00000000 		.4byte	.Ldebug_macro33
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 172


 7002 01bd 04       		.byte	0x4
 7003 01be 06       		.byte	0x6
 7004 01bf 55       		.uleb128 0x55
 7005 01c0 345D0000 		.4byte	.LASF166
 7006 01c4 05       		.byte	0x5
 7007 01c5 5A       		.uleb128 0x5a
 7008 01c6 5A520000 		.4byte	.LASF167
 7009 01ca 05       		.byte	0x5
 7010 01cb CC01     		.uleb128 0xcc
 7011 01cd 6A0D0000 		.4byte	.LASF168
 7012 01d1 05       		.byte	0x5
 7013 01d2 D101     		.uleb128 0xd1
 7014 01d4 22110000 		.4byte	.LASF169
 7015 01d8 05       		.byte	0x5
 7016 01d9 D201     		.uleb128 0xd2
 7017 01db B7660000 		.4byte	.LASF170
 7018 01df 05       		.byte	0x5
 7019 01e0 D301     		.uleb128 0xd3
 7020 01e2 907B0000 		.4byte	.LASF171
 7021 01e6 05       		.byte	0x5
 7022 01e7 D401     		.uleb128 0xd4
 7023 01e9 CD5F0000 		.4byte	.LASF172
 7024 01ed 05       		.byte	0x5
 7025 01ee E001     		.uleb128 0xe0
 7026 01f0 9F080000 		.4byte	.LASF173
 7027 01f4 05       		.byte	0x5
 7028 01f5 EA01     		.uleb128 0xea
 7029 01f7 9A6E0000 		.4byte	.LASF174
 7030 01fb 05       		.byte	0x5
 7031 01fc FD01     		.uleb128 0xfd
 7032 01fe A15E0000 		.4byte	.LASF175
 7033 0202 05       		.byte	0x5
 7034 0203 FE01     		.uleb128 0xfe
 7035 0205 1D5A0000 		.4byte	.LASF176
 7036 0209 05       		.byte	0x5
 7037 020a AB02     		.uleb128 0x12b
 7038 020c A9640000 		.4byte	.LASF177
 7039 0210 05       		.byte	0x5
 7040 0211 B902     		.uleb128 0x139
 7041 0213 FF610000 		.4byte	.LASF178
 7042 0217 05       		.byte	0x5
 7043 0218 F402     		.uleb128 0x174
 7044 021a FE7C0000 		.4byte	.LASF179
 7045 021e 04       		.byte	0x4
 7046 021f 00       		.byte	0
 7047              		.section	.debug_macro,"G",%progbits,wm4.1.ce89de828273fac0ab1bbb9e83b278fe,comdat
 7048              	.Ldebug_macro1:
 7049 0000 0400     		.2byte	0x4
 7050 0002 00       		.byte	0
 7051 0003 05       		.byte	0x5
 7052 0004 01       		.uleb128 0x1
 7053 0005 F3700000 		.4byte	.LASF180
 7054 0009 05       		.byte	0x5
 7055 000a 01       		.uleb128 0x1
 7056 000b BF0D0000 		.4byte	.LASF181
 7057 000f 05       		.byte	0x5
 7058 0010 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 173


 7059 0011 82490000 		.4byte	.LASF182
 7060 0015 05       		.byte	0x5
 7061 0016 01       		.uleb128 0x1
 7062 0017 4C1F0000 		.4byte	.LASF183
 7063 001b 05       		.byte	0x5
 7064 001c 01       		.uleb128 0x1
 7065 001d E3090000 		.4byte	.LASF184
 7066 0021 05       		.byte	0x5
 7067 0022 01       		.uleb128 0x1
 7068 0023 B9330000 		.4byte	.LASF185
 7069 0027 05       		.byte	0x5
 7070 0028 01       		.uleb128 0x1
 7071 0029 F75F0000 		.4byte	.LASF186
 7072 002d 05       		.byte	0x5
 7073 002e 01       		.uleb128 0x1
 7074 002f CA6C0000 		.4byte	.LASF187
 7075 0033 05       		.byte	0x5
 7076 0034 01       		.uleb128 0x1
 7077 0035 B6040000 		.4byte	.LASF188
 7078 0039 05       		.byte	0x5
 7079 003a 01       		.uleb128 0x1
 7080 003b D36A0000 		.4byte	.LASF189
 7081 003f 05       		.byte	0x5
 7082 0040 01       		.uleb128 0x1
 7083 0041 2C470000 		.4byte	.LASF190
 7084 0045 05       		.byte	0x5
 7085 0046 01       		.uleb128 0x1
 7086 0047 DD300000 		.4byte	.LASF191
 7087 004b 05       		.byte	0x5
 7088 004c 01       		.uleb128 0x1
 7089 004d 97390000 		.4byte	.LASF192
 7090 0051 05       		.byte	0x5
 7091 0052 01       		.uleb128 0x1
 7092 0053 A47D0000 		.4byte	.LASF193
 7093 0057 05       		.byte	0x5
 7094 0058 01       		.uleb128 0x1
 7095 0059 5A320000 		.4byte	.LASF194
 7096 005d 05       		.byte	0x5
 7097 005e 01       		.uleb128 0x1
 7098 005f EE5A0000 		.4byte	.LASF195
 7099 0063 05       		.byte	0x5
 7100 0064 01       		.uleb128 0x1
 7101 0065 DC720000 		.4byte	.LASF196
 7102 0069 05       		.byte	0x5
 7103 006a 01       		.uleb128 0x1
 7104 006b 97170000 		.4byte	.LASF197
 7105 006f 05       		.byte	0x5
 7106 0070 01       		.uleb128 0x1
 7107 0071 CA040000 		.4byte	.LASF198
 7108 0075 05       		.byte	0x5
 7109 0076 01       		.uleb128 0x1
 7110 0077 D8210000 		.4byte	.LASF199
 7111 007b 05       		.byte	0x5
 7112 007c 01       		.uleb128 0x1
 7113 007d 5E1F0000 		.4byte	.LASF200
 7114 0081 05       		.byte	0x5
 7115 0082 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 174


 7116 0083 12180000 		.4byte	.LASF201
 7117 0087 05       		.byte	0x5
 7118 0088 01       		.uleb128 0x1
 7119 0089 CF220000 		.4byte	.LASF202
 7120 008d 05       		.byte	0x5
 7121 008e 01       		.uleb128 0x1
 7122 008f 0C670000 		.4byte	.LASF203
 7123 0093 05       		.byte	0x5
 7124 0094 01       		.uleb128 0x1
 7125 0095 93440000 		.4byte	.LASF204
 7126 0099 05       		.byte	0x5
 7127 009a 01       		.uleb128 0x1
 7128 009b 30510000 		.4byte	.LASF205
 7129 009f 05       		.byte	0x5
 7130 00a0 01       		.uleb128 0x1
 7131 00a1 D1560000 		.4byte	.LASF206
 7132 00a5 05       		.byte	0x5
 7133 00a6 01       		.uleb128 0x1
 7134 00a7 470E0000 		.4byte	.LASF207
 7135 00ab 05       		.byte	0x5
 7136 00ac 01       		.uleb128 0x1
 7137 00ad D9050000 		.4byte	.LASF208
 7138 00b1 05       		.byte	0x5
 7139 00b2 01       		.uleb128 0x1
 7140 00b3 75450000 		.4byte	.LASF209
 7141 00b7 05       		.byte	0x5
 7142 00b8 01       		.uleb128 0x1
 7143 00b9 474B0000 		.4byte	.LASF210
 7144 00bd 05       		.byte	0x5
 7145 00be 01       		.uleb128 0x1
 7146 00bf 38150000 		.4byte	.LASF211
 7147 00c3 05       		.byte	0x5
 7148 00c4 01       		.uleb128 0x1
 7149 00c5 F3050000 		.4byte	.LASF212
 7150 00c9 05       		.byte	0x5
 7151 00ca 01       		.uleb128 0x1
 7152 00cb E4570000 		.4byte	.LASF213
 7153 00cf 05       		.byte	0x5
 7154 00d0 01       		.uleb128 0x1
 7155 00d1 16230000 		.4byte	.LASF214
 7156 00d5 05       		.byte	0x5
 7157 00d6 01       		.uleb128 0x1
 7158 00d7 6B0A0000 		.4byte	.LASF215
 7159 00db 05       		.byte	0x5
 7160 00dc 01       		.uleb128 0x1
 7161 00dd 20600000 		.4byte	.LASF216
 7162 00e1 05       		.byte	0x5
 7163 00e2 01       		.uleb128 0x1
 7164 00e3 FF5E0000 		.4byte	.LASF217
 7165 00e7 05       		.byte	0x5
 7166 00e8 01       		.uleb128 0x1
 7167 00e9 FA590000 		.4byte	.LASF218
 7168 00ed 05       		.byte	0x5
 7169 00ee 01       		.uleb128 0x1
 7170 00ef BF160000 		.4byte	.LASF219
 7171 00f3 05       		.byte	0x5
 7172 00f4 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 175


 7173 00f5 B74B0000 		.4byte	.LASF220
 7174 00f9 05       		.byte	0x5
 7175 00fa 01       		.uleb128 0x1
 7176 00fb 6A060000 		.4byte	.LASF221
 7177 00ff 05       		.byte	0x5
 7178 0100 01       		.uleb128 0x1
 7179 0101 44090000 		.4byte	.LASF222
 7180 0105 05       		.byte	0x5
 7181 0106 01       		.uleb128 0x1
 7182 0107 5C5C0000 		.4byte	.LASF223
 7183 010b 05       		.byte	0x5
 7184 010c 01       		.uleb128 0x1
 7185 010d 63440000 		.4byte	.LASF224
 7186 0111 05       		.byte	0x5
 7187 0112 01       		.uleb128 0x1
 7188 0113 25290000 		.4byte	.LASF225
 7189 0117 05       		.byte	0x5
 7190 0118 01       		.uleb128 0x1
 7191 0119 99340000 		.4byte	.LASF226
 7192 011d 05       		.byte	0x5
 7193 011e 01       		.uleb128 0x1
 7194 011f DC710000 		.4byte	.LASF227
 7195 0123 05       		.byte	0x5
 7196 0124 01       		.uleb128 0x1
 7197 0125 38670000 		.4byte	.LASF228
 7198 0129 05       		.byte	0x5
 7199 012a 01       		.uleb128 0x1
 7200 012b 4D150000 		.4byte	.LASF229
 7201 012f 05       		.byte	0x5
 7202 0130 01       		.uleb128 0x1
 7203 0131 C7780000 		.4byte	.LASF230
 7204 0135 05       		.byte	0x5
 7205 0136 01       		.uleb128 0x1
 7206 0137 70560000 		.4byte	.LASF231
 7207 013b 05       		.byte	0x5
 7208 013c 01       		.uleb128 0x1
 7209 013d B57F0000 		.4byte	.LASF232
 7210 0141 05       		.byte	0x5
 7211 0142 01       		.uleb128 0x1
 7212 0143 64130000 		.4byte	.LASF233
 7213 0147 05       		.byte	0x5
 7214 0148 01       		.uleb128 0x1
 7215 0149 A9590000 		.4byte	.LASF234
 7216 014d 05       		.byte	0x5
 7217 014e 01       		.uleb128 0x1
 7218 014f A55F0000 		.4byte	.LASF235
 7219 0153 05       		.byte	0x5
 7220 0154 01       		.uleb128 0x1
 7221 0155 E0380000 		.4byte	.LASF236
 7222 0159 05       		.byte	0x5
 7223 015a 01       		.uleb128 0x1
 7224 015b CC090000 		.4byte	.LASF237
 7225 015f 05       		.byte	0x5
 7226 0160 01       		.uleb128 0x1
 7227 0161 0E590000 		.4byte	.LASF238
 7228 0165 05       		.byte	0x5
 7229 0166 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 176


 7230 0167 3B420000 		.4byte	.LASF239
 7231 016b 05       		.byte	0x5
 7232 016c 01       		.uleb128 0x1
 7233 016d 490A0000 		.4byte	.LASF240
 7234 0171 05       		.byte	0x5
 7235 0172 01       		.uleb128 0x1
 7236 0173 93360000 		.4byte	.LASF241
 7237 0177 05       		.byte	0x5
 7238 0178 01       		.uleb128 0x1
 7239 0179 E6760000 		.4byte	.LASF242
 7240 017d 05       		.byte	0x5
 7241 017e 01       		.uleb128 0x1
 7242 017f 191F0000 		.4byte	.LASF243
 7243 0183 05       		.byte	0x5
 7244 0184 01       		.uleb128 0x1
 7245 0185 E7230000 		.4byte	.LASF244
 7246 0189 05       		.byte	0x5
 7247 018a 01       		.uleb128 0x1
 7248 018b F5100000 		.4byte	.LASF245
 7249 018f 05       		.byte	0x5
 7250 0190 01       		.uleb128 0x1
 7251 0191 B4650000 		.4byte	.LASF246
 7252 0195 05       		.byte	0x5
 7253 0196 01       		.uleb128 0x1
 7254 0197 C5230000 		.4byte	.LASF247
 7255 019b 05       		.byte	0x5
 7256 019c 01       		.uleb128 0x1
 7257 019d 930F0000 		.4byte	.LASF248
 7258 01a1 05       		.byte	0x5
 7259 01a2 01       		.uleb128 0x1
 7260 01a3 186D0000 		.4byte	.LASF249
 7261 01a7 05       		.byte	0x5
 7262 01a8 01       		.uleb128 0x1
 7263 01a9 7A380000 		.4byte	.LASF250
 7264 01ad 05       		.byte	0x5
 7265 01ae 01       		.uleb128 0x1
 7266 01af 416E0000 		.4byte	.LASF251
 7267 01b3 05       		.byte	0x5
 7268 01b4 01       		.uleb128 0x1
 7269 01b5 20010000 		.4byte	.LASF252
 7270 01b9 05       		.byte	0x5
 7271 01ba 01       		.uleb128 0x1
 7272 01bb 86140000 		.4byte	.LASF253
 7273 01bf 05       		.byte	0x5
 7274 01c0 01       		.uleb128 0x1
 7275 01c1 D23C0000 		.4byte	.LASF254
 7276 01c5 05       		.byte	0x5
 7277 01c6 01       		.uleb128 0x1
 7278 01c7 BB5C0000 		.4byte	.LASF255
 7279 01cb 05       		.byte	0x5
 7280 01cc 01       		.uleb128 0x1
 7281 01cd 12780000 		.4byte	.LASF256
 7282 01d1 05       		.byte	0x5
 7283 01d2 01       		.uleb128 0x1
 7284 01d3 75640000 		.4byte	.LASF257
 7285 01d7 05       		.byte	0x5
 7286 01d8 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 177


 7287 01d9 6C5D0000 		.4byte	.LASF258
 7288 01dd 05       		.byte	0x5
 7289 01de 01       		.uleb128 0x1
 7290 01df A4100000 		.4byte	.LASF259
 7291 01e3 05       		.byte	0x5
 7292 01e4 01       		.uleb128 0x1
 7293 01e5 48010000 		.4byte	.LASF260
 7294 01e9 05       		.byte	0x5
 7295 01ea 01       		.uleb128 0x1
 7296 01eb D75E0000 		.4byte	.LASF261
 7297 01ef 05       		.byte	0x5
 7298 01f0 01       		.uleb128 0x1
 7299 01f1 20150000 		.4byte	.LASF262
 7300 01f5 05       		.byte	0x5
 7301 01f6 01       		.uleb128 0x1
 7302 01f7 454C0000 		.4byte	.LASF263
 7303 01fb 05       		.byte	0x5
 7304 01fc 01       		.uleb128 0x1
 7305 01fd C92B0000 		.4byte	.LASF264
 7306 0201 05       		.byte	0x5
 7307 0202 01       		.uleb128 0x1
 7308 0203 63160000 		.4byte	.LASF265
 7309 0207 05       		.byte	0x5
 7310 0208 01       		.uleb128 0x1
 7311 0209 07100000 		.4byte	.LASF266
 7312 020d 05       		.byte	0x5
 7313 020e 01       		.uleb128 0x1
 7314 020f DB540000 		.4byte	.LASF267
 7315 0213 05       		.byte	0x5
 7316 0214 01       		.uleb128 0x1
 7317 0215 ED1F0000 		.4byte	.LASF268
 7318 0219 05       		.byte	0x5
 7319 021a 01       		.uleb128 0x1
 7320 021b 3B370000 		.4byte	.LASF269
 7321 021f 05       		.byte	0x5
 7322 0220 01       		.uleb128 0x1
 7323 0221 92690000 		.4byte	.LASF270
 7324 0225 05       		.byte	0x5
 7325 0226 01       		.uleb128 0x1
 7326 0227 E33C0000 		.4byte	.LASF271
 7327 022b 05       		.byte	0x5
 7328 022c 01       		.uleb128 0x1
 7329 022d F90A0000 		.4byte	.LASF272
 7330 0231 05       		.byte	0x5
 7331 0232 01       		.uleb128 0x1
 7332 0233 4C4F0000 		.4byte	.LASF273
 7333 0237 05       		.byte	0x5
 7334 0238 01       		.uleb128 0x1
 7335 0239 3D530000 		.4byte	.LASF274
 7336 023d 05       		.byte	0x5
 7337 023e 01       		.uleb128 0x1
 7338 023f 6E270000 		.4byte	.LASF275
 7339 0243 05       		.byte	0x5
 7340 0244 01       		.uleb128 0x1
 7341 0245 7D7C0000 		.4byte	.LASF276
 7342 0249 05       		.byte	0x5
 7343 024a 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 178


 7344 024b 8D670000 		.4byte	.LASF277
 7345 024f 05       		.byte	0x5
 7346 0250 01       		.uleb128 0x1
 7347 0251 FE240000 		.4byte	.LASF278
 7348 0255 05       		.byte	0x5
 7349 0256 01       		.uleb128 0x1
 7350 0257 DF5C0000 		.4byte	.LASF279
 7351 025b 05       		.byte	0x5
 7352 025c 01       		.uleb128 0x1
 7353 025d 78670000 		.4byte	.LASF280
 7354 0261 05       		.byte	0x5
 7355 0262 01       		.uleb128 0x1
 7356 0263 C77E0000 		.4byte	.LASF281
 7357 0267 05       		.byte	0x5
 7358 0268 01       		.uleb128 0x1
 7359 0269 35090000 		.4byte	.LASF282
 7360 026d 05       		.byte	0x5
 7361 026e 01       		.uleb128 0x1
 7362 026f 565A0000 		.4byte	.LASF283
 7363 0273 05       		.byte	0x5
 7364 0274 01       		.uleb128 0x1
 7365 0275 516A0000 		.4byte	.LASF284
 7366 0279 05       		.byte	0x5
 7367 027a 01       		.uleb128 0x1
 7368 027b 606D0000 		.4byte	.LASF285
 7369 027f 05       		.byte	0x5
 7370 0280 01       		.uleb128 0x1
 7371 0281 09280000 		.4byte	.LASF286
 7372 0285 05       		.byte	0x5
 7373 0286 01       		.uleb128 0x1
 7374 0287 744B0000 		.4byte	.LASF287
 7375 028b 05       		.byte	0x5
 7376 028c 01       		.uleb128 0x1
 7377 028d C9380000 		.4byte	.LASF288
 7378 0291 05       		.byte	0x5
 7379 0292 01       		.uleb128 0x1
 7380 0293 98280000 		.4byte	.LASF289
 7381 0297 05       		.byte	0x5
 7382 0298 01       		.uleb128 0x1
 7383 0299 F0150000 		.4byte	.LASF290
 7384 029d 05       		.byte	0x5
 7385 029e 01       		.uleb128 0x1
 7386 029f FD450000 		.4byte	.LASF291
 7387 02a3 05       		.byte	0x5
 7388 02a4 01       		.uleb128 0x1
 7389 02a5 2A2F0000 		.4byte	.LASF292
 7390 02a9 05       		.byte	0x5
 7391 02aa 01       		.uleb128 0x1
 7392 02ab F7200000 		.4byte	.LASF293
 7393 02af 05       		.byte	0x5
 7394 02b0 01       		.uleb128 0x1
 7395 02b1 C5790000 		.4byte	.LASF294
 7396 02b5 05       		.byte	0x5
 7397 02b6 01       		.uleb128 0x1
 7398 02b7 7A680000 		.4byte	.LASF295
 7399 02bb 05       		.byte	0x5
 7400 02bc 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 179


 7401 02bd D0130000 		.4byte	.LASF296
 7402 02c1 05       		.byte	0x5
 7403 02c2 01       		.uleb128 0x1
 7404 02c3 A77A0000 		.4byte	.LASF297
 7405 02c7 05       		.byte	0x5
 7406 02c8 01       		.uleb128 0x1
 7407 02c9 F5470000 		.4byte	.LASF298
 7408 02cd 05       		.byte	0x5
 7409 02ce 01       		.uleb128 0x1
 7410 02cf D6480000 		.4byte	.LASF299
 7411 02d3 05       		.byte	0x5
 7412 02d4 01       		.uleb128 0x1
 7413 02d5 75470000 		.4byte	.LASF300
 7414 02d9 05       		.byte	0x5
 7415 02da 01       		.uleb128 0x1
 7416 02db B83D0000 		.4byte	.LASF301
 7417 02df 05       		.byte	0x5
 7418 02e0 01       		.uleb128 0x1
 7419 02e1 DB390000 		.4byte	.LASF302
 7420 02e5 05       		.byte	0x5
 7421 02e6 01       		.uleb128 0x1
 7422 02e7 23480000 		.4byte	.LASF303
 7423 02eb 05       		.byte	0x5
 7424 02ec 01       		.uleb128 0x1
 7425 02ed 5E470000 		.4byte	.LASF304
 7426 02f1 05       		.byte	0x5
 7427 02f2 01       		.uleb128 0x1
 7428 02f3 7E570000 		.4byte	.LASF305
 7429 02f7 05       		.byte	0x5
 7430 02f8 01       		.uleb128 0x1
 7431 02f9 83170000 		.4byte	.LASF306
 7432 02fd 05       		.byte	0x5
 7433 02fe 01       		.uleb128 0x1
 7434 02ff 7F1F0000 		.4byte	.LASF307
 7435 0303 05       		.byte	0x5
 7436 0304 01       		.uleb128 0x1
 7437 0305 48190000 		.4byte	.LASF308
 7438 0309 05       		.byte	0x5
 7439 030a 01       		.uleb128 0x1
 7440 030b 7E3C0000 		.4byte	.LASF309
 7441 030f 05       		.byte	0x5
 7442 0310 01       		.uleb128 0x1
 7443 0311 4B240000 		.4byte	.LASF310
 7444 0315 05       		.byte	0x5
 7445 0316 01       		.uleb128 0x1
 7446 0317 71280000 		.4byte	.LASF311
 7447 031b 05       		.byte	0x5
 7448 031c 01       		.uleb128 0x1
 7449 031d 1D270000 		.4byte	.LASF312
 7450 0321 05       		.byte	0x5
 7451 0322 01       		.uleb128 0x1
 7452 0323 55060000 		.4byte	.LASF313
 7453 0327 05       		.byte	0x5
 7454 0328 01       		.uleb128 0x1
 7455 0329 6D320000 		.4byte	.LASF314
 7456 032d 05       		.byte	0x5
 7457 032e 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 180


 7458 032f 6F000000 		.4byte	.LASF315
 7459 0333 05       		.byte	0x5
 7460 0334 01       		.uleb128 0x1
 7461 0335 3A7F0000 		.4byte	.LASF316
 7462 0339 05       		.byte	0x5
 7463 033a 01       		.uleb128 0x1
 7464 033b 6C660000 		.4byte	.LASF317
 7465 033f 05       		.byte	0x5
 7466 0340 01       		.uleb128 0x1
 7467 0341 93540000 		.4byte	.LASF318
 7468 0345 05       		.byte	0x5
 7469 0346 01       		.uleb128 0x1
 7470 0347 AF1F0000 		.4byte	.LASF319
 7471 034b 05       		.byte	0x5
 7472 034c 01       		.uleb128 0x1
 7473 034d E2200000 		.4byte	.LASF320
 7474 0351 05       		.byte	0x5
 7475 0352 01       		.uleb128 0x1
 7476 0353 E1040000 		.4byte	.LASF321
 7477 0357 05       		.byte	0x5
 7478 0358 01       		.uleb128 0x1
 7479 0359 3C6D0000 		.4byte	.LASF322
 7480 035d 05       		.byte	0x5
 7481 035e 01       		.uleb128 0x1
 7482 035f 41790000 		.4byte	.LASF323
 7483 0363 05       		.byte	0x5
 7484 0364 01       		.uleb128 0x1
 7485 0365 29140000 		.4byte	.LASF324
 7486 0369 05       		.byte	0x5
 7487 036a 01       		.uleb128 0x1
 7488 036b 00320000 		.4byte	.LASF325
 7489 036f 05       		.byte	0x5
 7490 0370 01       		.uleb128 0x1
 7491 0371 DB460000 		.4byte	.LASF326
 7492 0375 05       		.byte	0x5
 7493 0376 01       		.uleb128 0x1
 7494 0377 A2260000 		.4byte	.LASF327
 7495 037b 05       		.byte	0x5
 7496 037c 01       		.uleb128 0x1
 7497 037d D37A0000 		.4byte	.LASF328
 7498 0381 05       		.byte	0x5
 7499 0382 01       		.uleb128 0x1
 7500 0383 C7600000 		.4byte	.LASF329
 7501 0387 05       		.byte	0x5
 7502 0388 01       		.uleb128 0x1
 7503 0389 8A080000 		.4byte	.LASF330
 7504 038d 05       		.byte	0x5
 7505 038e 01       		.uleb128 0x1
 7506 038f A2770000 		.4byte	.LASF331
 7507 0393 05       		.byte	0x5
 7508 0394 01       		.uleb128 0x1
 7509 0395 94160000 		.4byte	.LASF332
 7510 0399 05       		.byte	0x5
 7511 039a 01       		.uleb128 0x1
 7512 039b E7320000 		.4byte	.LASF333
 7513 039f 05       		.byte	0x5
 7514 03a0 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 181


 7515 03a1 47260000 		.4byte	.LASF334
 7516 03a5 05       		.byte	0x5
 7517 03a6 01       		.uleb128 0x1
 7518 03a7 3E460000 		.4byte	.LASF335
 7519 03ab 05       		.byte	0x5
 7520 03ac 01       		.uleb128 0x1
 7521 03ad 38000000 		.4byte	.LASF336
 7522 03b1 05       		.byte	0x5
 7523 03b2 01       		.uleb128 0x1
 7524 03b3 48270000 		.4byte	.LASF337
 7525 03b7 05       		.byte	0x5
 7526 03b8 01       		.uleb128 0x1
 7527 03b9 2B690000 		.4byte	.LASF338
 7528 03bd 05       		.byte	0x5
 7529 03be 01       		.uleb128 0x1
 7530 03bf 22390000 		.4byte	.LASF339
 7531 03c3 05       		.byte	0x5
 7532 03c4 01       		.uleb128 0x1
 7533 03c5 043B0000 		.4byte	.LASF340
 7534 03c9 05       		.byte	0x5
 7535 03ca 01       		.uleb128 0x1
 7536 03cb A9550000 		.4byte	.LASF341
 7537 03cf 05       		.byte	0x5
 7538 03d0 01       		.uleb128 0x1
 7539 03d1 2B2A0000 		.4byte	.LASF342
 7540 03d5 05       		.byte	0x5
 7541 03d6 01       		.uleb128 0x1
 7542 03d7 52120000 		.4byte	.LASF343
 7543 03db 05       		.byte	0x5
 7544 03dc 01       		.uleb128 0x1
 7545 03dd E7500000 		.4byte	.LASF344
 7546 03e1 05       		.byte	0x5
 7547 03e2 01       		.uleb128 0x1
 7548 03e3 D3240000 		.4byte	.LASF345
 7549 03e7 05       		.byte	0x5
 7550 03e8 01       		.uleb128 0x1
 7551 03e9 31360000 		.4byte	.LASF346
 7552 03ed 05       		.byte	0x5
 7553 03ee 01       		.uleb128 0x1
 7554 03ef 5C050000 		.4byte	.LASF347
 7555 03f3 05       		.byte	0x5
 7556 03f4 01       		.uleb128 0x1
 7557 03f5 07120000 		.4byte	.LASF348
 7558 03f9 05       		.byte	0x5
 7559 03fa 01       		.uleb128 0x1
 7560 03fb A50F0000 		.4byte	.LASF349
 7561 03ff 05       		.byte	0x5
 7562 0400 01       		.uleb128 0x1
 7563 0401 9D020000 		.4byte	.LASF350
 7564 0405 05       		.byte	0x5
 7565 0406 01       		.uleb128 0x1
 7566 0407 17570000 		.4byte	.LASF351
 7567 040b 05       		.byte	0x5
 7568 040c 01       		.uleb128 0x1
 7569 040d 994A0000 		.4byte	.LASF352
 7570 0411 05       		.byte	0x5
 7571 0412 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 182


 7572 0413 0E060000 		.4byte	.LASF353
 7573 0417 05       		.byte	0x5
 7574 0418 01       		.uleb128 0x1
 7575 0419 69550000 		.4byte	.LASF354
 7576 041d 05       		.byte	0x5
 7577 041e 01       		.uleb128 0x1
 7578 041f C1180000 		.4byte	.LASF355
 7579 0423 05       		.byte	0x5
 7580 0424 01       		.uleb128 0x1
 7581 0425 33780000 		.4byte	.LASF356
 7582 0429 05       		.byte	0x5
 7583 042a 01       		.uleb128 0x1
 7584 042b B72E0000 		.4byte	.LASF357
 7585 042f 05       		.byte	0x5
 7586 0430 01       		.uleb128 0x1
 7587 0431 2E4C0000 		.4byte	.LASF358
 7588 0435 05       		.byte	0x5
 7589 0436 01       		.uleb128 0x1
 7590 0437 A0140000 		.4byte	.LASF359
 7591 043b 05       		.byte	0x5
 7592 043c 01       		.uleb128 0x1
 7593 043d 8C7D0000 		.4byte	.LASF360
 7594 0441 05       		.byte	0x5
 7595 0442 01       		.uleb128 0x1
 7596 0443 5F670000 		.4byte	.LASF361
 7597 0447 05       		.byte	0x5
 7598 0448 01       		.uleb128 0x1
 7599 0449 06020000 		.4byte	.LASF362
 7600 044d 05       		.byte	0x5
 7601 044e 01       		.uleb128 0x1
 7602 044f 87000000 		.4byte	.LASF363
 7603 0453 05       		.byte	0x5
 7604 0454 01       		.uleb128 0x1
 7605 0455 27660000 		.4byte	.LASF364
 7606 0459 05       		.byte	0x5
 7607 045a 01       		.uleb128 0x1
 7608 045b 05010000 		.4byte	.LASF365
 7609 045f 05       		.byte	0x5
 7610 0460 01       		.uleb128 0x1
 7611 0461 C17A0000 		.4byte	.LASF366
 7612 0465 05       		.byte	0x5
 7613 0466 01       		.uleb128 0x1
 7614 0467 7A600000 		.4byte	.LASF367
 7615 046b 05       		.byte	0x5
 7616 046c 01       		.uleb128 0x1
 7617 046d B87B0000 		.4byte	.LASF368
 7618 0471 05       		.byte	0x5
 7619 0472 01       		.uleb128 0x1
 7620 0473 070E0000 		.4byte	.LASF369
 7621 0477 05       		.byte	0x5
 7622 0478 01       		.uleb128 0x1
 7623 0479 9D430000 		.4byte	.LASF370
 7624 047d 05       		.byte	0x5
 7625 047e 01       		.uleb128 0x1
 7626 047f EB240000 		.4byte	.LASF371
 7627 0483 05       		.byte	0x5
 7628 0484 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 183


 7629 0485 76250000 		.4byte	.LASF372
 7630 0489 05       		.byte	0x5
 7631 048a 01       		.uleb128 0x1
 7632 048b E20B0000 		.4byte	.LASF373
 7633 048f 05       		.byte	0x5
 7634 0490 01       		.uleb128 0x1
 7635 0491 E82E0000 		.4byte	.LASF374
 7636 0495 05       		.byte	0x5
 7637 0496 01       		.uleb128 0x1
 7638 0497 C11C0000 		.4byte	.LASF375
 7639 049b 05       		.byte	0x5
 7640 049c 01       		.uleb128 0x1
 7641 049d B0560000 		.4byte	.LASF376
 7642 04a1 05       		.byte	0x5
 7643 04a2 01       		.uleb128 0x1
 7644 04a3 F8040000 		.4byte	.LASF377
 7645 04a7 05       		.byte	0x5
 7646 04a8 01       		.uleb128 0x1
 7647 04a9 951F0000 		.4byte	.LASF378
 7648 04ad 05       		.byte	0x5
 7649 04ae 01       		.uleb128 0x1
 7650 04af C8360000 		.4byte	.LASF379
 7651 04b3 05       		.byte	0x5
 7652 04b4 01       		.uleb128 0x1
 7653 04b5 1B460000 		.4byte	.LASF380
 7654 04b9 05       		.byte	0x5
 7655 04ba 01       		.uleb128 0x1
 7656 04bb 1E530000 		.4byte	.LASF381
 7657 04bf 05       		.byte	0x5
 7658 04c0 01       		.uleb128 0x1
 7659 04c1 23120000 		.4byte	.LASF382
 7660 04c5 05       		.byte	0x5
 7661 04c6 01       		.uleb128 0x1
 7662 04c7 FC440000 		.4byte	.LASF383
 7663 04cb 05       		.byte	0x5
 7664 04cc 01       		.uleb128 0x1
 7665 04cd B53C0000 		.4byte	.LASF384
 7666 04d1 05       		.byte	0x5
 7667 04d2 01       		.uleb128 0x1
 7668 04d3 80440000 		.4byte	.LASF385
 7669 04d7 05       		.byte	0x5
 7670 04d8 01       		.uleb128 0x1
 7671 04d9 4B530000 		.4byte	.LASF386
 7672 04dd 05       		.byte	0x5
 7673 04de 01       		.uleb128 0x1
 7674 04df 3C320000 		.4byte	.LASF387
 7675 04e3 05       		.byte	0x5
 7676 04e4 01       		.uleb128 0x1
 7677 04e5 034B0000 		.4byte	.LASF388
 7678 04e9 05       		.byte	0x5
 7679 04ea 01       		.uleb128 0x1
 7680 04eb BF4D0000 		.4byte	.LASF389
 7681 04ef 05       		.byte	0x5
 7682 04f0 01       		.uleb128 0x1
 7683 04f1 560D0000 		.4byte	.LASF390
 7684 04f5 05       		.byte	0x5
 7685 04f6 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 184


 7686 04f7 547F0000 		.4byte	.LASF391
 7687 04fb 05       		.byte	0x5
 7688 04fc 01       		.uleb128 0x1
 7689 04fd 275C0000 		.4byte	.LASF392
 7690 0501 05       		.byte	0x5
 7691 0502 01       		.uleb128 0x1
 7692 0503 87590000 		.4byte	.LASF393
 7693 0507 05       		.byte	0x5
 7694 0508 01       		.uleb128 0x1
 7695 0509 7B660000 		.4byte	.LASF394
 7696 050d 05       		.byte	0x5
 7697 050e 01       		.uleb128 0x1
 7698 050f 7C790000 		.4byte	.LASF395
 7699 0513 05       		.byte	0x5
 7700 0514 01       		.uleb128 0x1
 7701 0515 08730000 		.4byte	.LASF396
 7702 0519 05       		.byte	0x5
 7703 051a 01       		.uleb128 0x1
 7704 051b FE2F0000 		.4byte	.LASF397
 7705 051f 05       		.byte	0x5
 7706 0520 01       		.uleb128 0x1
 7707 0521 D5610000 		.4byte	.LASF398
 7708 0525 05       		.byte	0x5
 7709 0526 01       		.uleb128 0x1
 7710 0527 717B0000 		.4byte	.LASF399
 7711 052b 05       		.byte	0x5
 7712 052c 01       		.uleb128 0x1
 7713 052d F5090000 		.4byte	.LASF400
 7714 0531 05       		.byte	0x5
 7715 0532 01       		.uleb128 0x1
 7716 0533 3B3B0000 		.4byte	.LASF401
 7717 0537 05       		.byte	0x5
 7718 0538 01       		.uleb128 0x1
 7719 0539 60720000 		.4byte	.LASF402
 7720 053d 05       		.byte	0x5
 7721 053e 01       		.uleb128 0x1
 7722 053f 24160000 		.4byte	.LASF403
 7723 0543 05       		.byte	0x5
 7724 0544 01       		.uleb128 0x1
 7725 0545 A4700000 		.4byte	.LASF404
 7726 0549 05       		.byte	0x5
 7727 054a 01       		.uleb128 0x1
 7728 054b D87F0000 		.4byte	.LASF405
 7729 054f 05       		.byte	0x5
 7730 0550 01       		.uleb128 0x1
 7731 0551 19580000 		.4byte	.LASF406
 7732 0555 05       		.byte	0x5
 7733 0556 01       		.uleb128 0x1
 7734 0557 65590000 		.4byte	.LASF407
 7735 055b 05       		.byte	0x5
 7736 055c 01       		.uleb128 0x1
 7737 055d 311E0000 		.4byte	.LASF408
 7738 0561 05       		.byte	0x5
 7739 0562 01       		.uleb128 0x1
 7740 0563 AB7E0000 		.4byte	.LASF409
 7741 0567 05       		.byte	0x5
 7742 0568 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 185


 7743 0569 73290000 		.4byte	.LASF410
 7744 056d 05       		.byte	0x5
 7745 056e 01       		.uleb128 0x1
 7746 056f A5470000 		.4byte	.LASF411
 7747 0573 05       		.byte	0x5
 7748 0574 01       		.uleb128 0x1
 7749 0575 48510000 		.4byte	.LASF412
 7750 0579 05       		.byte	0x5
 7751 057a 01       		.uleb128 0x1
 7752 057b 3F050000 		.4byte	.LASF413
 7753 057f 05       		.byte	0x5
 7754 0580 01       		.uleb128 0x1
 7755 0581 02150000 		.4byte	.LASF414
 7756 0585 05       		.byte	0x5
 7757 0586 01       		.uleb128 0x1
 7758 0587 87130000 		.4byte	.LASF415
 7759 058b 05       		.byte	0x5
 7760 058c 01       		.uleb128 0x1
 7761 058d 51690000 		.4byte	.LASF416
 7762 0591 05       		.byte	0x5
 7763 0592 01       		.uleb128 0x1
 7764 0593 06560000 		.4byte	.LASF417
 7765 0597 05       		.byte	0x5
 7766 0598 01       		.uleb128 0x1
 7767 0599 A0320000 		.4byte	.LASF418
 7768 059d 05       		.byte	0x5
 7769 059e 01       		.uleb128 0x1
 7770 059f 4C770000 		.4byte	.LASF419
 7771 05a3 05       		.byte	0x5
 7772 05a4 01       		.uleb128 0x1
 7773 05a5 A23C0000 		.4byte	.LASF420
 7774 05a9 05       		.byte	0x5
 7775 05aa 01       		.uleb128 0x1
 7776 05ab B4130000 		.4byte	.LASF421
 7777 05af 05       		.byte	0x5
 7778 05b0 01       		.uleb128 0x1
 7779 05b1 F62B0000 		.4byte	.LASF422
 7780 05b5 05       		.byte	0x5
 7781 05b6 01       		.uleb128 0x1
 7782 05b7 B24A0000 		.4byte	.LASF423
 7783 05bb 05       		.byte	0x5
 7784 05bc 01       		.uleb128 0x1
 7785 05bd 31480000 		.4byte	.LASF424
 7786 05c1 05       		.byte	0x5
 7787 05c2 01       		.uleb128 0x1
 7788 05c3 DA1D0000 		.4byte	.LASF425
 7789 05c7 05       		.byte	0x5
 7790 05c8 01       		.uleb128 0x1
 7791 05c9 C30F0000 		.4byte	.LASF426
 7792 05cd 05       		.byte	0x5
 7793 05ce 01       		.uleb128 0x1
 7794 05cf 09710000 		.4byte	.LASF427
 7795 05d3 05       		.byte	0x5
 7796 05d4 01       		.uleb128 0x1
 7797 05d5 D2590000 		.4byte	.LASF428
 7798 05d9 05       		.byte	0x5
 7799 05da 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 186


 7800 05db E9010000 		.4byte	.LASF429
 7801 05df 05       		.byte	0x5
 7802 05e0 01       		.uleb128 0x1
 7803 05e1 86030000 		.4byte	.LASF430
 7804 05e5 05       		.byte	0x5
 7805 05e6 01       		.uleb128 0x1
 7806 05e7 97570000 		.4byte	.LASF431
 7807 05eb 05       		.byte	0x5
 7808 05ec 01       		.uleb128 0x1
 7809 05ed 4E3D0000 		.4byte	.LASF432
 7810 05f1 05       		.byte	0x5
 7811 05f2 01       		.uleb128 0x1
 7812 05f3 B55B0000 		.4byte	.LASF433
 7813 05f7 05       		.byte	0x5
 7814 05f8 01       		.uleb128 0x1
 7815 05f9 67770000 		.4byte	.LASF434
 7816 05fd 05       		.byte	0x5
 7817 05fe 01       		.uleb128 0x1
 7818 05ff 27560000 		.4byte	.LASF435
 7819 0603 05       		.byte	0x5
 7820 0604 01       		.uleb128 0x1
 7821 0605 B4360000 		.4byte	.LASF436
 7822 0609 05       		.byte	0x5
 7823 060a 01       		.uleb128 0x1
 7824 060b C2010000 		.4byte	.LASF437
 7825 060f 05       		.byte	0x5
 7826 0610 01       		.uleb128 0x1
 7827 0611 A22F0000 		.4byte	.LASF438
 7828 0615 05       		.byte	0x5
 7829 0616 01       		.uleb128 0x1
 7830 0617 D31C0000 		.4byte	.LASF439
 7831 061b 05       		.byte	0x5
 7832 061c 01       		.uleb128 0x1
 7833 061d EB210000 		.4byte	.LASF440
 7834 0621 05       		.byte	0x5
 7835 0622 01       		.uleb128 0x1
 7836 0623 0A700000 		.4byte	.LASF441
 7837 0627 05       		.byte	0x5
 7838 0628 01       		.uleb128 0x1
 7839 0629 3B710000 		.4byte	.LASF442
 7840 062d 05       		.byte	0x5
 7841 062e 01       		.uleb128 0x1
 7842 062f 13050000 		.4byte	.LASF443
 7843 0633 05       		.byte	0x5
 7844 0634 01       		.uleb128 0x1
 7845 0635 88270000 		.4byte	.LASF444
 7846 0639 05       		.byte	0x5
 7847 063a 01       		.uleb128 0x1
 7848 063b 5A6E0000 		.4byte	.LASF445
 7849 063f 05       		.byte	0x5
 7850 0640 01       		.uleb128 0x1
 7851 0641 435E0000 		.4byte	.LASF446
 7852 0645 05       		.byte	0x5
 7853 0646 01       		.uleb128 0x1
 7854 0647 2F7A0000 		.4byte	.LASF447
 7855 064b 05       		.byte	0x5
 7856 064c 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 187


 7857 064d B77D0000 		.4byte	.LASF448
 7858 0651 05       		.byte	0x5
 7859 0652 01       		.uleb128 0x1
 7860 0653 B20E0000 		.4byte	.LASF449
 7861 0657 05       		.byte	0x5
 7862 0658 01       		.uleb128 0x1
 7863 0659 CB050000 		.4byte	.LASF450
 7864 065d 05       		.byte	0x5
 7865 065e 01       		.uleb128 0x1
 7866 065f 0A580000 		.4byte	.LASF451
 7867 0663 05       		.byte	0x5
 7868 0664 01       		.uleb128 0x1
 7869 0665 3E5C0000 		.4byte	.LASF452
 7870 0669 05       		.byte	0x5
 7871 066a 01       		.uleb128 0x1
 7872 066b 16210000 		.4byte	.LASF453
 7873 066f 05       		.byte	0x5
 7874 0670 01       		.uleb128 0x1
 7875 0671 C4020000 		.4byte	.LASF454
 7876 0675 05       		.byte	0x5
 7877 0676 01       		.uleb128 0x1
 7878 0677 744A0000 		.4byte	.LASF455
 7879 067b 05       		.byte	0x5
 7880 067c 01       		.uleb128 0x1
 7881 067d BA2B0000 		.4byte	.LASF456
 7882 0681 05       		.byte	0x5
 7883 0682 01       		.uleb128 0x1
 7884 0683 540F0000 		.4byte	.LASF457
 7885 0687 05       		.byte	0x5
 7886 0688 01       		.uleb128 0x1
 7887 0689 BC580000 		.4byte	.LASF458
 7888 068d 05       		.byte	0x5
 7889 068e 01       		.uleb128 0x1
 7890 068f 370E0000 		.4byte	.LASF459
 7891 0693 05       		.byte	0x5
 7892 0694 01       		.uleb128 0x1
 7893 0695 9C520000 		.4byte	.LASF460
 7894 0699 05       		.byte	0x5
 7895 069a 01       		.uleb128 0x1
 7896 069b 2E460000 		.4byte	.LASF461
 7897 069f 05       		.byte	0x5
 7898 06a0 01       		.uleb128 0x1
 7899 06a1 213A0000 		.4byte	.LASF462
 7900 06a5 05       		.byte	0x5
 7901 06a6 01       		.uleb128 0x1
 7902 06a7 9E5A0000 		.4byte	.LASF463
 7903 06ab 05       		.byte	0x5
 7904 06ac 01       		.uleb128 0x1
 7905 06ad 667A0000 		.4byte	.LASF464
 7906 06b1 05       		.byte	0x5
 7907 06b2 01       		.uleb128 0x1
 7908 06b3 7E240000 		.4byte	.LASF465
 7909 06b7 05       		.byte	0x5
 7910 06b8 01       		.uleb128 0x1
 7911 06b9 E20F0000 		.4byte	.LASF466
 7912 06bd 05       		.byte	0x5
 7913 06be 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 188


 7914 06bf DC5D0000 		.4byte	.LASF467
 7915 06c3 05       		.byte	0x5
 7916 06c4 01       		.uleb128 0x1
 7917 06c5 99330000 		.4byte	.LASF468
 7918 06c9 05       		.byte	0x5
 7919 06ca 01       		.uleb128 0x1
 7920 06cb FF260000 		.4byte	.LASF469
 7921 06cf 05       		.byte	0x5
 7922 06d0 01       		.uleb128 0x1
 7923 06d1 AC7C0000 		.4byte	.LASF470
 7924 06d5 05       		.byte	0x5
 7925 06d6 01       		.uleb128 0x1
 7926 06d7 562A0000 		.4byte	.LASF471
 7927 06db 05       		.byte	0x5
 7928 06dc 01       		.uleb128 0x1
 7929 06dd 9F510000 		.4byte	.LASF472
 7930 06e1 05       		.byte	0x5
 7931 06e2 01       		.uleb128 0x1
 7932 06e3 4B000000 		.4byte	.LASF473
 7933 06e7 05       		.byte	0x5
 7934 06e8 01       		.uleb128 0x1
 7935 06e9 4C1E0000 		.4byte	.LASF474
 7936 06ed 05       		.byte	0x5
 7937 06ee 01       		.uleb128 0x1
 7938 06ef 7C4C0000 		.4byte	.LASF475
 7939 06f3 05       		.byte	0x5
 7940 06f4 01       		.uleb128 0x1
 7941 06f5 83230000 		.4byte	.LASF476
 7942 06f9 05       		.byte	0x5
 7943 06fa 01       		.uleb128 0x1
 7944 06fb CA140000 		.4byte	.LASF477
 7945 06ff 05       		.byte	0x5
 7946 0700 01       		.uleb128 0x1
 7947 0701 6E6A0000 		.4byte	.LASF478
 7948 0705 05       		.byte	0x5
 7949 0706 01       		.uleb128 0x1
 7950 0707 1C190000 		.4byte	.LASF479
 7951 070b 05       		.byte	0x5
 7952 070c 01       		.uleb128 0x1
 7953 070d FA6F0000 		.4byte	.LASF480
 7954 0711 05       		.byte	0x5
 7955 0712 01       		.uleb128 0x1
 7956 0713 12660000 		.4byte	.LASF481
 7957 0717 05       		.byte	0x5
 7958 0718 01       		.uleb128 0x1
 7959 0719 E72F0000 		.4byte	.LASF482
 7960 071d 05       		.byte	0x5
 7961 071e 01       		.uleb128 0x1
 7962 071f AA1C0000 		.4byte	.LASF483
 7963 0723 05       		.byte	0x5
 7964 0724 01       		.uleb128 0x1
 7965 0725 C36A0000 		.4byte	.LASF484
 7966 0729 05       		.byte	0x5
 7967 072a 01       		.uleb128 0x1
 7968 072b D1000000 		.4byte	.LASF485
 7969 072f 05       		.byte	0x5
 7970 0730 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 189


 7971 0731 FF3C0000 		.4byte	.LASF486
 7972 0735 05       		.byte	0x5
 7973 0736 01       		.uleb128 0x1
 7974 0737 93230000 		.4byte	.LASF487
 7975 073b 05       		.byte	0x5
 7976 073c 01       		.uleb128 0x1
 7977 073d E9580000 		.4byte	.LASF488
 7978 0741 05       		.byte	0x5
 7979 0742 01       		.uleb128 0x1
 7980 0743 683E0000 		.4byte	.LASF489
 7981 0747 05       		.byte	0x5
 7982 0748 01       		.uleb128 0x1
 7983 0749 2D4D0000 		.4byte	.LASF490
 7984 074d 05       		.byte	0x5
 7985 074e 01       		.uleb128 0x1
 7986 074f 4B390000 		.4byte	.LASF491
 7987 0753 05       		.byte	0x5
 7988 0754 01       		.uleb128 0x1
 7989 0755 CA0E0000 		.4byte	.LASF492
 7990 0759 05       		.byte	0x5
 7991 075a 01       		.uleb128 0x1
 7992 075b B0000000 		.4byte	.LASF493
 7993 075f 05       		.byte	0x5
 7994 0760 01       		.uleb128 0x1
 7995 0761 42290000 		.4byte	.LASF494
 7996 0765 05       		.byte	0x5
 7997 0766 01       		.uleb128 0x1
 7998 0767 3E600000 		.4byte	.LASF495
 7999 076b 05       		.byte	0x5
 8000 076c 01       		.uleb128 0x1
 8001 076d 303D0000 		.4byte	.LASF496
 8002 0771 05       		.byte	0x5
 8003 0772 01       		.uleb128 0x1
 8004 0773 8C240000 		.4byte	.LASF497
 8005 0777 05       		.byte	0x5
 8006 0778 01       		.uleb128 0x1
 8007 0779 86290000 		.4byte	.LASF498
 8008 077d 05       		.byte	0x5
 8009 077e 01       		.uleb128 0x1
 8010 077f D4100000 		.4byte	.LASF499
 8011 0783 05       		.byte	0x5
 8012 0784 01       		.uleb128 0x1
 8013 0785 86770000 		.4byte	.LASF500
 8014 0789 05       		.byte	0x5
 8015 078a 01       		.uleb128 0x1
 8016 078b FA220000 		.4byte	.LASF501
 8017 078f 05       		.byte	0x5
 8018 0790 01       		.uleb128 0x1
 8019 0791 A2440000 		.4byte	.LASF502
 8020 0795 05       		.byte	0x5
 8021 0796 01       		.uleb128 0x1
 8022 0797 C5700000 		.4byte	.LASF503
 8023 079b 05       		.byte	0x5
 8024 079c 01       		.uleb128 0x1
 8025 079d 234B0000 		.4byte	.LASF504
 8026 07a1 05       		.byte	0x5
 8027 07a2 01       		.uleb128 0x1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 190


 8028 07a3 D9700000 		.4byte	.LASF505
 8029 07a7 05       		.byte	0x5
 8030 07a8 01       		.uleb128 0x1
 8031 07a9 894F0000 		.4byte	.LASF506
 8032 07ad 05       		.byte	0x5
 8033 07ae 01       		.uleb128 0x1
 8034 07af A2090000 		.4byte	.LASF507
 8035 07b3 05       		.byte	0x5
 8036 07b4 01       		.uleb128 0x1
 8037 07b5 9D790000 		.4byte	.LASF508
 8038 07b9 05       		.byte	0x5
 8039 07ba 01       		.uleb128 0x1
 8040 07bb C2440000 		.4byte	.LASF509
 8041 07bf 05       		.byte	0x5
 8042 07c0 01       		.uleb128 0x1
 8043 07c1 515E0000 		.4byte	.LASF510
 8044 07c5 05       		.byte	0x5
 8045 07c6 01       		.uleb128 0x1
 8046 07c7 185E0000 		.4byte	.LASF511
 8047 07cb 05       		.byte	0x5
 8048 07cc 01       		.uleb128 0x1
 8049 07cd D0340000 		.4byte	.LASF512
 8050 07d1 05       		.byte	0x5
 8051 07d2 01       		.uleb128 0x1
 8052 07d3 18290000 		.4byte	.LASF513
 8053 07d7 05       		.byte	0x5
 8054 07d8 01       		.uleb128 0x1
 8055 07d9 0E160000 		.4byte	.LASF514
 8056 07dd 05       		.byte	0x5
 8057 07de 01       		.uleb128 0x1
 8058 07df 13490000 		.4byte	.LASF515
 8059 07e3 05       		.byte	0x5
 8060 07e4 01       		.uleb128 0x1
 8061 07e5 812B0000 		.4byte	.LASF516
 8062 07e9 05       		.byte	0x5
 8063 07ea 01       		.uleb128 0x1
 8064 07eb A67F0000 		.4byte	.LASF517
 8065 07ef 05       		.byte	0x5
 8066 07f0 01       		.uleb128 0x1
 8067 07f1 692B0000 		.4byte	.LASF518
 8068 07f5 05       		.byte	0x5
 8069 07f6 01       		.uleb128 0x1
 8070 07f7 0E000000 		.4byte	.LASF519
 8071 07fb 05       		.byte	0x5
 8072 07fc 01       		.uleb128 0x1
 8073 07fd 0E5E0000 		.4byte	.LASF520
 8074 0801 05       		.byte	0x5
 8075 0802 00       		.uleb128 0
 8076 0803 E06C0000 		.4byte	.LASF521
 8077 0807 05       		.byte	0x5
 8078 0808 00       		.uleb128 0
 8079 0809 39190000 		.4byte	.LASF522
 8080 080d 05       		.byte	0x5
 8081 080e 00       		.uleb128 0
 8082 080f 2A6E0000 		.4byte	.LASF523
 8083 0813 05       		.byte	0x5
 8084 0814 00       		.uleb128 0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 191


 8085 0815 B5280000 		.4byte	.LASF524
 8086 0819 05       		.byte	0x5
 8087 081a 00       		.uleb128 0
 8088 081b C3670000 		.4byte	.LASF525
 8089 081f 05       		.byte	0x5
 8090 0820 00       		.uleb128 0
 8091 0821 AF4B0000 		.4byte	.LASF526
 8092 0825 05       		.byte	0x5
 8093 0826 00       		.uleb128 0
 8094 0827 0F0F0000 		.4byte	.LASF527
 8095 082b 05       		.byte	0x5
 8096 082c 00       		.uleb128 0
 8097 082d 4B250000 		.4byte	.LASF528
 8098 0831 05       		.byte	0x5
 8099 0832 00       		.uleb128 0
 8100 0833 C8190000 		.4byte	.LASF529
 8101 0837 05       		.byte	0x5
 8102 0838 00       		.uleb128 0
 8103 0839 FC500000 		.4byte	.LASF530
 8104 083d 05       		.byte	0x5
 8105 083e 00       		.uleb128 0
 8106 083f 60680000 		.4byte	.LASF531
 8107 0843 00       		.byte	0
 8108              		.section	.debug_macro,"G",%progbits,wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a,comdat
 8109              	.Ldebug_macro2:
 8110 0000 0400     		.2byte	0x4
 8111 0002 00       		.byte	0
 8112 0003 05       		.byte	0x5
 8113 0004 08       		.uleb128 0x8
 8114 0005 CE300000 		.4byte	.LASF532
 8115 0009 05       		.byte	0x5
 8116 000a 0E       		.uleb128 0xe
 8117 000b 7A540000 		.4byte	.LASF533
 8118 000f 05       		.byte	0x5
 8119 0010 15       		.uleb128 0x15
 8120 0011 E57D0000 		.4byte	.LASF534
 8121 0015 05       		.byte	0x5
 8122 0016 18       		.uleb128 0x18
 8123 0017 D36D0000 		.4byte	.LASF535
 8124 001b 05       		.byte	0x5
 8125 001c 28       		.uleb128 0x28
 8126 001d D0260000 		.4byte	.LASF536
 8127 0021 05       		.byte	0x5
 8128 0022 32       		.uleb128 0x32
 8129 0023 AD670000 		.4byte	.LASF537
 8130 0027 05       		.byte	0x5
 8131 0028 36       		.uleb128 0x36
 8132 0029 653D0000 		.4byte	.LASF538
 8133 002d 05       		.byte	0x5
 8134 002e 39       		.uleb128 0x39
 8135 002f 73210000 		.4byte	.LASF539
 8136 0033 05       		.byte	0x5
 8137 0034 3C       		.uleb128 0x3c
 8138 0035 BB140000 		.4byte	.LASF540
 8139 0039 00       		.byte	0
 8140              		.section	.debug_macro,"G",%progbits,wm4.config.h.148.52fe83653334d06815a0c57b59a3e584,comdat
 8141              	.Ldebug_macro3:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 192


 8142 0000 0400     		.2byte	0x4
 8143 0002 00       		.byte	0
 8144 0003 05       		.byte	0x5
 8145 0004 9401     		.uleb128 0x94
 8146 0006 1B730000 		.4byte	.LASF541
 8147 000a 05       		.byte	0x5
 8148 000b B801     		.uleb128 0xb8
 8149 000d F50D0000 		.4byte	.LASF542
 8150 0011 06       		.byte	0x6
 8151 0012 BE01     		.uleb128 0xbe
 8152 0014 C9100000 		.4byte	.LASF543
 8153 0018 05       		.byte	0x5
 8154 0019 C201     		.uleb128 0xc2
 8155 001b 86520000 		.4byte	.LASF544
 8156 001f 05       		.byte	0x5
 8157 0020 D601     		.uleb128 0xd6
 8158 0022 313B0000 		.4byte	.LASF545
 8159 0026 05       		.byte	0x5
 8160 0027 DA01     		.uleb128 0xda
 8161 0029 634C0000 		.4byte	.LASF546
 8162 002d 05       		.byte	0x5
 8163 002e E101     		.uleb128 0xe1
 8164 0030 11200000 		.4byte	.LASF547
 8165 0034 00       		.byte	0
 8166              		.section	.debug_macro,"G",%progbits,wm4._ansi.h.23.8aa39ec63c47b0c474529e4131d42f04,comdat
 8167              	.Ldebug_macro4:
 8168 0000 0400     		.2byte	0x4
 8169 0002 00       		.byte	0
 8170 0003 05       		.byte	0x5
 8171 0004 17       		.uleb128 0x17
 8172 0005 D0670000 		.4byte	.LASF548
 8173 0009 05       		.byte	0x5
 8174 000a 2E       		.uleb128 0x2e
 8175 000b DC4D0000 		.4byte	.LASF549
 8176 000f 05       		.byte	0x5
 8177 0010 2F       		.uleb128 0x2f
 8178 0011 B9270000 		.4byte	.LASF550
 8179 0015 05       		.byte	0x5
 8180 0016 30       		.uleb128 0x30
 8181 0017 AE450000 		.4byte	.LASF551
 8182 001b 05       		.byte	0x5
 8183 001c 34       		.uleb128 0x34
 8184 001d 70790000 		.4byte	.LASF552
 8185 0021 05       		.byte	0x5
 8186 0022 35       		.uleb128 0x35
 8187 0023 46560000 		.4byte	.LASF553
 8188 0027 05       		.byte	0x5
 8189 0028 36       		.uleb128 0x36
 8190 0029 275F0000 		.4byte	.LASF554
 8191 002d 05       		.byte	0x5
 8192 002e 37       		.uleb128 0x37
 8193 002f 6B120000 		.4byte	.LASF555
 8194 0033 05       		.byte	0x5
 8195 0034 38       		.uleb128 0x38
 8196 0035 C5210000 		.4byte	.LASF556
 8197 0039 05       		.byte	0x5
 8198 003a 39       		.uleb128 0x39
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 193


 8199 003b 0E270000 		.4byte	.LASF557
 8200 003f 05       		.byte	0x5
 8201 0040 3A       		.uleb128 0x3a
 8202 0041 AC3D0000 		.4byte	.LASF558
 8203 0045 05       		.byte	0x5
 8204 0046 3B       		.uleb128 0x3b
 8205 0047 FE700000 		.4byte	.LASF559
 8206 004b 05       		.byte	0x5
 8207 004c 42       		.uleb128 0x42
 8208 004d AC490000 		.4byte	.LASF560
 8209 0051 05       		.byte	0x5
 8210 0052 43       		.uleb128 0x43
 8211 0053 8E060000 		.4byte	.LASF561
 8212 0057 05       		.byte	0x5
 8213 0058 44       		.uleb128 0x44
 8214 0059 4B4D0000 		.4byte	.LASF562
 8215 005d 05       		.byte	0x5
 8216 005e 45       		.uleb128 0x45
 8217 005f 00220000 		.4byte	.LASF563
 8218 0063 05       		.byte	0x5
 8219 0064 47       		.uleb128 0x47
 8220 0065 FA250000 		.4byte	.LASF564
 8221 0069 05       		.byte	0x5
 8222 006a 48       		.uleb128 0x48
 8223 006b 870D0000 		.4byte	.LASF565
 8224 006f 05       		.byte	0x5
 8225 0070 49       		.uleb128 0x49
 8226 0071 FC5D0000 		.4byte	.LASF566
 8227 0075 05       		.byte	0x5
 8228 0076 4B       		.uleb128 0x4b
 8229 0077 40020000 		.4byte	.LASF567
 8230 007b 05       		.byte	0x5
 8231 007c 4E       		.uleb128 0x4e
 8232 007d F21C0000 		.4byte	.LASF568
 8233 0081 05       		.byte	0x5
 8234 0082 51       		.uleb128 0x51
 8235 0083 A9170000 		.4byte	.LASF569
 8236 0087 05       		.byte	0x5
 8237 0088 6B       		.uleb128 0x6b
 8238 0089 E66A0000 		.4byte	.LASF570
 8239 008d 05       		.byte	0x5
 8240 008e 8201     		.uleb128 0x82
 8241 0090 AA390000 		.4byte	.LASF571
 8242 0094 00       		.byte	0
 8243              		.section	.debug_macro,"G",%progbits,wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9,comdat
 8244              	.Ldebug_macro5:
 8245 0000 0400     		.2byte	0x4
 8246 0002 00       		.byte	0
 8247 0003 05       		.byte	0x5
 8248 0004 1F       		.uleb128 0x1f
 8249 0005 C54F0000 		.4byte	.LASF572
 8250 0009 05       		.byte	0x5
 8251 000a 21       		.uleb128 0x21
 8252 000b 6F240000 		.4byte	.LASF573
 8253 000f 00       		.byte	0
 8254              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea,comdat
 8255              	.Ldebug_macro6:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 194


 8256 0000 0400     		.2byte	0x4
 8257 0002 00       		.byte	0
 8258 0003 05       		.byte	0x5
 8259 0004 BB01     		.uleb128 0xbb
 8260 0006 DA140000 		.4byte	.LASF574
 8261 000a 05       		.byte	0x5
 8262 000b BC01     		.uleb128 0xbc
 8263 000d B70A0000 		.4byte	.LASF575
 8264 0011 05       		.byte	0x5
 8265 0012 BD01     		.uleb128 0xbd
 8266 0014 99260000 		.4byte	.LASF576
 8267 0018 05       		.byte	0x5
 8268 0019 BE01     		.uleb128 0xbe
 8269 001b 38130000 		.4byte	.LASF577
 8270 001f 05       		.byte	0x5
 8271 0020 BF01     		.uleb128 0xbf
 8272 0022 5B360000 		.4byte	.LASF578
 8273 0026 05       		.byte	0x5
 8274 0027 C001     		.uleb128 0xc0
 8275 0029 945C0000 		.4byte	.LASF579
 8276 002d 05       		.byte	0x5
 8277 002e C101     		.uleb128 0xc1
 8278 0030 7D2F0000 		.4byte	.LASF580
 8279 0034 05       		.byte	0x5
 8280 0035 C201     		.uleb128 0xc2
 8281 0037 A23D0000 		.4byte	.LASF581
 8282 003b 05       		.byte	0x5
 8283 003c C301     		.uleb128 0xc3
 8284 003e AD5C0000 		.4byte	.LASF582
 8285 0042 05       		.byte	0x5
 8286 0043 C401     		.uleb128 0xc4
 8287 0045 3F470000 		.4byte	.LASF583
 8288 0049 05       		.byte	0x5
 8289 004a C501     		.uleb128 0xc5
 8290 004c F9570000 		.4byte	.LASF584
 8291 0050 05       		.byte	0x5
 8292 0051 C601     		.uleb128 0xc6
 8293 0053 E91E0000 		.4byte	.LASF585
 8294 0057 05       		.byte	0x5
 8295 0058 C701     		.uleb128 0xc7
 8296 005a AD160000 		.4byte	.LASF586
 8297 005e 05       		.byte	0x5
 8298 005f C801     		.uleb128 0xc8
 8299 0061 3B1F0000 		.4byte	.LASF587
 8300 0065 05       		.byte	0x5
 8301 0066 C901     		.uleb128 0xc9
 8302 0068 48720000 		.4byte	.LASF588
 8303 006c 05       		.byte	0x5
 8304 006d CA01     		.uleb128 0xca
 8305 006f A4600000 		.4byte	.LASF589
 8306 0073 05       		.byte	0x5
 8307 0074 CF01     		.uleb128 0xcf
 8308 0076 A70D0000 		.4byte	.LASF590
 8309 007a 06       		.byte	0x6
 8310 007b EB01     		.uleb128 0xeb
 8311 007d 7D3D0000 		.4byte	.LASF591
 8312 0081 06       		.byte	0x6
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 195


 8313 0082 9903     		.uleb128 0x199
 8314 0084 CC2F0000 		.4byte	.LASF592
 8315 0088 00       		.byte	0
 8316              		.section	.debug_macro,"G",%progbits,wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6,comdat
 8317              	.Ldebug_macro7:
 8318 0000 0400     		.2byte	0x4
 8319 0002 00       		.byte	0
 8320 0003 06       		.byte	0x6
 8321 0004 22       		.uleb128 0x22
 8322 0005 557A0000 		.4byte	.LASF593
 8323 0009 05       		.byte	0x5
 8324 000a 27       		.uleb128 0x27
 8325 000b 352B0000 		.4byte	.LASF594
 8326 000f 00       		.byte	0
 8327              		.section	.debug_macro,"G",%progbits,wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91,comdat
 8328              	.Ldebug_macro8:
 8329 0000 0400     		.2byte	0x4
 8330 0002 00       		.byte	0
 8331 0003 05       		.byte	0x5
 8332 0004 06       		.uleb128 0x6
 8333 0005 15510000 		.4byte	.LASF595
 8334 0009 05       		.byte	0x5
 8335 000a 12       		.uleb128 0x12
 8336 000b 60450000 		.4byte	.LASF596
 8337 000f 05       		.byte	0x5
 8338 0010 1C       		.uleb128 0x1c
 8339 0011 67330000 		.4byte	.LASF597
 8340 0015 05       		.byte	0x5
 8341 0016 26       		.uleb128 0x26
 8342 0017 1F260000 		.4byte	.LASF598
 8343 001b 05       		.byte	0x5
 8344 001c 30       		.uleb128 0x30
 8345 001d 6B140000 		.4byte	.LASF599
 8346 0021 05       		.byte	0x5
 8347 0022 3C       		.uleb128 0x3c
 8348 0023 F9430000 		.4byte	.LASF600
 8349 0027 05       		.byte	0x5
 8350 0028 4E       		.uleb128 0x4e
 8351 0029 872F0000 		.4byte	.LASF601
 8352 002d 05       		.byte	0x5
 8353 002e 65       		.uleb128 0x65
 8354 002f 94550000 		.4byte	.LASF602
 8355 0033 06       		.byte	0x6
 8356 0034 73       		.uleb128 0x73
 8357 0035 8E550000 		.4byte	.LASF603
 8358 0039 00       		.byte	0
 8359              		.section	.debug_macro,"G",%progbits,wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea,comdat
 8360              	.Ldebug_macro9:
 8361 0000 0400     		.2byte	0x4
 8362 0002 00       		.byte	0
 8363 0003 05       		.byte	0x5
 8364 0004 02       		.uleb128 0x2
 8365 0005 8B7F0000 		.4byte	.LASF604
 8366 0009 05       		.byte	0x5
 8367 000a 0B       		.uleb128 0xb
 8368 000b DA510000 		.4byte	.LASF605
 8369 000f 05       		.byte	0x5
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 196


 8370 0010 0C       		.uleb128 0xc
 8371 0011 633A0000 		.4byte	.LASF606
 8372 0015 05       		.byte	0x5
 8373 0016 0D       		.uleb128 0xd
 8374 0017 AC4C0000 		.4byte	.LASF607
 8375 001b 05       		.byte	0x5
 8376 001c 0E       		.uleb128 0xe
 8377 001d E5790000 		.4byte	.LASF608
 8378 0021 05       		.byte	0x5
 8379 0022 0F       		.uleb128 0xf
 8380 0023 C6280000 		.4byte	.LASF609
 8381 0027 05       		.byte	0x5
 8382 0028 10       		.uleb128 0x10
 8383 0029 E70C0000 		.4byte	.LASF610
 8384 002d 05       		.byte	0x5
 8385 002e 11       		.uleb128 0x11
 8386 002f 963B0000 		.4byte	.LASF611
 8387 0033 05       		.byte	0x5
 8388 0034 12       		.uleb128 0x12
 8389 0035 872C0000 		.4byte	.LASF612
 8390 0039 05       		.byte	0x5
 8391 003a 13       		.uleb128 0x13
 8392 003b AB240000 		.4byte	.LASF613
 8393 003f 05       		.byte	0x5
 8394 0040 14       		.uleb128 0x14
 8395 0041 37550000 		.4byte	.LASF614
 8396 0045 05       		.byte	0x5
 8397 0046 15       		.uleb128 0x15
 8398 0047 AE420000 		.4byte	.LASF615
 8399 004b 05       		.byte	0x5
 8400 004c 16       		.uleb128 0x16
 8401 004d 946B0000 		.4byte	.LASF616
 8402 0051 00       		.byte	0
 8403              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47,comdat
 8404              	.Ldebug_macro10:
 8405 0000 0400     		.2byte	0x4
 8406 0002 00       		.byte	0
 8407 0003 05       		.byte	0x5
 8408 0004 DD02     		.uleb128 0x15d
 8409 0006 42240000 		.4byte	.LASF617
 8410 000a 06       		.byte	0x6
 8411 000b E402     		.uleb128 0x164
 8412 000d 4F3B0000 		.4byte	.LASF618
 8413 0011 06       		.byte	0x6
 8414 0012 9903     		.uleb128 0x199
 8415 0014 CC2F0000 		.4byte	.LASF592
 8416 0018 00       		.byte	0
 8417              		.section	.debug_macro,"G",%progbits,wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd,comdat
 8418              	.Ldebug_macro11:
 8419 0000 0400     		.2byte	0x4
 8420 0002 00       		.byte	0
 8421 0003 05       		.byte	0x5
 8422 0004 10       		.uleb128 0x10
 8423 0005 826D0000 		.4byte	.LASF619
 8424 0009 05       		.byte	0x5
 8425 000a 14       		.uleb128 0x14
 8426 000b 98600000 		.4byte	.LASF620
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 197


 8427 000f 05       		.byte	0x5
 8428 0010 45       		.uleb128 0x45
 8429 0011 9D5C0000 		.4byte	.LASF621
 8430 0015 05       		.byte	0x5
 8431 0016 9E01     		.uleb128 0x9e
 8432 0018 FA7D0000 		.4byte	.LASF622
 8433 001c 05       		.byte	0x5
 8434 001d B702     		.uleb128 0x137
 8435 001f 62600000 		.4byte	.LASF623
 8436 0023 05       		.byte	0x5
 8437 0024 B802     		.uleb128 0x138
 8438 0026 093A0000 		.4byte	.LASF624
 8439 002a 05       		.byte	0x5
 8440 002b B902     		.uleb128 0x139
 8441 002d 221D0000 		.4byte	.LASF625
 8442 0031 05       		.byte	0x5
 8443 0032 BA02     		.uleb128 0x13a
 8444 0034 306C0000 		.4byte	.LASF626
 8445 0038 05       		.byte	0x5
 8446 0039 BB02     		.uleb128 0x13b
 8447 003b 08600000 		.4byte	.LASF627
 8448 003f 05       		.byte	0x5
 8449 0040 BC02     		.uleb128 0x13c
 8450 0042 94490000 		.4byte	.LASF628
 8451 0046 05       		.byte	0x5
 8452 0047 BD02     		.uleb128 0x13d
 8453 0049 0B7B0000 		.4byte	.LASF629
 8454 004d 05       		.byte	0x5
 8455 004e C902     		.uleb128 0x149
 8456 0050 6D0F0000 		.4byte	.LASF630
 8457 0054 05       		.byte	0x5
 8458 0055 CA02     		.uleb128 0x14a
 8459 0057 947E0000 		.4byte	.LASF631
 8460 005b 05       		.byte	0x5
 8461 005c CB02     		.uleb128 0x14b
 8462 005e DD020000 		.4byte	.LASF632
 8463 0062 05       		.byte	0x5
 8464 0063 AE03     		.uleb128 0x1ae
 8465 0065 76370000 		.4byte	.LASF633
 8466 0069 05       		.byte	0x5
 8467 006a C903     		.uleb128 0x1c9
 8468 006c 3E730000 		.4byte	.LASF634
 8469 0070 05       		.byte	0x5
 8470 0071 EE03     		.uleb128 0x1ee
 8471 0073 855E0000 		.4byte	.LASF635
 8472 0077 05       		.byte	0x5
 8473 0078 F603     		.uleb128 0x1f6
 8474 007a 4A110000 		.4byte	.LASF636
 8475 007e 05       		.byte	0x5
 8476 007f FF03     		.uleb128 0x1ff
 8477 0081 350B0000 		.4byte	.LASF637
 8478 0085 05       		.byte	0x5
 8479 0086 8304     		.uleb128 0x203
 8480 0088 314E0000 		.4byte	.LASF638
 8481 008c 05       		.byte	0x5
 8482 008d 8804     		.uleb128 0x208
 8483 008f 30070000 		.4byte	.LASF639
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 198


 8484 0093 05       		.byte	0x5
 8485 0094 9304     		.uleb128 0x213
 8486 0096 486C0000 		.4byte	.LASF640
 8487 009a 05       		.byte	0x5
 8488 009b 9604     		.uleb128 0x216
 8489 009d 7D2A0000 		.4byte	.LASF641
 8490 00a1 05       		.byte	0x5
 8491 00a2 9C04     		.uleb128 0x21c
 8492 00a4 08430000 		.4byte	.LASF642
 8493 00a8 05       		.byte	0x5
 8494 00a9 9F04     		.uleb128 0x21f
 8495 00ab 53420000 		.4byte	.LASF643
 8496 00af 05       		.byte	0x5
 8497 00b0 A204     		.uleb128 0x222
 8498 00b2 863E0000 		.4byte	.LASF644
 8499 00b6 05       		.byte	0x5
 8500 00b7 B804     		.uleb128 0x238
 8501 00b9 F3490000 		.4byte	.LASF645
 8502 00bd 05       		.byte	0x5
 8503 00be BB04     		.uleb128 0x23b
 8504 00c0 2C030000 		.4byte	.LASF646
 8505 00c4 05       		.byte	0x5
 8506 00c5 BE04     		.uleb128 0x23e
 8507 00c7 32230000 		.4byte	.LASF647
 8508 00cb 05       		.byte	0x5
 8509 00cc BF04     		.uleb128 0x23f
 8510 00ce F75B0000 		.4byte	.LASF648
 8511 00d2 05       		.byte	0x5
 8512 00d3 C004     		.uleb128 0x240
 8513 00d5 94180000 		.4byte	.LASF649
 8514 00d9 05       		.byte	0x5
 8515 00da C104     		.uleb128 0x241
 8516 00dc 70430000 		.4byte	.LASF650
 8517 00e0 05       		.byte	0x5
 8518 00e1 C204     		.uleb128 0x242
 8519 00e3 97010000 		.4byte	.LASF651
 8520 00e7 05       		.byte	0x5
 8521 00e8 C304     		.uleb128 0x243
 8522 00ea E6770000 		.4byte	.LASF652
 8523 00ee 05       		.byte	0x5
 8524 00ef C404     		.uleb128 0x244
 8525 00f1 7D780000 		.4byte	.LASF653
 8526 00f5 05       		.byte	0x5
 8527 00f6 C504     		.uleb128 0x245
 8528 00f8 402C0000 		.4byte	.LASF654
 8529 00fc 05       		.byte	0x5
 8530 00fd C604     		.uleb128 0x246
 8531 00ff B6760000 		.4byte	.LASF655
 8532 0103 05       		.byte	0x5
 8533 0104 C704     		.uleb128 0x247
 8534 0106 022E0000 		.4byte	.LASF656
 8535 010a 05       		.byte	0x5
 8536 010b C804     		.uleb128 0x248
 8537 010d 565F0000 		.4byte	.LASF657
 8538 0111 05       		.byte	0x5
 8539 0112 C904     		.uleb128 0x249
 8540 0114 AC250000 		.4byte	.LASF658
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 199


 8541 0118 05       		.byte	0x5
 8542 0119 CA04     		.uleb128 0x24a
 8543 011b 8C150000 		.4byte	.LASF659
 8544 011f 05       		.byte	0x5
 8545 0120 CB04     		.uleb128 0x24b
 8546 0122 08770000 		.4byte	.LASF660
 8547 0126 05       		.byte	0x5
 8548 0127 CC04     		.uleb128 0x24c
 8549 0129 2C280000 		.4byte	.LASF661
 8550 012d 05       		.byte	0x5
 8551 012e CD04     		.uleb128 0x24d
 8552 0130 77500000 		.4byte	.LASF662
 8553 0134 05       		.byte	0x5
 8554 0135 CE04     		.uleb128 0x24e
 8555 0137 64460000 		.4byte	.LASF663
 8556 013b 05       		.byte	0x5
 8557 013c CF04     		.uleb128 0x24f
 8558 013e 2A100000 		.4byte	.LASF664
 8559 0142 05       		.byte	0x5
 8560 0143 D004     		.uleb128 0x250
 8561 0145 72050000 		.4byte	.LASF665
 8562 0149 05       		.byte	0x5
 8563 014a D104     		.uleb128 0x251
 8564 014c BA3B0000 		.4byte	.LASF666
 8565 0150 05       		.byte	0x5
 8566 0151 D204     		.uleb128 0x252
 8567 0153 9F5D0000 		.4byte	.LASF667
 8568 0157 05       		.byte	0x5
 8569 0158 D304     		.uleb128 0x253
 8570 015a DD660000 		.4byte	.LASF668
 8571 015e 05       		.byte	0x5
 8572 015f D404     		.uleb128 0x254
 8573 0161 44570000 		.4byte	.LASF669
 8574 0165 05       		.byte	0x5
 8575 0166 D504     		.uleb128 0x255
 8576 0168 1F250000 		.4byte	.LASF670
 8577 016c 05       		.byte	0x5
 8578 016d BD06     		.uleb128 0x33d
 8579 016f 0F030000 		.4byte	.LASF671
 8580 0173 05       		.byte	0x5
 8581 0174 C506     		.uleb128 0x345
 8582 0176 7A6B0000 		.4byte	.LASF672
 8583 017a 05       		.byte	0x5
 8584 017b D706     		.uleb128 0x357
 8585 017d 34260000 		.4byte	.LASF673
 8586 0181 05       		.byte	0x5
 8587 0182 DC06     		.uleb128 0x35c
 8588 0184 93650000 		.4byte	.LASF674
 8589 0188 00       		.byte	0
 8590              		.section	.debug_macro,"G",%progbits,wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9,comdat
 8591              	.Ldebug_macro12:
 8592 0000 0400     		.2byte	0x4
 8593 0002 00       		.byte	0
 8594 0003 05       		.byte	0x5
 8595 0004 17       		.uleb128 0x17
 8596 0005 DA150000 		.4byte	.LASF675
 8597 0009 05       		.byte	0x5
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 200


 8598 000a 3C       		.uleb128 0x3c
 8599 000b FB270000 		.4byte	.LASF676
 8600 000f 00       		.byte	0
 8601              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.40.cf962ebbec441b3ac67502735f0765db,comdat
 8602              	.Ldebug_macro13:
 8603 0000 0400     		.2byte	0x4
 8604 0002 00       		.byte	0
 8605 0003 05       		.byte	0x5
 8606 0004 28       		.uleb128 0x28
 8607 0005 226A0000 		.4byte	.LASF677
 8608 0009 05       		.byte	0x5
 8609 000a 29       		.uleb128 0x29
 8610 000b 6E540000 		.4byte	.LASF678
 8611 000f 05       		.byte	0x5
 8612 0010 2B       		.uleb128 0x2b
 8613 0011 C8310000 		.4byte	.LASF679
 8614 0015 05       		.byte	0x5
 8615 0016 2D       		.uleb128 0x2d
 8616 0017 265D0000 		.4byte	.LASF680
 8617 001b 05       		.byte	0x5
 8618 001c 8B01     		.uleb128 0x8b
 8619 001e FC410000 		.4byte	.LASF681
 8620 0022 05       		.byte	0x5
 8621 0023 8C01     		.uleb128 0x8c
 8622 0025 F73A0000 		.4byte	.LASF682
 8623 0029 05       		.byte	0x5
 8624 002a 8D01     		.uleb128 0x8d
 8625 002c 684A0000 		.4byte	.LASF683
 8626 0030 05       		.byte	0x5
 8627 0031 8E01     		.uleb128 0x8e
 8628 0033 AF580000 		.4byte	.LASF684
 8629 0037 05       		.byte	0x5
 8630 0038 8F01     		.uleb128 0x8f
 8631 003a 536D0000 		.4byte	.LASF685
 8632 003e 05       		.byte	0x5
 8633 003f 9001     		.uleb128 0x90
 8634 0041 390D0000 		.4byte	.LASF686
 8635 0045 05       		.byte	0x5
 8636 0046 9101     		.uleb128 0x91
 8637 0048 585D0000 		.4byte	.LASF687
 8638 004c 05       		.byte	0x5
 8639 004d 9201     		.uleb128 0x92
 8640 004f 5F510000 		.4byte	.LASF688
 8641 0053 06       		.byte	0x6
 8642 0054 A101     		.uleb128 0xa1
 8643 0056 2B6D0000 		.4byte	.LASF689
 8644 005a 06       		.byte	0x6
 8645 005b EB01     		.uleb128 0xeb
 8646 005d 7D3D0000 		.4byte	.LASF591
 8647 0061 05       		.byte	0x5
 8648 0062 8802     		.uleb128 0x108
 8649 0064 90790000 		.4byte	.LASF690
 8650 0068 05       		.byte	0x5
 8651 0069 8902     		.uleb128 0x109
 8652 006b 3A4B0000 		.4byte	.LASF691
 8653 006f 05       		.byte	0x5
 8654 0070 8A02     		.uleb128 0x10a
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 201


 8655 0072 AE500000 		.4byte	.LASF692
 8656 0076 05       		.byte	0x5
 8657 0077 8B02     		.uleb128 0x10b
 8658 0079 79720000 		.4byte	.LASF693
 8659 007d 05       		.byte	0x5
 8660 007e 8C02     		.uleb128 0x10c
 8661 0080 1C5D0000 		.4byte	.LASF694
 8662 0084 05       		.byte	0x5
 8663 0085 8D02     		.uleb128 0x10d
 8664 0087 B0430000 		.4byte	.LASF695
 8665 008b 05       		.byte	0x5
 8666 008c 8E02     		.uleb128 0x10e
 8667 008e 5D5E0000 		.4byte	.LASF696
 8668 0092 05       		.byte	0x5
 8669 0093 8F02     		.uleb128 0x10f
 8670 0095 0B2C0000 		.4byte	.LASF697
 8671 0099 05       		.byte	0x5
 8672 009a 9002     		.uleb128 0x110
 8673 009c C57D0000 		.4byte	.LASF698
 8674 00a0 05       		.byte	0x5
 8675 00a1 9102     		.uleb128 0x111
 8676 00a3 A35B0000 		.4byte	.LASF699
 8677 00a7 05       		.byte	0x5
 8678 00a8 9202     		.uleb128 0x112
 8679 00aa 14520000 		.4byte	.LASF700
 8680 00ae 05       		.byte	0x5
 8681 00af 9302     		.uleb128 0x113
 8682 00b1 62710000 		.4byte	.LASF701
 8683 00b5 05       		.byte	0x5
 8684 00b6 9402     		.uleb128 0x114
 8685 00b8 EB5D0000 		.4byte	.LASF702
 8686 00bc 05       		.byte	0x5
 8687 00bd 9502     		.uleb128 0x115
 8688 00bf A14B0000 		.4byte	.LASF703
 8689 00c3 05       		.byte	0x5
 8690 00c4 9602     		.uleb128 0x116
 8691 00c6 56480000 		.4byte	.LASF704
 8692 00ca 06       		.byte	0x6
 8693 00cb A302     		.uleb128 0x123
 8694 00cd ED720000 		.4byte	.LASF705
 8695 00d1 06       		.byte	0x6
 8696 00d2 D802     		.uleb128 0x158
 8697 00d4 070C0000 		.4byte	.LASF706
 8698 00d8 06       		.byte	0x6
 8699 00d9 8E03     		.uleb128 0x18e
 8700 00db BE0F0000 		.4byte	.LASF707
 8701 00df 05       		.byte	0x5
 8702 00e0 9303     		.uleb128 0x193
 8703 00e2 062F0000 		.4byte	.LASF708
 8704 00e6 06       		.byte	0x6
 8705 00e7 9903     		.uleb128 0x199
 8706 00e9 CC2F0000 		.4byte	.LASF592
 8707 00ed 05       		.byte	0x5
 8708 00ee 9E03     		.uleb128 0x19e
 8709 00f0 91380000 		.4byte	.LASF709
 8710 00f4 00       		.byte	0
 8711              		.section	.debug_macro,"G",%progbits,wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400,comdat
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 202


 8712              	.Ldebug_macro14:
 8713 0000 0400     		.2byte	0x4
 8714 0002 00       		.byte	0
 8715 0003 05       		.byte	0x5
 8716 0004 02       		.uleb128 0x2
 8717 0005 593E0000 		.4byte	.LASF710
 8718 0009 05       		.byte	0x5
 8719 000a 0D       		.uleb128 0xd
 8720 000b 26180000 		.4byte	.LASF711
 8721 000f 05       		.byte	0x5
 8722 0010 0E       		.uleb128 0xe
 8723 0011 D24A0000 		.4byte	.LASF712
 8724 0015 05       		.byte	0x5
 8725 0016 0F       		.uleb128 0xf
 8726 0017 855D0000 		.4byte	.LASF713
 8727 001b 05       		.byte	0x5
 8728 001c 10       		.uleb128 0x10
 8729 001d 23370000 		.4byte	.LASF714
 8730 0021 00       		.byte	0
 8731              		.section	.debug_macro,"G",%progbits,wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01,comdat
 8732              	.Ldebug_macro15:
 8733 0000 0400     		.2byte	0x4
 8734 0002 00       		.byte	0
 8735 0003 05       		.byte	0x5
 8736 0004 50       		.uleb128 0x50
 8737 0005 65360000 		.4byte	.LASF715
 8738 0009 05       		.byte	0x5
 8739 000a 57       		.uleb128 0x57
 8740 000b 11480000 		.4byte	.LASF716
 8741 000f 05       		.byte	0x5
 8742 0010 58       		.uleb128 0x58
 8743 0011 97210000 		.4byte	.LASF717
 8744 0015 05       		.byte	0x5
 8745 0016 60       		.uleb128 0x60
 8746 0017 84720000 		.4byte	.LASF718
 8747 001b 05       		.byte	0x5
 8748 001c 69       		.uleb128 0x69
 8749 001d 105B0000 		.4byte	.LASF719
 8750 0021 05       		.byte	0x5
 8751 0022 6E       		.uleb128 0x6e
 8752 0023 3F520000 		.4byte	.LASF720
 8753 0027 05       		.byte	0x5
 8754 0028 CE01     		.uleb128 0xce
 8755 002a D17B0000 		.4byte	.LASF721
 8756 002e 05       		.byte	0x5
 8757 002f CF01     		.uleb128 0xcf
 8758 0031 924A0000 		.4byte	.LASF722
 8759 0035 05       		.byte	0x5
 8760 0036 D701     		.uleb128 0xd7
 8761 0038 99040000 		.4byte	.LASF723
 8762 003c 05       		.byte	0x5
 8763 003d DB01     		.uleb128 0xdb
 8764 003f A5480000 		.4byte	.LASF724
 8765 0043 05       		.byte	0x5
 8766 0044 DD01     		.uleb128 0xdd
 8767 0046 EA7A0000 		.4byte	.LASF725
 8768 004a 05       		.byte	0x5
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 203


 8769 004b E601     		.uleb128 0xe6
 8770 004d 63690000 		.4byte	.LASF726
 8771 0051 05       		.byte	0x5
 8772 0052 E801     		.uleb128 0xe8
 8773 0054 397C0000 		.4byte	.LASF727
 8774 0058 05       		.byte	0x5
 8775 0059 E901     		.uleb128 0xe9
 8776 005b 7E6A0000 		.4byte	.LASF728
 8777 005f 05       		.byte	0x5
 8778 0060 EA01     		.uleb128 0xea
 8779 0062 97720000 		.4byte	.LASF729
 8780 0066 05       		.byte	0x5
 8781 0067 EB01     		.uleb128 0xeb
 8782 0069 DC670000 		.4byte	.LASF730
 8783 006d 06       		.byte	0x6
 8784 006e F401     		.uleb128 0xf4
 8785 0070 12250000 		.4byte	.LASF731
 8786 0074 06       		.byte	0x6
 8787 0075 F501     		.uleb128 0xf5
 8788 0077 F00F0000 		.4byte	.LASF732
 8789 007b 05       		.byte	0x5
 8790 007c FA01     		.uleb128 0xfa
 8791 007e F97E0000 		.4byte	.LASF733
 8792 0082 05       		.byte	0x5
 8793 0083 FF01     		.uleb128 0xff
 8794 0085 EA4F0000 		.4byte	.LASF734
 8795 0089 06       		.byte	0x6
 8796 008a DE03     		.uleb128 0x1de
 8797 008c 4C5C0000 		.4byte	.LASF735
 8798 0090 00       		.byte	0
 8799              		.section	.debug_macro,"G",%progbits,wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a,comdat
 8800              	.Ldebug_macro16:
 8801 0000 0400     		.2byte	0x4
 8802 0002 00       		.byte	0
 8803 0003 05       		.byte	0x5
 8804 0004 02       		.uleb128 0x2
 8805 0005 A6660000 		.4byte	.LASF736
 8806 0009 05       		.byte	0x5
 8807 000a 0D       		.uleb128 0xd
 8808 000b E47B0000 		.4byte	.LASF737
 8809 000f 05       		.byte	0x5
 8810 0010 15       		.uleb128 0x15
 8811 0011 AB520000 		.4byte	.LASF738
 8812 0015 00       		.byte	0
 8813              		.section	.debug_macro,"G",%progbits,wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417,comdat
 8814              	.Ldebug_macro17:
 8815 0000 0400     		.2byte	0x4
 8816 0002 00       		.byte	0
 8817 0003 05       		.byte	0x5
 8818 0004 3F       		.uleb128 0x3f
 8819 0005 B10D0000 		.4byte	.LASF739
 8820 0009 05       		.byte	0x5
 8821 000a 40       		.uleb128 0x40
 8822 000b 80550000 		.4byte	.LASF740
 8823 000f 05       		.byte	0x5
 8824 0010 41       		.uleb128 0x41
 8825 0011 616A0000 		.4byte	.LASF741
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 204


 8826 0015 05       		.byte	0x5
 8827 0016 42       		.uleb128 0x42
 8828 0017 FE710000 		.4byte	.LASF742
 8829 001b 05       		.byte	0x5
 8830 001c 44       		.uleb128 0x44
 8831 001d 1F280000 		.4byte	.LASF743
 8832 0021 05       		.byte	0x5
 8833 0022 45       		.uleb128 0x45
 8834 0023 56460000 		.4byte	.LASF744
 8835 0027 05       		.byte	0x5
 8836 0028 46       		.uleb128 0x46
 8837 0029 D4200000 		.4byte	.LASF745
 8838 002d 05       		.byte	0x5
 8839 002e 47       		.uleb128 0x47
 8840 002f 010F0000 		.4byte	.LASF746
 8841 0033 05       		.byte	0x5
 8842 0034 48       		.uleb128 0x48
 8843 0035 63280000 		.4byte	.LASF747
 8844 0039 05       		.byte	0x5
 8845 003a 49       		.uleb128 0x49
 8846 003b EC0E0000 		.4byte	.LASF748
 8847 003f 05       		.byte	0x5
 8848 0040 4A       		.uleb128 0x4a
 8849 0041 997A0000 		.4byte	.LASF749
 8850 0045 05       		.byte	0x5
 8851 0046 4B       		.uleb128 0x4b
 8852 0047 0A290000 		.4byte	.LASF750
 8853 004b 05       		.byte	0x5
 8854 004c 4C       		.uleb128 0x4c
 8855 004d 2D710000 		.4byte	.LASF751
 8856 0051 05       		.byte	0x5
 8857 0052 4D       		.uleb128 0x4d
 8858 0053 711F0000 		.4byte	.LASF752
 8859 0057 05       		.byte	0x5
 8860 0058 51       		.uleb128 0x51
 8861 0059 C5270000 		.4byte	.LASF753
 8862 005d 05       		.byte	0x5
 8863 005e 54       		.uleb128 0x54
 8864 005f A2000000 		.4byte	.LASF754
 8865 0063 05       		.byte	0x5
 8866 0064 67       		.uleb128 0x67
 8867 0065 2F000000 		.4byte	.LASF755
 8868 0069 05       		.byte	0x5
 8869 006a 68       		.uleb128 0x68
 8870 006b 400A0000 		.4byte	.LASF756
 8871 006f 05       		.byte	0x5
 8872 0070 69       		.uleb128 0x69
 8873 0071 51520000 		.4byte	.LASF757
 8874 0075 05       		.byte	0x5
 8875 0076 70       		.uleb128 0x70
 8876 0077 DE450000 		.4byte	.LASF758
 8877 007b 05       		.byte	0x5
 8878 007c 8601     		.uleb128 0x86
 8879 007e 686E0000 		.4byte	.LASF759
 8880 0082 05       		.byte	0x5
 8881 0083 8C01     		.uleb128 0x8c
 8882 0085 2C190000 		.4byte	.LASF760
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 205


 8883 0089 05       		.byte	0x5
 8884 008a 9201     		.uleb128 0x92
 8885 008c CF4B0000 		.4byte	.LASF761
 8886 0090 05       		.byte	0x5
 8887 0091 9801     		.uleb128 0x98
 8888 0093 51330000 		.4byte	.LASF762
 8889 0097 05       		.byte	0x5
 8890 0098 9B01     		.uleb128 0x9b
 8891 009a B8470000 		.4byte	.LASF763
 8892 009e 05       		.byte	0x5
 8893 009f 9E01     		.uleb128 0x9e
 8894 00a1 D3410000 		.4byte	.LASF764
 8895 00a5 05       		.byte	0x5
 8896 00a6 A401     		.uleb128 0xa4
 8897 00a8 D2020000 		.4byte	.LASF765
 8898 00ac 05       		.byte	0x5
 8899 00ad A701     		.uleb128 0xa7
 8900 00af DA170000 		.4byte	.LASF766
 8901 00b3 05       		.byte	0x5
 8902 00b4 AA01     		.uleb128 0xaa
 8903 00b6 EE430000 		.4byte	.LASF767
 8904 00ba 05       		.byte	0x5
 8905 00bb B601     		.uleb128 0xb6
 8906 00bd 6B090000 		.4byte	.LASF768
 8907 00c1 05       		.byte	0x5
 8908 00c2 B701     		.uleb128 0xb7
 8909 00c4 90640000 		.4byte	.LASF769
 8910 00c8 05       		.byte	0x5
 8911 00c9 B801     		.uleb128 0xb8
 8912 00cb B7260000 		.4byte	.LASF770
 8913 00cf 05       		.byte	0x5
 8914 00d0 C001     		.uleb128 0xc0
 8915 00d2 B2770000 		.4byte	.LASF771
 8916 00d6 05       		.byte	0x5
 8917 00d7 C101     		.uleb128 0xc1
 8918 00d9 CE4F0000 		.4byte	.LASF772
 8919 00dd 05       		.byte	0x5
 8920 00de C201     		.uleb128 0xc2
 8921 00e0 A9790000 		.4byte	.LASF773
 8922 00e4 05       		.byte	0x5
 8923 00e5 CA01     		.uleb128 0xca
 8924 00e7 DF5B0000 		.4byte	.LASF774
 8925 00eb 05       		.byte	0x5
 8926 00ec C904     		.uleb128 0x249
 8927 00ee E6780000 		.4byte	.LASF775
 8928 00f2 05       		.byte	0x5
 8929 00f3 CB04     		.uleb128 0x24b
 8930 00f5 56300000 		.4byte	.LASF776
 8931 00f9 05       		.byte	0x5
 8932 00fa EC04     		.uleb128 0x26c
 8933 00fc 2D200000 		.4byte	.LASF777
 8934 0100 05       		.byte	0x5
 8935 0101 8905     		.uleb128 0x289
 8936 0103 6A040000 		.4byte	.LASF778
 8937 0107 05       		.byte	0x5
 8938 0108 9905     		.uleb128 0x299
 8939 010a 5D530000 		.4byte	.LASF779
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 206


 8940 010e 05       		.byte	0x5
 8941 010f A705     		.uleb128 0x2a7
 8942 0111 86200000 		.4byte	.LASF780
 8943 0115 05       		.byte	0x5
 8944 0116 AB05     		.uleb128 0x2ab
 8945 0118 4A210000 		.4byte	.LASF781
 8946 011c 05       		.byte	0x5
 8947 011d AC05     		.uleb128 0x2ac
 8948 011f 610E0000 		.4byte	.LASF782
 8949 0123 05       		.byte	0x5
 8950 0124 AD05     		.uleb128 0x2ad
 8951 0126 5E010000 		.4byte	.LASF783
 8952 012a 05       		.byte	0x5
 8953 012b AE05     		.uleb128 0x2ae
 8954 012d CC770000 		.4byte	.LASF784
 8955 0131 05       		.byte	0x5
 8956 0132 BC05     		.uleb128 0x2bc
 8957 0134 24060000 		.4byte	.LASF785
 8958 0138 05       		.byte	0x5
 8959 0139 BD05     		.uleb128 0x2bd
 8960 013b 26210000 		.4byte	.LASF786
 8961 013f 05       		.byte	0x5
 8962 0140 C305     		.uleb128 0x2c3
 8963 0142 60310000 		.4byte	.LASF787
 8964 0146 05       		.byte	0x5
 8965 0147 C605     		.uleb128 0x2c6
 8966 0149 81710000 		.4byte	.LASF788
 8967 014d 05       		.byte	0x5
 8968 014e CE05     		.uleb128 0x2ce
 8969 0150 0C1D0000 		.4byte	.LASF789
 8970 0154 05       		.byte	0x5
 8971 0155 CF05     		.uleb128 0x2cf
 8972 0157 99130000 		.4byte	.LASF790
 8973 015b 00       		.byte	0
 8974              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147,comdat
 8975              	.Ldebug_macro18:
 8976 0000 0400     		.2byte	0x4
 8977 0002 00       		.byte	0
 8978 0003 05       		.byte	0x5
 8979 0004 12       		.uleb128 0x12
 8980 0005 6F240000 		.4byte	.LASF573
 8981 0009 05       		.byte	0x5
 8982 000a 13       		.uleb128 0x13
 8983 000b E7180000 		.4byte	.LASF791
 8984 000f 00       		.byte	0
 8985              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf,comdat
 8986              	.Ldebug_macro19:
 8987 0000 0400     		.2byte	0x4
 8988 0002 00       		.byte	0
 8989 0003 06       		.byte	0x6
 8990 0004 A101     		.uleb128 0xa1
 8991 0006 2B6D0000 		.4byte	.LASF689
 8992 000a 06       		.byte	0x6
 8993 000b EB01     		.uleb128 0xeb
 8994 000d 7D3D0000 		.4byte	.LASF591
 8995 0011 06       		.byte	0x6
 8996 0012 D802     		.uleb128 0x158
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 207


 8997 0014 070C0000 		.4byte	.LASF706
 8998 0018 06       		.byte	0x6
 8999 0019 8E03     		.uleb128 0x18e
 9000 001b BE0F0000 		.4byte	.LASF707
 9001 001f 05       		.byte	0x5
 9002 0020 9303     		.uleb128 0x193
 9003 0022 062F0000 		.4byte	.LASF708
 9004 0026 06       		.byte	0x6
 9005 0027 9903     		.uleb128 0x199
 9006 0029 CC2F0000 		.4byte	.LASF592
 9007 002d 05       		.byte	0x5
 9008 002e 9E03     		.uleb128 0x19e
 9009 0030 91380000 		.4byte	.LASF709
 9010 0034 00       		.byte	0
 9011              		.section	.debug_macro,"G",%progbits,wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d,comdat
 9012              	.Ldebug_macro20:
 9013 0000 0400     		.2byte	0x4
 9014 0002 00       		.byte	0
 9015 0003 05       		.byte	0x5
 9016 0004 08       		.uleb128 0x8
 9017 0005 192A0000 		.4byte	.LASF792
 9018 0009 06       		.byte	0x6
 9019 000a 0D       		.uleb128 0xd
 9020 000b FC4A0000 		.4byte	.LASF793
 9021 000f 05       		.byte	0x5
 9022 0010 10       		.uleb128 0x10
 9023 0011 D6250000 		.4byte	.LASF794
 9024 0015 00       		.byte	0
 9025              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.58.3943707ca024393181a6211b2c8a1625,comdat
 9026              	.Ldebug_macro21:
 9027 0000 0400     		.2byte	0x4
 9028 0002 00       		.byte	0
 9029 0003 05       		.byte	0x5
 9030 0004 3A       		.uleb128 0x3a
 9031 0005 207B0000 		.4byte	.LASF795
 9032 0009 05       		.byte	0x5
 9033 000a 3B       		.uleb128 0x3b
 9034 000b 0D190000 		.4byte	.LASF796
 9035 000f 05       		.byte	0x5
 9036 0010 3D       		.uleb128 0x3d
 9037 0011 BC340000 		.4byte	.LASF797
 9038 0015 05       		.byte	0x5
 9039 0016 45       		.uleb128 0x45
 9040 0017 CD430000 		.4byte	.LASF798
 9041 001b 05       		.byte	0x5
 9042 001c 8E01     		.uleb128 0x8e
 9043 001e CD710000 		.4byte	.LASF799
 9044 0022 00       		.byte	0
 9045              		.section	.debug_macro,"G",%progbits,wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a,comdat
 9046              	.Ldebug_macro22:
 9047 0000 0400     		.2byte	0x4
 9048 0002 00       		.byte	0
 9049 0003 05       		.byte	0x5
 9050 0004 08       		.uleb128 0x8
 9051 0005 056A0000 		.4byte	.LASF800
 9052 0009 05       		.byte	0x5
 9053 000a 0D       		.uleb128 0xd
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 208


 9054 000b 6F240000 		.4byte	.LASF573
 9055 000f 00       		.byte	0
 9056              		.section	.debug_macro,"G",%progbits,wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c,comdat
 9057              	.Ldebug_macro23:
 9058 0000 0400     		.2byte	0x4
 9059 0002 00       		.byte	0
 9060 0003 05       		.byte	0x5
 9061 0004 56       		.uleb128 0x56
 9062 0005 45180000 		.4byte	.LASF801
 9063 0009 05       		.byte	0x5
 9064 000a 59       		.uleb128 0x59
 9065 000b D63D0000 		.4byte	.LASF802
 9066 000f 05       		.byte	0x5
 9067 0010 5C       		.uleb128 0x5c
 9068 0011 29730000 		.4byte	.LASF803
 9069 0015 05       		.byte	0x5
 9070 0016 5F       		.uleb128 0x5f
 9071 0017 FD650000 		.4byte	.LASF804
 9072 001b 00       		.byte	0
 9073              		.section	.debug_macro,"G",%progbits,wm4.projdefs.h.70.dbccf9a6ca737be695addf5321434443,comdat
 9074              	.Ldebug_macro24:
 9075 0000 0400     		.2byte	0x4
 9076 0002 00       		.byte	0
 9077 0003 05       		.byte	0x5
 9078 0004 46       		.uleb128 0x46
 9079 0005 AB2E0000 		.4byte	.LASF805
 9080 0009 05       		.byte	0x5
 9081 000a 4B       		.uleb128 0x4b
 9082 000b 860F0000 		.4byte	.LASF806
 9083 000f 05       		.byte	0x5
 9084 0010 4C       		.uleb128 0x4c
 9085 0011 1D690000 		.4byte	.LASF807
 9086 0015 05       		.byte	0x5
 9087 0016 4E       		.uleb128 0x4e
 9088 0017 FA0F0000 		.4byte	.LASF808
 9089 001b 05       		.byte	0x5
 9090 001c 4F       		.uleb128 0x4f
 9091 001d CE5A0000 		.4byte	.LASF809
 9092 0021 05       		.byte	0x5
 9093 0022 50       		.uleb128 0x50
 9094 0023 C6390000 		.4byte	.LASF810
 9095 0027 05       		.byte	0x5
 9096 0028 51       		.uleb128 0x51
 9097 0029 C6170000 		.4byte	.LASF811
 9098 002d 05       		.byte	0x5
 9099 002e 54       		.uleb128 0x54
 9100 002f 8D2B0000 		.4byte	.LASF812
 9101 0033 05       		.byte	0x5
 9102 0034 55       		.uleb128 0x55
 9103 0035 09110000 		.4byte	.LASF813
 9104 0039 05       		.byte	0x5
 9105 003a 56       		.uleb128 0x56
 9106 003b 597B0000 		.4byte	.LASF814
 9107 003f 05       		.byte	0x5
 9108 0040 57       		.uleb128 0x57
 9109 0041 F7180000 		.4byte	.LASF815
 9110 0045 00       		.byte	0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 209


 9111              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOSConfig.h.51.75288dd46c012b59f4d59ef4654b728b,comda
 9112              	.Ldebug_macro25:
 9113 0000 0400     		.2byte	0x4
 9114 0002 00       		.byte	0
 9115 0003 05       		.byte	0x5
 9116 0004 33       		.uleb128 0x33
 9117 0005 432A0000 		.4byte	.LASF816
 9118 0009 05       		.byte	0x5
 9119 000a 3F       		.uleb128 0x3f
 9120 000b EB2D0000 		.4byte	.LASF817
 9121 000f 05       		.byte	0x5
 9122 0010 40       		.uleb128 0x40
 9123 0011 B1300000 		.4byte	.LASF818
 9124 0015 05       		.byte	0x5
 9125 0016 41       		.uleb128 0x41
 9126 0017 1F300000 		.4byte	.LASF819
 9127 001b 05       		.byte	0x5
 9128 001c 42       		.uleb128 0x42
 9129 001d F33B0000 		.4byte	.LASF820
 9130 0021 05       		.byte	0x5
 9131 0022 43       		.uleb128 0x43
 9132 0023 715A0000 		.4byte	.LASF821
 9133 0027 05       		.byte	0x5
 9134 0028 44       		.uleb128 0x44
 9135 0029 D2420000 		.4byte	.LASF822
 9136 002d 05       		.byte	0x5
 9137 002e 45       		.uleb128 0x45
 9138 002f A72D0000 		.4byte	.LASF823
 9139 0033 05       		.byte	0x5
 9140 0034 46       		.uleb128 0x46
 9141 0035 303A0000 		.4byte	.LASF824
 9142 0039 05       		.byte	0x5
 9143 003a 47       		.uleb128 0x47
 9144 003b 107A0000 		.4byte	.LASF825
 9145 003f 05       		.byte	0x5
 9146 0040 48       		.uleb128 0x48
 9147 0041 717D0000 		.4byte	.LASF826
 9148 0045 05       		.byte	0x5
 9149 0046 49       		.uleb128 0x49
 9150 0047 E3410000 		.4byte	.LASF827
 9151 004b 05       		.byte	0x5
 9152 004c 4A       		.uleb128 0x4a
 9153 004d AD780000 		.4byte	.LASF828
 9154 0051 05       		.byte	0x5
 9155 0052 4B       		.uleb128 0x4b
 9156 0053 823B0000 		.4byte	.LASF829
 9157 0057 05       		.byte	0x5
 9158 0058 4C       		.uleb128 0x4c
 9159 0059 35300000 		.4byte	.LASF830
 9160 005d 05       		.byte	0x5
 9161 005e 4D       		.uleb128 0x4d
 9162 005f D93A0000 		.4byte	.LASF831
 9163 0063 05       		.byte	0x5
 9164 0064 4F       		.uleb128 0x4f
 9165 0065 56540000 		.4byte	.LASF832
 9166 0069 05       		.byte	0x5
 9167 006a 50       		.uleb128 0x50
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 210


 9168 006b 8C0E0000 		.4byte	.LASF833
 9169 006f 05       		.byte	0x5
 9170 0070 55       		.uleb128 0x55
 9171 0071 84510000 		.4byte	.LASF834
 9172 0075 05       		.byte	0x5
 9173 0076 56       		.uleb128 0x56
 9174 0077 84320000 		.4byte	.LASF835
 9175 007b 05       		.byte	0x5
 9176 007c 57       		.uleb128 0x57
 9177 007d AB570000 		.4byte	.LASF836
 9178 0081 05       		.byte	0x5
 9179 0082 58       		.uleb128 0x58
 9180 0083 74160000 		.4byte	.LASF837
 9181 0087 05       		.byte	0x5
 9182 0088 59       		.uleb128 0x59
 9183 0089 AC060000 		.4byte	.LASF838
 9184 008d 05       		.byte	0x5
 9185 008e 5A       		.uleb128 0x5a
 9186 008f 18450000 		.4byte	.LASF839
 9187 0093 05       		.byte	0x5
 9188 0094 5B       		.uleb128 0x5b
 9189 0095 AE510000 		.4byte	.LASF840
 9190 0099 05       		.byte	0x5
 9191 009a 5C       		.uleb128 0x5c
 9192 009b 77020000 		.4byte	.LASF841
 9193 009f 05       		.byte	0x5
 9194 00a0 60       		.uleb128 0x60
 9195 00a1 452B0000 		.4byte	.LASF842
 9196 00a5 05       		.byte	0x5
 9197 00a6 61       		.uleb128 0x61
 9198 00a7 EE560000 		.4byte	.LASF843
 9199 00ab 05       		.byte	0x5
 9200 00ac 67       		.uleb128 0x67
 9201 00ad EA7F0000 		.4byte	.LASF844
 9202 00b1 00       		.byte	0
 9203              		.section	.debug_macro,"G",%progbits,wm4.portmacro.h.71.52a50c2eeecf8808d04241ce2362cf60,comdat
 9204              	.Ldebug_macro26:
 9205 0000 0400     		.2byte	0x4
 9206 0002 00       		.byte	0
 9207 0003 05       		.byte	0x5
 9208 0004 47       		.uleb128 0x47
 9209 0005 BD6C0000 		.4byte	.LASF845
 9210 0009 05       		.byte	0x5
 9211 000a 58       		.uleb128 0x58
 9212 000b 97470000 		.4byte	.LASF846
 9213 000f 05       		.byte	0x5
 9214 0010 59       		.uleb128 0x59
 9215 0011 A7690000 		.4byte	.LASF847
 9216 0015 05       		.byte	0x5
 9217 0016 5A       		.uleb128 0x5a
 9218 0017 B3210000 		.4byte	.LASF848
 9219 001b 05       		.byte	0x5
 9220 001c 5B       		.uleb128 0x5b
 9221 001d AD600000 		.4byte	.LASF849
 9222 0021 05       		.byte	0x5
 9223 0022 5C       		.uleb128 0x5c
 9224 0023 591D0000 		.4byte	.LASF850
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 211


 9225 0027 05       		.byte	0x5
 9226 0028 5D       		.uleb128 0x5d
 9227 0029 E96D0000 		.4byte	.LASF851
 9228 002d 05       		.byte	0x5
 9229 002e 5E       		.uleb128 0x5e
 9230 002f DB5A0000 		.4byte	.LASF852
 9231 0033 05       		.byte	0x5
 9232 0034 65       		.uleb128 0x65
 9233 0035 532F0000 		.4byte	.LASF853
 9234 0039 05       		.byte	0x5
 9235 003a 6A       		.uleb128 0x6a
 9236 003b C6450000 		.4byte	.LASF854
 9237 003f 05       		.byte	0x5
 9238 0040 6B       		.uleb128 0x6b
 9239 0041 9B460000 		.4byte	.LASF855
 9240 0045 05       		.byte	0x5
 9241 0046 6C       		.uleb128 0x6c
 9242 0047 6F510000 		.4byte	.LASF856
 9243 004b 05       		.byte	0x5
 9244 004c 72       		.uleb128 0x72
 9245 004d 8C7C0000 		.4byte	.LASF857
 9246 0051 05       		.byte	0x5
 9247 0052 73       		.uleb128 0x73
 9248 0053 6E4D0000 		.4byte	.LASF858
 9249 0057 05       		.byte	0x5
 9250 0058 7B       		.uleb128 0x7b
 9251 0059 F24C0000 		.4byte	.LASF859
 9252 005d 05       		.byte	0x5
 9253 005e 7C       		.uleb128 0x7c
 9254 005f E3360000 		.4byte	.LASF860
 9255 0063 05       		.byte	0x5
 9256 0064 7D       		.uleb128 0x7d
 9257 0065 1F700000 		.4byte	.LASF861
 9258 0069 05       		.byte	0x5
 9259 006a 7E       		.uleb128 0x7e
 9260 006b 02330000 		.4byte	.LASF862
 9261 006f 05       		.byte	0x5
 9262 0070 7F       		.uleb128 0x7f
 9263 0071 F0300000 		.4byte	.LASF863
 9264 0075 05       		.byte	0x5
 9265 0076 8001     		.uleb128 0x80
 9266 0078 C4330000 		.4byte	.LASF864
 9267 007c 05       		.byte	0x5
 9268 007d 8601     		.uleb128 0x86
 9269 007f A56F0000 		.4byte	.LASF865
 9270 0083 05       		.byte	0x5
 9271 0084 8701     		.uleb128 0x87
 9272 0086 691D0000 		.4byte	.LASF866
 9273 008a 05       		.byte	0x5
 9274 008b 8D01     		.uleb128 0x8d
 9275 008d C26B0000 		.4byte	.LASF867
 9276 0091 05       		.byte	0x5
 9277 0092 AF01     		.uleb128 0xaf
 9278 0094 55720000 		.4byte	.LASF868
 9279 0098 00       		.byte	0
 9280              		.section	.debug_macro,"G",%progbits,wm4.portable.h.326.d973d87d91a2870806201c5c4493d578,comdat
 9281              	.Ldebug_macro27:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 212


 9282 0000 0400     		.2byte	0x4
 9283 0002 00       		.byte	0
 9284 0003 05       		.byte	0x5
 9285 0004 C602     		.uleb128 0x146
 9286 0006 4D560000 		.4byte	.LASF869
 9287 000a 05       		.byte	0x5
 9288 000b DA02     		.uleb128 0x15a
 9289 000d 23240000 		.4byte	.LASF870
 9290 0011 00       		.byte	0
 9291              		.section	.debug_macro,"G",%progbits,wm4.mpu_wrappers.h.70.805d5308b530bfb35337fa0cda53b379,comdat
 9292              	.Ldebug_macro28:
 9293 0000 0400     		.2byte	0x4
 9294 0002 00       		.byte	0
 9295 0003 05       		.byte	0x5
 9296 0004 46       		.uleb128 0x46
 9297 0005 C1560000 		.4byte	.LASF871
 9298 0009 05       		.byte	0x5
 9299 000a 8D01     		.uleb128 0x8d
 9300 000c 200B0000 		.4byte	.LASF872
 9301 0010 05       		.byte	0x5
 9302 0011 8E01     		.uleb128 0x8e
 9303 0013 58180000 		.4byte	.LASF873
 9304 0017 05       		.byte	0x5
 9305 0018 8F01     		.uleb128 0x8f
 9306 001a 1C090000 		.4byte	.LASF874
 9307 001e 00       		.byte	0
 9308              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOS.h.153.96ab976bfb595dc71389a47535011fba,comdat
 9309              	.Ldebug_macro29:
 9310 0000 0400     		.2byte	0x4
 9311 0002 00       		.byte	0
 9312 0003 05       		.byte	0x5
 9313 0004 9901     		.uleb128 0x99
 9314 0006 0E7F0000 		.4byte	.LASF875
 9315 000a 05       		.byte	0x5
 9316 000b 9D01     		.uleb128 0x9d
 9317 000d B03A0000 		.4byte	.LASF876
 9318 0011 05       		.byte	0x5
 9319 0012 A101     		.uleb128 0xa1
 9320 0014 20520000 		.4byte	.LASF877
 9321 0018 05       		.byte	0x5
 9322 0019 A501     		.uleb128 0xa5
 9323 001b AF050000 		.4byte	.LASF878
 9324 001f 05       		.byte	0x5
 9325 0020 A901     		.uleb128 0xa9
 9326 0022 4D780000 		.4byte	.LASF879
 9327 0026 05       		.byte	0x5
 9328 0027 B101     		.uleb128 0xb1
 9329 0029 F5540000 		.4byte	.LASF880
 9330 002d 05       		.byte	0x5
 9331 002e BD01     		.uleb128 0xbd
 9332 0030 58140000 		.4byte	.LASF881
 9333 0034 05       		.byte	0x5
 9334 0035 C101     		.uleb128 0xc1
 9335 0037 09140000 		.4byte	.LASF882
 9336 003b 05       		.byte	0x5
 9337 003c C501     		.uleb128 0xc5
 9338 003e F3020000 		.4byte	.LASF883
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 213


 9339 0042 05       		.byte	0x5
 9340 0043 C901     		.uleb128 0xc9
 9341 0045 CB580000 		.4byte	.LASF884
 9342 0049 05       		.byte	0x5
 9343 004a D901     		.uleb128 0xd9
 9344 004c 47130000 		.4byte	.LASF885
 9345 0050 05       		.byte	0x5
 9346 0051 DD01     		.uleb128 0xdd
 9347 0053 66020000 		.4byte	.LASF886
 9348 0057 05       		.byte	0x5
 9349 0058 E101     		.uleb128 0xe1
 9350 005a 76480000 		.4byte	.LASF887
 9351 005e 05       		.byte	0x5
 9352 005f F601     		.uleb128 0xf6
 9353 0061 63100000 		.4byte	.LASF888
 9354 0065 05       		.byte	0x5
 9355 0066 FA01     		.uleb128 0xfa
 9356 0068 BF550000 		.4byte	.LASF889
 9357 006c 05       		.byte	0x5
 9358 006d 8702     		.uleb128 0x107
 9359 006f 5E190000 		.4byte	.LASF890
 9360 0073 05       		.byte	0x5
 9361 0074 8B02     		.uleb128 0x10b
 9362 0076 C30C0000 		.4byte	.LASF891
 9363 007a 05       		.byte	0x5
 9364 007b 8F02     		.uleb128 0x10f
 9365 007d 2F7B0000 		.4byte	.LASF892
 9366 0081 05       		.byte	0x5
 9367 0082 9302     		.uleb128 0x113
 9368 0084 F46C0000 		.4byte	.LASF893
 9369 0088 05       		.byte	0x5
 9370 0089 9402     		.uleb128 0x114
 9371 008b 6D150000 		.4byte	.LASF894
 9372 008f 05       		.byte	0x5
 9373 0090 9802     		.uleb128 0x118
 9374 0092 F5290000 		.4byte	.LASF895
 9375 0096 05       		.byte	0x5
 9376 0097 9F02     		.uleb128 0x11f
 9377 0099 5D090000 		.4byte	.LASF896
 9378 009d 05       		.byte	0x5
 9379 009e A502     		.uleb128 0x125
 9380 00a0 9A660000 		.4byte	.LASF897
 9381 00a4 05       		.byte	0x5
 9382 00a5 AB02     		.uleb128 0x12b
 9383 00a7 EC000000 		.4byte	.LASF898
 9384 00ab 05       		.byte	0x5
 9385 00ac B102     		.uleb128 0x131
 9386 00ae 5C370000 		.4byte	.LASF899
 9387 00b2 05       		.byte	0x5
 9388 00b3 BA02     		.uleb128 0x13a
 9389 00b5 9E0B0000 		.4byte	.LASF900
 9390 00b9 05       		.byte	0x5
 9391 00ba C202     		.uleb128 0x142
 9392 00bc 24220000 		.4byte	.LASF901
 9393 00c0 05       		.byte	0x5
 9394 00c1 CA02     		.uleb128 0x14a
 9395 00c3 934F0000 		.4byte	.LASF902
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 214


 9396 00c7 05       		.byte	0x5
 9397 00c8 D202     		.uleb128 0x152
 9398 00ca 746E0000 		.4byte	.LASF903
 9399 00ce 05       		.byte	0x5
 9400 00cf DC02     		.uleb128 0x15c
 9401 00d1 88580000 		.4byte	.LASF904
 9402 00d5 05       		.byte	0x5
 9403 00d6 E002     		.uleb128 0x160
 9404 00d8 8A6D0000 		.4byte	.LASF905
 9405 00dc 05       		.byte	0x5
 9406 00dd E402     		.uleb128 0x164
 9407 00df 5D260000 		.4byte	.LASF906
 9408 00e3 05       		.byte	0x5
 9409 00e4 E802     		.uleb128 0x168
 9410 00e6 41310000 		.4byte	.LASF907
 9411 00ea 05       		.byte	0x5
 9412 00eb EC02     		.uleb128 0x16c
 9413 00ed B0090000 		.4byte	.LASF908
 9414 00f1 05       		.byte	0x5
 9415 00f2 F002     		.uleb128 0x170
 9416 00f4 C91F0000 		.4byte	.LASF909
 9417 00f8 05       		.byte	0x5
 9418 00f9 F402     		.uleb128 0x174
 9419 00fb E14B0000 		.4byte	.LASF910
 9420 00ff 05       		.byte	0x5
 9421 0100 F802     		.uleb128 0x178
 9422 0102 2D6A0000 		.4byte	.LASF911
 9423 0106 05       		.byte	0x5
 9424 0107 FC02     		.uleb128 0x17c
 9425 0109 69180000 		.4byte	.LASF912
 9426 010d 05       		.byte	0x5
 9427 010e 8003     		.uleb128 0x180
 9428 0110 345F0000 		.4byte	.LASF913
 9429 0114 05       		.byte	0x5
 9430 0115 8403     		.uleb128 0x184
 9431 0117 BE320000 		.4byte	.LASF914
 9432 011b 05       		.byte	0x5
 9433 011c 8803     		.uleb128 0x188
 9434 011e 9D0A0000 		.4byte	.LASF915
 9435 0122 05       		.byte	0x5
 9436 0123 8C03     		.uleb128 0x18c
 9437 0125 662C0000 		.4byte	.LASF916
 9438 0129 05       		.byte	0x5
 9439 012a 9003     		.uleb128 0x190
 9440 012c 685E0000 		.4byte	.LASF917
 9441 0130 05       		.byte	0x5
 9442 0131 9403     		.uleb128 0x194
 9443 0133 38120000 		.4byte	.LASF918
 9444 0137 05       		.byte	0x5
 9445 0138 9803     		.uleb128 0x198
 9446 013a C30A0000 		.4byte	.LASF919
 9447 013e 05       		.byte	0x5
 9448 013f 9C03     		.uleb128 0x19c
 9449 0141 C1570000 		.4byte	.LASF920
 9450 0145 05       		.byte	0x5
 9451 0146 A003     		.uleb128 0x1a0
 9452 0148 6A7E0000 		.4byte	.LASF921
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 215


 9453 014c 05       		.byte	0x5
 9454 014d A403     		.uleb128 0x1a4
 9455 014f 634F0000 		.4byte	.LASF922
 9456 0153 05       		.byte	0x5
 9457 0154 A803     		.uleb128 0x1a8
 9458 0156 CF440000 		.4byte	.LASF923
 9459 015a 05       		.byte	0x5
 9460 015b AC03     		.uleb128 0x1ac
 9461 015d 35330000 		.4byte	.LASF924
 9462 0161 05       		.byte	0x5
 9463 0162 B003     		.uleb128 0x1b0
 9464 0164 02530000 		.4byte	.LASF925
 9465 0168 05       		.byte	0x5
 9466 0169 B403     		.uleb128 0x1b4
 9467 016b CC500000 		.4byte	.LASF926
 9468 016f 05       		.byte	0x5
 9469 0170 B803     		.uleb128 0x1b8
 9470 0172 B81D0000 		.4byte	.LASF927
 9471 0176 05       		.byte	0x5
 9472 0177 BC03     		.uleb128 0x1bc
 9473 0179 E7310000 		.4byte	.LASF928
 9474 017d 05       		.byte	0x5
 9475 017e C003     		.uleb128 0x1c0
 9476 0180 2D2C0000 		.4byte	.LASF929
 9477 0184 05       		.byte	0x5
 9478 0185 C403     		.uleb128 0x1c4
 9479 0187 D7690000 		.4byte	.LASF930
 9480 018b 05       		.byte	0x5
 9481 018c C803     		.uleb128 0x1c8
 9482 018e 98190000 		.4byte	.LASF931
 9483 0192 05       		.byte	0x5
 9484 0193 CC03     		.uleb128 0x1cc
 9485 0195 E8280000 		.4byte	.LASF932
 9486 0199 05       		.byte	0x5
 9487 019a D003     		.uleb128 0x1d0
 9488 019c D2650000 		.4byte	.LASF933
 9489 01a0 05       		.byte	0x5
 9490 01a1 D403     		.uleb128 0x1d4
 9491 01a3 130D0000 		.4byte	.LASF934
 9492 01a7 05       		.byte	0x5
 9493 01a8 D803     		.uleb128 0x1d8
 9494 01aa F3170000 		.4byte	.LASF935
 9495 01ae 05       		.byte	0x5
 9496 01af DC03     		.uleb128 0x1dc
 9497 01b1 94560000 		.4byte	.LASF936
 9498 01b5 05       		.byte	0x5
 9499 01b6 E003     		.uleb128 0x1e0
 9500 01b8 EA4D0000 		.4byte	.LASF937
 9501 01bc 05       		.byte	0x5
 9502 01bd E403     		.uleb128 0x1e4
 9503 01bf D80D0000 		.4byte	.LASF938
 9504 01c3 05       		.byte	0x5
 9505 01c4 E803     		.uleb128 0x1e8
 9506 01c6 26590000 		.4byte	.LASF939
 9507 01ca 05       		.byte	0x5
 9508 01cb EC03     		.uleb128 0x1ec
 9509 01cd B7690000 		.4byte	.LASF940
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 216


 9510 01d1 05       		.byte	0x5
 9511 01d2 FE03     		.uleb128 0x1fe
 9512 01d4 0D550000 		.4byte	.LASF941
 9513 01d8 05       		.byte	0x5
 9514 01d9 8204     		.uleb128 0x202
 9515 01db 8D250000 		.4byte	.LASF942
 9516 01df 05       		.byte	0x5
 9517 01e0 8604     		.uleb128 0x206
 9518 01e2 0A0A0000 		.4byte	.LASF943
 9519 01e6 05       		.byte	0x5
 9520 01e7 8A04     		.uleb128 0x20a
 9521 01e9 350F0000 		.4byte	.LASF944
 9522 01ed 05       		.byte	0x5
 9523 01ee 8E04     		.uleb128 0x20e
 9524 01f0 FD4F0000 		.4byte	.LASF945
 9525 01f4 05       		.byte	0x5
 9526 01f5 9204     		.uleb128 0x212
 9527 01f7 293C0000 		.4byte	.LASF946
 9528 01fb 05       		.byte	0x5
 9529 01fc 9A04     		.uleb128 0x21a
 9530 01fe 3A1D0000 		.4byte	.LASF947
 9531 0202 05       		.byte	0x5
 9532 0203 9E04     		.uleb128 0x21e
 9533 0205 98220000 		.4byte	.LASF948
 9534 0209 00       		.byte	0
 9535              		.section	.debug_macro,"G",%progbits,wm4.list.h.99.4794e53f44ef377a7e8b918fd5c142a2,comdat
 9536              	.Ldebug_macro30:
 9537 0000 0400     		.2byte	0x4
 9538 0002 00       		.byte	0
 9539 0003 05       		.byte	0x5
 9540 0004 63       		.uleb128 0x63
 9541 0005 A83A0000 		.4byte	.LASF949
 9542 0009 05       		.byte	0x5
 9543 000a 8E01     		.uleb128 0x8e
 9544 000c 2B580000 		.4byte	.LASF950
 9545 0010 05       		.byte	0x5
 9546 0011 9701     		.uleb128 0x97
 9547 0013 B9290000 		.4byte	.LASF951
 9548 0017 05       		.byte	0x5
 9549 0018 A001     		.uleb128 0xa0
 9550 001a 51700000 		.4byte	.LASF952
 9551 001e 05       		.byte	0x5
 9552 001f AA01     		.uleb128 0xaa
 9553 0021 BB7C0000 		.4byte	.LASF953
 9554 0025 05       		.byte	0x5
 9555 0026 B301     		.uleb128 0xb3
 9556 0028 25490000 		.4byte	.LASF954
 9557 002c 05       		.byte	0x5
 9558 002d BC01     		.uleb128 0xbc
 9559 002f 3E2E0000 		.4byte	.LASF955
 9560 0033 05       		.byte	0x5
 9561 0034 C101     		.uleb128 0xc1
 9562 0036 8D710000 		.4byte	.LASF956
 9563 003a 05       		.byte	0x5
 9564 003b D601     		.uleb128 0xd6
 9565 003d DD340000 		.4byte	.LASF957
 9566 0041 05       		.byte	0x5
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 217


 9567 0042 F401     		.uleb128 0xf4
 9568 0044 C3060000 		.4byte	.LASF958
 9569 0048 05       		.byte	0x5
 9570 0049 8002     		.uleb128 0x100
 9571 004b 335B0000 		.4byte	.LASF959
 9572 004f 05       		.byte	0x5
 9573 0050 8802     		.uleb128 0x108
 9574 0052 ED1D0000 		.4byte	.LASF960
 9575 0056 05       		.byte	0x5
 9576 0057 8F02     		.uleb128 0x10f
 9577 0059 0E440000 		.4byte	.LASF961
 9578 005d 00       		.byte	0
 9579              		.section	.debug_macro,"G",%progbits,wm4.task.h.87.ccd4c448460750abd1f398251d355800,comdat
 9580              	.Ldebug_macro31:
 9581 0000 0400     		.2byte	0x4
 9582 0002 00       		.byte	0
 9583 0003 05       		.byte	0x5
 9584 0004 57       		.uleb128 0x57
 9585 0005 0C4C0000 		.4byte	.LASF962
 9586 0009 05       		.byte	0x5
 9587 000a 9501     		.uleb128 0x95
 9588 000c 08420000 		.4byte	.LASF963
 9589 0010 05       		.byte	0x5
 9590 0011 9F01     		.uleb128 0x9f
 9591 0013 652A0000 		.4byte	.LASF964
 9592 0017 05       		.byte	0x5
 9593 0018 AD01     		.uleb128 0xad
 9594 001a 6D390000 		.4byte	.LASF965
 9595 001e 05       		.byte	0x5
 9596 001f BB01     		.uleb128 0xbb
 9597 0021 7D5F0000 		.4byte	.LASF966
 9598 0025 05       		.byte	0x5
 9599 0026 C501     		.uleb128 0xc5
 9600 0028 C3470000 		.4byte	.LASF967
 9601 002c 05       		.byte	0x5
 9602 002d CF01     		.uleb128 0xcf
 9603 002f 18720000 		.4byte	.LASF968
 9604 0033 05       		.byte	0x5
 9605 0034 D201     		.uleb128 0xd2
 9606 0036 E6140000 		.4byte	.LASF969
 9607 003a 05       		.byte	0x5
 9608 003b D301     		.uleb128 0xd3
 9609 003d 8A090000 		.4byte	.LASF970
 9610 0041 05       		.byte	0x5
 9611 0042 D401     		.uleb128 0xd4
 9612 0044 EF390000 		.4byte	.LASF971
 9613 0048 05       		.byte	0x5
 9614 0049 A602     		.uleb128 0x126
 9615 004b B52C0000 		.4byte	.LASF972
 9616 004f 05       		.byte	0x5
 9617 0050 EB02     		.uleb128 0x16b
 9618 0052 01610000 		.4byte	.LASF973
 9619 0056 00       		.byte	0
 9620              		.section	.debug_macro,"G",%progbits,wm4.timers.h.88.1f6aa39fa72d19a328c2630c34ca71fc,comdat
 9621              	.Ldebug_macro32:
 9622 0000 0400     		.2byte	0x4
 9623 0002 00       		.byte	0
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 218


 9624 0003 05       		.byte	0x5
 9625 0004 58       		.uleb128 0x58
 9626 0005 982E0000 		.4byte	.LASF974
 9627 0009 05       		.byte	0x5
 9628 000a 59       		.uleb128 0x59
 9629 000b 43060000 		.4byte	.LASF975
 9630 000f 05       		.byte	0x5
 9631 0010 5A       		.uleb128 0x5a
 9632 0011 11470000 		.4byte	.LASF976
 9633 0015 05       		.byte	0x5
 9634 0016 5B       		.uleb128 0x5b
 9635 0017 B8500000 		.4byte	.LASF977
 9636 001b 05       		.byte	0x5
 9637 001c E202     		.uleb128 0x162
 9638 001e C94E0000 		.4byte	.LASF978
 9639 0022 05       		.byte	0x5
 9640 0023 8C03     		.uleb128 0x18c
 9641 0025 0E6B0000 		.4byte	.LASF979
 9642 0029 05       		.byte	0x5
 9643 002a DB03     		.uleb128 0x1db
 9644 002c EF160000 		.4byte	.LASF980
 9645 0030 05       		.byte	0x5
 9646 0031 8104     		.uleb128 0x201
 9647 0033 E93D0000 		.4byte	.LASF981
 9648 0037 05       		.byte	0x5
 9649 0038 FC04     		.uleb128 0x27c
 9650 003a 9A680000 		.4byte	.LASF982
 9651 003e 05       		.byte	0x5
 9652 003f D005     		.uleb128 0x2d0
 9653 0041 EC330000 		.4byte	.LASF983
 9654 0045 05       		.byte	0x5
 9655 0046 8E06     		.uleb128 0x30e
 9656 0048 5B1E0000 		.4byte	.LASF984
 9657 004c 05       		.byte	0x5
 9658 004d D606     		.uleb128 0x356
 9659 004f B3030000 		.4byte	.LASF985
 9660 0053 05       		.byte	0x5
 9661 0054 AB07     		.uleb128 0x3ab
 9662 0056 160C0000 		.4byte	.LASF986
 9663 005a 00       		.byte	0
 9664              		.section	.debug_macro,"G",%progbits,wm4.StackMacros.h.70.ce860816081eafea7abd036dd40dd896,comdat
 9665              	.Ldebug_macro33:
 9666 0000 0400     		.2byte	0x4
 9667 0002 00       		.byte	0
 9668 0003 05       		.byte	0x5
 9669 0004 46       		.uleb128 0x46
 9670 0005 A9270000 		.4byte	.LASF987
 9671 0009 05       		.byte	0x5
 9672 000a 6D       		.uleb128 0x6d
 9673 000b 78120000 		.4byte	.LASF988
 9674 000f 05       		.byte	0x5
 9675 0010 8B01     		.uleb128 0x8b
 9676 0012 E4190000 		.4byte	.LASF989
 9677 0016 00       		.byte	0
 9678              		.section	.debug_line,"",%progbits
 9679              	.Ldebug_line0:
 9680 0000 6E090000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 219


 9680      0200D303 
 9680      00000201 
 9680      FB0E0D00 
 9680      01010101 
 9681              	.LASF37:
 9682 0000 784D656D 		.ascii	"xMemoryRegion\000"
 9682      6F727952 
 9682      6567696F 
 9682      6E00
 9683              	.LASF519:
 9684 000e 5F5F4758 		.ascii	"__GXX_TYPEINFO_EQUALITY_INLINE 0\000"
 9684      585F5459 
 9684      5045494E 
 9684      464F5F45 
 9684      5155414C 
 9685              	.LASF755:
 9686 002f 5F494F46 		.ascii	"_IOFBF 0\000"
 9686      42462030 
 9686      00
 9687              	.LASF336:
 9688 0038 5F5F4445 		.ascii	"__DECIMAL_DIG__ 17\000"
 9688      43494D41 
 9688      4C5F4449 
 9688      475F5F20 
 9688      313700
 9689              	.LASF473:
 9690 004b 5F5F5548 		.ascii	"__UHA_FBIT__ 8\000"
 9690      415F4642 
 9690      49545F5F 
 9690      203800
 9691              	.LASF78:
 9692 005a 78546173 		.ascii	"xTaskIsTaskSuspended\000"
 9692      6B497354 
 9692      61736B53 
 9692      75737065 
 9692      6E646564 
 9693              	.LASF315:
 9694 006f 5F5F464C 		.ascii	"__FLT_HAS_QUIET_NAN__ 1\000"
 9694      545F4841 
 9694      535F5155 
 9694      4945545F 
 9694      4E414E5F 
 9695              	.LASF363:
 9696 0087 5F5F4445 		.ascii	"__DEC128_EPSILON__ 1E-33DL\000"
 9696      43313238 
 9696      5F455053 
 9696      494C4F4E 
 9696      5F5F2031 
 9697              	.LASF754:
 9698 00a2 5F5F5357 		.ascii	"__SWID 0x2000\000"
 9698      49442030 
 9698      78323030 
 9698      3000
 9699              	.LASF493:
 9700 00b0 5F5F4743 		.ascii	"__GCC_ATOMIC_WCHAR_T_LOCK_FREE 2\000"
 9700      435F4154 
 9700      4F4D4943 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 220


 9700      5F574348 
 9700      41525F54 
 9701              	.LASF485:
 9702 00d1 5F5F4348 		.ascii	"__CHAR_UNSIGNED__ 1\000"
 9702      41525F55 
 9702      4E534947 
 9702      4E45445F 
 9702      5F203100 
 9703              	.LASF11:
 9704 00e5 73697A65 		.ascii	"size_t\000"
 9704      5F7400
 9705              	.LASF898:
 9706 00ec 74726163 		.ascii	"traceTASK_SWITCHED_IN() \000"
 9706      65544153 
 9706      4B5F5357 
 9706      49544348 
 9706      45445F49 
 9707              	.LASF365:
 9708 0105 5F5F5346 		.ascii	"__SFRACT_FBIT__ 7\000"
 9708      52414354 
 9708      5F464249 
 9708      545F5F20 
 9708      3700
 9709              	.LASF8:
 9710 0117 73697A65 		.ascii	"sizetype\000"
 9710      74797065 
 9710      00
 9711              	.LASF252:
 9712 0120 5F5F4C4F 		.ascii	"__LONG_LONG_MAX__ 9223372036854775807LL\000"
 9712      4E475F4C 
 9712      4F4E475F 
 9712      4D41585F 
 9712      5F203932 
 9713              	.LASF260:
 9714 0148 5F5F494E 		.ascii	"__INTMAX_C(c) c ## LL\000"
 9714      544D4158 
 9714      5F432863 
 9714      29206320 
 9714      2323204C 
 9715              	.LASF783:
 9716 015e 5F5F7363 		.ascii	"__sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SE"
 9716      6C656172 
 9716      65727228 
 9716      70292028 
 9716      28766F69 
 9717 0191 4F462929 		.ascii	"OF)))\000"
 9717      2900
 9718              	.LASF651:
 9719 0197 5F524545 		.ascii	"_REENT_RAND48_ADD(ptr) ((ptr)->_r48->_add)\000"
 9719      4E545F52 
 9719      414E4434 
 9719      385F4144 
 9719      44287074 
 9720              	.LASF437:
 9721 01c2 5F5F4C4C 		.ascii	"__LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)\000"
 9721      41434355 
 9721      4D5F4D49 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 221


 9721      4E5F5F20 
 9721      282D3058 
 9722              	.LASF429:
 9723 01e9 5F5F4C41 		.ascii	"__LACCUM_EPSILON__ 0x1P-31LK\000"
 9723      4343554D 
 9723      5F455053 
 9723      494C4F4E 
 9723      5F5F2030 
 9724              	.LASF362:
 9725 0206 5F5F4445 		.ascii	"__DEC128_MAX__ 9.999999999999999999999999999999999E"
 9725      43313238 
 9725      5F4D4158 
 9725      5F5F2039 
 9725      2E393939 
 9726 0239 36313434 		.ascii	"6144DL\000"
 9726      444C00
 9727              	.LASF567:
 9728 0240 5F4C4F4E 		.ascii	"_LONG_DOUBLE long double\000"
 9728      475F444F 
 9728      55424C45 
 9728      206C6F6E 
 9728      6720646F 
 9729              	.LASF49:
 9730 0259 75735374 		.ascii	"usStackDepth\000"
 9730      61636B44 
 9730      65707468 
 9730      00
 9731              	.LASF886:
 9732 0266 636F6E66 		.ascii	"configASSERT(x) \000"
 9732      69674153 
 9732      53455254 
 9732      28782920 
 9732      00
 9733              	.LASF841:
 9734 0277 494E434C 		.ascii	"INCLUDE_uxTaskGetStackHighWaterMark 1\000"
 9734      5544455F 
 9734      75785461 
 9734      736B4765 
 9734      74537461 
 9735              	.LASF350:
 9736 029d 5F5F4445 		.ascii	"__DEC32_SUBNORMAL_MIN__ 0.000001E-95DF\000"
 9736      4333325F 
 9736      5355424E 
 9736      4F524D41 
 9736      4C5F4D49 
 9737              	.LASF454:
 9738 02c4 5F5F5451 		.ascii	"__TQ_IBIT__ 0\000"
 9738      5F494249 
 9738      545F5F20 
 9738      3000
 9739              	.LASF765:
 9740 02d2 5345454B 		.ascii	"SEEK_SET 0\000"
 9740      5F534554 
 9740      203000
 9741              	.LASF632:
 9742 02dd 5F524545 		.ascii	"_REENT_SIGNAL_SIZE 24\000"
 9742      4E545F53 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 222


 9742      49474E41 
 9742      4C5F5349 
 9742      5A452032 
 9743              	.LASF883:
 9744 02f3 636F6E66 		.ascii	"configUSE_ALTERNATIVE_API 0\000"
 9744      69675553 
 9744      455F414C 
 9744      5445524E 
 9744      41544956 
 9745              	.LASF671:
 9746 030f 5F4B6D61 		.ascii	"_Kmax (sizeof (size_t) << 3)\000"
 9746      78202873 
 9746      697A656F 
 9746      66202873 
 9746      697A655F 
 9747              	.LASF646:
 9748 032c 5F524545 		.ascii	"_REENT_CHECK_SIGNAL_BUF(var) _REENT_CHECK(var, _sig"
 9748      4E545F43 
 9748      4845434B 
 9748      5F534947 
 9748      4E414C5F 
 9749 035f 6E616C5F 		.ascii	"nal_buf, char *, _REENT_SIGNAL_SIZE, )\000"
 9749      6275662C 
 9749      20636861 
 9749      72202A2C 
 9749      205F5245 
 9750              	.LASF430:
 9751 0386 5F5F554C 		.ascii	"__ULACCUM_FBIT__ 32\000"
 9751      41434355 
 9751      4D5F4642 
 9751      49545F5F 
 9751      20333200 
 9752              	.LASF90:
 9753 039a 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 9753      6B476574 
 9753      5469636B 
 9753      436F756E 
 9753      7446726F 
 9754              	.LASF985:
 9755 03b3 7854696D 		.ascii	"xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHighe"
 9755      65724368 
 9755      616E6765 
 9755      50657269 
 9755      6F644672 
 9756 03e6 72507269 		.ascii	"rPriorityTaskWoken) xTimerGenericCommand( ( xTimer "
 9756      6F726974 
 9756      79546173 
 9756      6B576F6B 
 9756      656E2920 
 9757 0419 292C2074 		.ascii	"), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), ( pxHi"
 9757      6D72434F 
 9757      4D4D414E 
 9757      445F4348 
 9757      414E4745 
 9758 044c 67686572 		.ascii	"gherPriorityTaskWoken ), 0U )\000"
 9758      5072696F 
 9758      72697479 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 223


 9758      5461736B 
 9758      576F6B65 
 9759              	.LASF778:
 9760 046a 5F5F7367 		.ascii	"__sgetc_r(__ptr,__p) __sgetc_raw_r(__ptr, __p)\000"
 9760      6574635F 
 9760      72285F5F 
 9760      7074722C 
 9760      5F5F7029 
 9761              	.LASF723:
 9762 0499 46445F53 		.ascii	"FD_SETSIZE 64\000"
 9762      45545349 
 9762      5A452036 
 9762      3400
 9763              	.LASF41:
 9764 04a7 78457665 		.ascii	"xEventListItem\000"
 9764      6E744C69 
 9764      73744974 
 9764      656D00
 9765              	.LASF188:
 9766 04b6 5F5F5645 		.ascii	"__VERSION__ \"4.7.2\"\000"
 9766      5253494F 
 9766      4E5F5F20 
 9766      22342E37 
 9766      2E322200 
 9767              	.LASF198:
 9768 04ca 5F5F5349 		.ascii	"__SIZEOF_LONG_LONG__ 8\000"
 9768      5A454F46 
 9768      5F4C4F4E 
 9768      475F4C4F 
 9768      4E475F5F 
 9769              	.LASF321:
 9770 04e1 5F5F4442 		.ascii	"__DBL_MAX_10_EXP__ 308\000"
 9770      4C5F4D41 
 9770      585F3130 
 9770      5F455850 
 9770      5F5F2033 
 9771              	.LASF377:
 9772 04f8 5F5F4652 		.ascii	"__FRACT_MIN__ (-0.5R-0.5R)\000"
 9772      4143545F 
 9772      4D494E5F 
 9772      5F20282D 
 9772      302E3552 
 9773              	.LASF443:
 9774 0513 5F5F554C 		.ascii	"__ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK\000"
 9774      4C414343 
 9774      554D5F4D 
 9774      41585F5F 
 9774      20305846 
 9775              	.LASF413:
 9776 053f 5F5F5553 		.ascii	"__USACCUM_MAX__ 0XFFFFP-8UHK\000"
 9776      41434355 
 9776      4D5F4D41 
 9776      585F5F20 
 9776      30584646 
 9777              	.LASF347:
 9778 055c 5F5F4445 		.ascii	"__DEC32_MIN__ 1E-95DF\000"
 9778      4333325F 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 224


 9778      4D494E5F 
 9778      5F203145 
 9778      2D393544 
 9779              	.LASF665:
 9780 0572 5F524545 		.ascii	"_REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_misc->_mbsrtow"
 9780      4E545F4D 
 9780      42535254 
 9780      4F574353 
 9780      5F535441 
 9781 05a5 63735F73 		.ascii	"cs_state)\000"
 9781      74617465 
 9781      2900
 9782              	.LASF878:
 9783 05af 494E434C 		.ascii	"INCLUDE_pcTaskGetTaskName 0\000"
 9783      5544455F 
 9783      70635461 
 9783      736B4765 
 9783      74546173 
 9784              	.LASF450:
 9785 05cb 5F5F5351 		.ascii	"__SQ_IBIT__ 0\000"
 9785      5F494249 
 9785      545F5F20 
 9785      3000
 9786              	.LASF208:
 9787 05d9 5F5F4F52 		.ascii	"__ORDER_PDP_ENDIAN__ 3412\000"
 9787      4445525F 
 9787      5044505F 
 9787      454E4449 
 9787      414E5F5F 
 9788              	.LASF212:
 9789 05f3 5F5F5349 		.ascii	"__SIZE_TYPE__ unsigned int\000"
 9789      5A455F54 
 9789      5950455F 
 9789      5F20756E 
 9789      7369676E 
 9790              	.LASF353:
 9791 060e 5F5F4445 		.ascii	"__DEC64_MAX_EXP__ 385\000"
 9791      4336345F 
 9791      4D41585F 
 9791      4558505F 
 9791      5F203338 
 9792              	.LASF785:
 9793 0624 67657463 		.ascii	"getc(fp) __sgetc_r(_REENT, fp)\000"
 9793      28667029 
 9793      205F5F73 
 9793      67657463 
 9793      5F72285F 
 9794              	.LASF975:
 9795 0643 746D7243 		.ascii	"tmrCOMMAND_STOP 1\000"
 9795      4F4D4D41 
 9795      4E445F53 
 9795      544F5020 
 9795      3100
 9796              	.LASF313:
 9797 0655 5F5F464C 		.ascii	"__FLT_HAS_DENORM__ 1\000"
 9797      545F4841 
 9797      535F4445 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 225


 9797      4E4F524D 
 9797      5F5F2031 
 9798              	.LASF221:
 9799 066a 5F5F494E 		.ascii	"__INT8_TYPE__ signed char\000"
 9799      54385F54 
 9799      5950455F 
 9799      5F207369 
 9799      676E6564 
 9800              	.LASF29:
 9801 0684 7854494D 		.ascii	"xTIME_OUT\000"
 9801      455F4F55 
 9801      5400
 9802              	.LASF561:
 9803 068e 5F455846 		.ascii	"_EXFUN(name,proto) name proto\000"
 9803      554E286E 
 9803      616D652C 
 9803      70726F74 
 9803      6F29206E 
 9804              	.LASF838:
 9805 06ac 494E434C 		.ascii	"INCLUDE_vTaskSuspend 1\000"
 9805      5544455F 
 9805      76546173 
 9805      6B537573 
 9805      70656E64 
 9806              	.LASF958:
 9807 06c3 6C697374 		.ascii	"listGET_OWNER_OF_HEAD_ENTRY(pxList) ( (&( ( pxList "
 9807      4745545F 
 9807      4F574E45 
 9807      525F4F46 
 9807      5F484541 
 9808 06f6 292D3E78 		.ascii	")->xListEnd ))->pxNext->pvOwner )\000"
 9808      4C697374 
 9808      456E6420 
 9808      29292D3E 
 9808      70784E65 
 9809              	.LASF133:
 9810 0718 78546963 		.ascii	"xTickCount\000"
 9810      6B436F75 
 9810      6E7400
 9811              	.LASF141:
 9812 0723 75785461 		.ascii	"uxTaskNumber\000"
 9812      736B4E75 
 9812      6D626572 
 9812      00
 9813              	.LASF639:
 9814 0730 5F524545 		.ascii	"_REENT_INIT_RAND48(var) do { struct _reent *_r = (v"
 9814      4E545F49 
 9814      4E49545F 
 9814      52414E44 
 9814      34382876 
 9815 0763 6172293B 		.ascii	"ar); _r->_r48->_seed[0] = _RAND48_SEED_0; _r->_r48-"
 9815      205F722D 
 9815      3E5F7234 
 9815      382D3E5F 
 9815      73656564 
 9816 0796 3E5F7365 		.ascii	">_seed[1] = _RAND48_SEED_1; _r->_r48->_seed[2] = _R"
 9816      65645B31 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 226


 9816      5D203D20 
 9816      5F52414E 
 9816      4434385F 
 9817 07c9 414E4434 		.ascii	"AND48_SEED_2; _r->_r48->_mult[0] = _RAND48_MULT_0; "
 9817      385F5345 
 9817      45445F32 
 9817      3B205F72 
 9817      2D3E5F72 
 9818 07fc 5F722D3E 		.ascii	"_r->_r48->_mult[1] = _RAND48_MULT_1; _r->_r48->_mul"
 9818      5F723438 
 9818      2D3E5F6D 
 9818      756C745B 
 9818      315D203D 
 9819 082f 745B325D 		.ascii	"t[2] = _RAND48_MULT_2; _r->_r48->_add = _RAND48_ADD"
 9819      203D205F 
 9819      52414E44 
 9819      34385F4D 
 9819      554C545F 
 9820 0862 3B205F72 		.ascii	"; _r->_r48->_rand_next = 1; } while (0)\000"
 9820      2D3E5F72 
 9820      34382D3E 
 9820      5F72616E 
 9820      645F6E65 
 9821              	.LASF330:
 9822 088a 5F5F4C44 		.ascii	"__LDBL_MANT_DIG__ 53\000"
 9822      424C5F4D 
 9822      414E545F 
 9822      4449475F 
 9822      5F203533 
 9823              	.LASF173:
 9824 089f 7461736B 		.ascii	"taskRECORD_READY_PRIORITY(uxPriority) { if( ( uxPri"
 9824      5245434F 
 9824      52445F52 
 9824      45414459 
 9824      5F505249 
 9825 08d2 6F726974 		.ascii	"ority ) > uxTopReadyPriority ) { uxTopReadyPriority"
 9825      79202920 
 9825      3E207578 
 9825      546F7052 
 9825      65616479 
 9826 0905 203D2028 		.ascii	" = ( uxPriority ); } }\000"
 9826      20757850 
 9826      72696F72 
 9826      69747920 
 9826      293B207D 
 9827              	.LASF874:
 9828 091c 706F7274 		.ascii	"portUSING_MPU_WRAPPERS 0\000"
 9828      5553494E 
 9828      475F4D50 
 9828      555F5752 
 9828      41505045 
 9829              	.LASF282:
 9830 0935 5F5F5549 		.ascii	"__UINT8_C(c) c\000"
 9830      4E54385F 
 9830      43286329 
 9830      206300
 9831              	.LASF222:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 227


 9832 0944 5F5F494E 		.ascii	"__INT16_TYPE__ short int\000"
 9832      5431365F 
 9832      54595045 
 9832      5F5F2073 
 9832      686F7274 
 9833              	.LASF896:
 9834 095d 74726163 		.ascii	"traceSTART() \000"
 9834      65535441 
 9834      52542829 
 9834      2000
 9835              	.LASF768:
 9836 096b 73746469 		.ascii	"stdin (_REENT->_stdin)\000"
 9836      6E20285F 
 9836      5245454E 
 9836      542D3E5F 
 9836      73746469 
 9837              	.LASF43:
 9838 0982 70785374 		.ascii	"pxStack\000"
 9838      61636B00 
 9839              	.LASF970:
 9840 098a 7461736B 		.ascii	"taskSCHEDULER_RUNNING 1\000"
 9840      53434845 
 9840      44554C45 
 9840      525F5255 
 9840      4E4E494E 
 9841              	.LASF507:
 9842 09a2 5F5F4150 		.ascii	"__APCS_32__ 1\000"
 9842      43535F33 
 9842      325F5F20 
 9842      3100
 9843              	.LASF908:
 9844 09b0 74726163 		.ascii	"traceCREATE_MUTEX_FAILED() \000"
 9844      65435245 
 9844      4154455F 
 9844      4D555445 
 9844      585F4641 
 9845              	.LASF237:
 9846 09cc 5F5F494E 		.ascii	"__INT_FAST8_TYPE__ int\000"
 9846      545F4641 
 9846      5354385F 
 9846      54595045 
 9846      5F5F2069 
 9847              	.LASF184:
 9848 09e3 5F5F5354 		.ascii	"__STDC_HOSTED__ 1\000"
 9848      44435F48 
 9848      4F535445 
 9848      445F5F20 
 9848      3100
 9849              	.LASF400:
 9850 09f5 5F5F554C 		.ascii	"__ULLFRACT_FBIT__ 64\000"
 9850      4C465241 
 9850      43545F46 
 9850      4249545F 
 9850      5F203634 
 9851              	.LASF943:
 9852 0a0a 706F7274 		.ascii	"portPRIVILEGE_BIT ( ( unsigned portBASE_TYPE ) 0x00"
 9852      50524956 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 228


 9852      494C4547 
 9852      455F4249 
 9852      54202820 
 9853 0a3d 202900   		.ascii	" )\000"
 9854              	.LASF756:
 9855 0a40 5F494F4C 		.ascii	"_IOLBF 1\000"
 9855      42462031 
 9855      00
 9856              	.LASF240:
 9857 0a49 5F5F494E 		.ascii	"__INT_FAST64_TYPE__ long long int\000"
 9857      545F4641 
 9857      53543634 
 9857      5F545950 
 9857      455F5F20 
 9858              	.LASF215:
 9859 0a6b 5F5F5749 		.ascii	"__WINT_TYPE__ unsigned int\000"
 9859      4E545F54 
 9859      5950455F 
 9859      5F20756E 
 9859      7369676E 
 9860              	.LASF146:
 9861 0a86 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9861      736B4765 
 9861      744E756D 
 9861      6265724F 
 9861      66546173 
 9862              	.LASF915:
 9863 0a9d 74726163 		.ascii	"traceQUEUE_SEND(pxQueue) \000"
 9863      65515545 
 9863      55455F53 
 9863      454E4428 
 9863      70785175 
 9864              	.LASF575:
 9865 0ab7 5F5F5349 		.ascii	"__SIZE_T__ \000"
 9865      5A455F54 
 9865      5F5F2000 
 9866              	.LASF919:
 9867 0ac3 74726163 		.ascii	"traceQUEUE_RECEIVE_FAILED(pxQueue) \000"
 9867      65515545 
 9867      55455F52 
 9867      45434549 
 9867      56455F46 
 9868              	.LASF153:
 9869 0ae7 5F5F6E65 		.ascii	"__need___va_list \000"
 9869      65645F5F 
 9869      5F76615F 
 9869      6C697374 
 9869      2000
 9870              	.LASF272:
 9871 0af9 5F5F5549 		.ascii	"__UINT64_MAX__ 18446744073709551615ULL\000"
 9871      4E543634 
 9871      5F4D4158 
 9871      5F5F2031 
 9871      38343436 
 9872              	.LASF872:
 9873 0b20 50524956 		.ascii	"PRIVILEGED_FUNCTION \000"
 9873      494C4547 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 229


 9873      45445F46 
 9873      554E4354 
 9873      494F4E20 
 9874              	.LASF637:
 9875 0b35 5F524545 		.ascii	"_REENT_CHECK_TM(var) _REENT_CHECK(var, _localtime_b"
 9875      4E545F43 
 9875      4845434B 
 9875      5F544D28 
 9875      76617229 
 9876 0b68 75662C20 		.ascii	"uf, struct __tm *, sizeof *((var)->_localtime_buf),"
 9876      73747275 
 9876      6374205F 
 9876      5F746D20 
 9876      2A2C2073 
 9877 0b9b 202900   		.ascii	" )\000"
 9878              	.LASF900:
 9879 0b9e 74726163 		.ascii	"traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInh"
 9879      65544153 
 9879      4B5F5052 
 9879      494F5249 
 9879      54595F49 
 9880 0bd1 65726974 		.ascii	"eritedPriority) \000"
 9880      65645072 
 9880      696F7269 
 9880      74792920 
 9880      00
 9881              	.LASF373:
 9882 0be2 5F5F5553 		.ascii	"__USFRACT_MAX__ 0XFFP-8UHR\000"
 9882      46524143 
 9882      545F4D41 
 9882      585F5F20 
 9882      30584646 
 9883              	.LASF165:
 9884 0bfd 54494D45 		.ascii	"TIMERS_H \000"
 9884      52535F48 
 9884      2000
 9885              	.LASF706:
 9886 0c07 5F5F6E65 		.ascii	"__need_wchar_t\000"
 9886      65645F77 
 9886      63686172 
 9886      5F7400
 9887              	.LASF986:
 9888 0c16 7854696D 		.ascii	"xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken"
 9888      65725265 
 9888      73657446 
 9888      726F6D49 
 9888      53522878 
 9889 0c49 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STAR"
 9889      696D6572 
 9889      47656E65 
 9889      72696343 
 9889      6F6D6D61 
 9890 0c7c 542C2028 		.ascii	"T, ( xTaskGetTickCountFromISR() ), ( pxHigherPriori"
 9890      20785461 
 9890      736B4765 
 9890      74546963 
 9890      6B436F75 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 230


 9891 0caf 74795461 		.ascii	"tyTaskWoken ), 0U )\000"
 9891      736B576F 
 9891      6B656E20 
 9891      292C2030 
 9891      55202900 
 9892              	.LASF891:
 9893 0cc3 706F7274 		.ascii	"portSETUP_TCB(pxTCB) ( void ) pxTCB\000"
 9893      53455455 
 9893      505F5443 
 9893      42287078 
 9893      54434229 
 9894              	.LASF610:
 9895 0ce7 5F5F6C6F 		.ascii	"__lock_close_recursive(lock) (_CAST_VOID 0)\000"
 9895      636B5F63 
 9895      6C6F7365 
 9895      5F726563 
 9895      75727369 
 9896              	.LASF934:
 9897 0d13 74726163 		.ascii	"traceTASK_INCREMENT_TICK(xTickCount) \000"
 9897      65544153 
 9897      4B5F494E 
 9897      4352454D 
 9897      454E545F 
 9898              	.LASF686:
 9899 0d39 5F425344 		.ascii	"_BSD_PTRDIFF_T_ \000"
 9899      5F505452 
 9899      44494646 
 9899      5F545F20 
 9899      00
 9900              	.LASF143:
 9901 0d4a 474E5520 		.ascii	"GNU C 4.7.2\000"
 9901      4320342E 
 9901      372E3200 
 9902              	.LASF390:
 9903 0d56 5F5F554C 		.ascii	"__ULFRACT_FBIT__ 32\000"
 9903      46524143 
 9903      545F4642 
 9903      49545F5F 
 9903      20333200 
 9904              	.LASF168:
 9905 0d6a 74736B53 		.ascii	"tskSTACK_FILL_BYTE ( 0xa5U )\000"
 9905      5441434B 
 9905      5F46494C 
 9905      4C5F4259 
 9905      54452028 
 9906              	.LASF565:
 9907 0d87 5F444546 		.ascii	"_DEFUN_VOID(name) name(_NOARGS)\000"
 9907      554E5F56 
 9907      4F494428 
 9907      6E616D65 
 9907      29206E61 
 9908              	.LASF590:
 9909 0da7 5F5F7369 		.ascii	"__size_t \000"
 9909      7A655F74 
 9909      2000
 9910              	.LASF739:
 9911 0db1 5F5F534C 		.ascii	"__SLBF 0x0001\000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 231


 9911      42462030 
 9911      78303030 
 9911      3100
 9912              	.LASF181:
 9913 0dbf 5F5F5354 		.ascii	"__STDC_VERSION__ 199901L\000"
 9913      44435F56 
 9913      45525349 
 9913      4F4E5F5F 
 9913      20313939 
 9914              	.LASF938:
 9915 0dd8 74726163 		.ascii	"traceTIMER_EXPIRED(pxTimer) \000"
 9915      6554494D 
 9915      45525F45 
 9915      58504952 
 9915      45442870 
 9916              	.LASF542:
 9917 0df5 5F504F49 		.ascii	"_POINTER_INT long\000"
 9917      4E544552 
 9917      5F494E54 
 9917      206C6F6E 
 9917      6700
 9918              	.LASF369:
 9919 0e07 5F5F5346 		.ascii	"__SFRACT_EPSILON__ 0x1P-7HR\000"
 9919      52414354 
 9919      5F455053 
 9919      494C4F4E 
 9919      5F5F2030 
 9920              	.LASF79:
 9921 0e23 78546173 		.ascii	"xTask\000"
 9921      6B00
 9922              	.LASF22:
 9923 0e29 784D696E 		.ascii	"xMiniListItem\000"
 9923      694C6973 
 9923      74497465 
 9923      6D00
 9924              	.LASF459:
 9925 0e37 5F5F5553 		.ascii	"__USQ_FBIT__ 32\000"
 9925      515F4642 
 9925      49545F5F 
 9925      20333200 
 9926              	.LASF207:
 9927 0e47 5F5F4F52 		.ascii	"__ORDER_BIG_ENDIAN__ 4321\000"
 9927      4445525F 
 9927      4249475F 
 9927      454E4449 
 9927      414E5F5F 
 9928              	.LASF782:
 9929 0e61 5F5F7366 		.ascii	"__sferror(p) (((p)->_flags & __SERR) != 0)\000"
 9929      6572726F 
 9929      72287029 
 9929      20282828 
 9929      70292D3E 
 9930              	.LASF833:
 9931 0e8c 636F6E66 		.ascii	"configMAX_CO_ROUTINE_PRIORITIES ( 2 )\000"
 9931      69674D41 
 9931      585F434F 
 9931      5F524F55 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 232


 9931      54494E45 
 9932              	.LASF449:
 9933 0eb2 5F5F5351 		.ascii	"__SQ_FBIT__ 31\000"
 9933      5F464249 
 9933      545F5F20 
 9933      333100
 9934              	.LASF70:
 9935 0ec1 75785265 		.ascii	"uxReturn\000"
 9935      7475726E 
 9935      00
 9936              	.LASF492:
 9937 0eca 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR32_T_LOCK_FREE 2\000"
 9937      435F4154 
 9937      4F4D4943 
 9937      5F434841 
 9937      5233325F 
 9938              	.LASF748:
 9939 0eec 5F5F5353 		.ascii	"__SSTR 0x0200\000"
 9939      54522030 
 9939      78303230 
 9939      3000
 9940              	.LASF15:
 9941 0efa 70784E65 		.ascii	"pxNext\000"
 9941      787400
 9942              	.LASF746:
 9943 0f01 5F5F534D 		.ascii	"__SMBF 0x0080\000"
 9943      42462030 
 9943      78303038 
 9943      3000
 9944              	.LASF527:
 9945 0f0f 5041434B 		.ascii	"PACK_STRUCT_END __attribute((packed))\000"
 9945      5F535452 
 9945      5543545F 
 9945      454E4420 
 9945      5F5F6174 
 9946              	.LASF944:
 9947 0f35 706F7274 		.ascii	"portYIELD_WITHIN_API portYIELD\000"
 9947      5949454C 
 9947      445F5749 
 9947      5448494E 
 9947      5F415049 
 9948              	.LASF457:
 9949 0f54 5F5F5548 		.ascii	"__UHQ_FBIT__ 16\000"
 9949      515F4642 
 9949      49545F5F 
 9949      20313600 
 9950              	.LASF55:
 9951 0f64 70784E65 		.ascii	"pxNewTCB\000"
 9951      77544342 
 9951      00
 9952              	.LASF630:
 9953 0f6d 5F524545 		.ascii	"_REENT_EMERGENCY_SIZE 25\000"
 9953      4E545F45 
 9953      4D455247 
 9953      454E4359 
 9953      5F53495A 
 9954              	.LASF806:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 233


 9955 0f86 70645452 		.ascii	"pdTRUE ( 1 )\000"
 9955      55452028 
 9955      20312029 
 9955      00
 9956              	.LASF248:
 9957 0f93 5F5F5343 		.ascii	"__SCHAR_MAX__ 127\000"
 9957      4841525F 
 9957      4D41585F 
 9957      5F203132 
 9957      3700
 9958              	.LASF349:
 9959 0fa5 5F5F4445 		.ascii	"__DEC32_EPSILON__ 1E-6DF\000"
 9959      4333325F 
 9959      45505349 
 9959      4C4F4E5F 
 9959      5F203145 
 9960              	.LASF707:
 9961 0fbe 4E554C4C 		.ascii	"NULL\000"
 9961      00
 9962              	.LASF426:
 9963 0fc3 5F5F4C41 		.ascii	"__LACCUM_IBIT__ 32\000"
 9963      4343554D 
 9963      5F494249 
 9963      545F5F20 
 9963      333200
 9964              	.LASF62:
 9965 0fd6 7854696D 		.ascii	"xTimeToWake\000"
 9965      65546F57 
 9965      616B6500 
 9966              	.LASF466:
 9967 0fe2 5F5F4841 		.ascii	"__HA_IBIT__ 8\000"
 9967      5F494249 
 9967      545F5F20 
 9967      3800
 9968              	.LASF732:
 9969 0ff0 5F53545F 		.ascii	"_ST_INT32\000"
 9969      494E5433 
 9969      3200
 9970              	.LASF808:
 9971 0ffa 70645041 		.ascii	"pdPASS ( 1 )\000"
 9971      53532028 
 9971      20312029 
 9971      00
 9972              	.LASF266:
 9973 1007 5F5F494E 		.ascii	"__INT16_MAX__ 32767\000"
 9973      5431365F 
 9973      4D41585F 
 9973      5F203332 
 9973      37363700 
 9974              	.LASF45:
 9975 101b 75784261 		.ascii	"uxBasePriority\000"
 9975      73655072 
 9975      696F7269 
 9975      747900
 9976              	.LASF664:
 9977 102a 5F524545 		.ascii	"_REENT_MBRTOWC_STATE(ptr) ((ptr)->_misc->_mbrtowc_s"
 9977      4E545F4D 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 234


 9977      4252544F 
 9977      57435F53 
 9977      54415445 
 9978 105d 74617465 		.ascii	"tate)\000"
 9978      2900
 9979              	.LASF888:
 9980 1063 494E434C 		.ascii	"INCLUDE_xTaskGetSchedulerState 0\000"
 9980      5544455F 
 9980      78546173 
 9980      6B476574 
 9980      53636865 
 9981              	.LASF129:
 9982 1084 78546173 		.ascii	"xTasksWaitingTermination\000"
 9982      6B735761 
 9982      6974696E 
 9982      67546572 
 9982      6D696E61 
 9983              	.LASF46:
 9984 109d 74736B54 		.ascii	"tskTCB\000"
 9984      434200
 9985              	.LASF259:
 9986 10a4 5F5F494E 		.ascii	"__INTMAX_MAX__ 9223372036854775807LL\000"
 9986      544D4158 
 9986      5F4D4158 
 9986      5F5F2039 
 9986      32323333 
 9987              	.LASF543:
 9988 10c9 5F5F5241 		.ascii	"__RAND_MAX\000"
 9988      4E445F4D 
 9988      415800
 9989              	.LASF499:
 9990 10d4 5F5F4743 		.ascii	"__GCC_ATOMIC_POINTER_LOCK_FREE 2\000"
 9990      435F4154 
 9990      4F4D4943 
 9990      5F504F49 
 9990      4E544552 
 9991              	.LASF245:
 9992 10f5 5F5F494E 		.ascii	"__INTPTR_TYPE__ int\000"
 9992      54505452 
 9992      5F545950 
 9992      455F5F20 
 9992      696E7400 
 9993              	.LASF813:
 9994 1109 6572724E 		.ascii	"errNO_TASK_TO_RUN ( -2 )\000"
 9994      4F5F5441 
 9994      534B5F54 
 9994      4F5F5255 
 9994      4E202820 
 9995              	.LASF169:
 9996 1122 74736B42 		.ascii	"tskBLOCKED_CHAR ( ( signed char ) 'B' )\000"
 9996      4C4F434B 
 9996      45445F43 
 9996      48415220 
 9996      28202820 
 9997              	.LASF636:
 9998 114a 5F524545 		.ascii	"_REENT_CHECK(var,what,type,size,init) do { struct _"
 9998      4E545F43 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 235


 9998      4845434B 
 9998      28766172 
 9998      2C776861 
 9999 117d 7265656E 		.ascii	"reent *_r = (var); if (_r->what == NULL) { _r->what"
 9999      74202A5F 
 9999      72203D20 
 9999      28766172 
 9999      293B2069 
 10000 11b0 203D2028 		.ascii	" = (type)malloc(size); __reent_assert(_r->what); in"
 10000      74797065 
 10000      296D616C 
 10000      6C6F6328 
 10000      73697A65 
 10001 11e3 69743B20 		.ascii	"it; } } while (0)\000"
 10001      7D207D20 
 10001      7768696C 
 10001      65202830 
 10001      2900
 10002              	.LASF73:
 10003 11f5 75784375 		.ascii	"uxCurrentPriority\000"
 10003      7272656E 
 10003      74507269 
 10003      6F726974 
 10003      7900
 10004              	.LASF348:
 10005 1207 5F5F4445 		.ascii	"__DEC32_MAX__ 9.999999E96DF\000"
 10005      4333325F 
 10005      4D41585F 
 10005      5F20392E 
 10005      39393939 
 10006              	.LASF382:
 10007 1223 5F5F5546 		.ascii	"__UFRACT_MIN__ 0.0UR\000"
 10007      52414354 
 10007      5F4D494E 
 10007      5F5F2030 
 10007      2E305552 
 10008              	.LASF918:
 10009 1238 74726163 		.ascii	"traceQUEUE_PEEK(pxQueue) \000"
 10009      65515545 
 10009      55455F50 
 10009      45454B28 
 10009      70785175 
 10010              	.LASF343:
 10011 1252 5F5F4C44 		.ascii	"__LDBL_HAS_QUIET_NAN__ 1\000"
 10011      424C5F48 
 10011      41535F51 
 10011      55494554 
 10011      5F4E414E 
 10012              	.LASF555:
 10013 126b 5F434F4E 		.ascii	"_CONST const\000"
 10013      53542063 
 10013      6F6E7374 
 10013      00
 10014              	.LASF988:
 10015 1278 7461736B 		.ascii	"taskFIRST_CHECK_FOR_STACK_OVERFLOW() { if( pxCurren"
 10015      46495253 
 10015      545F4348 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 236


 10015      45434B5F 
 10015      464F525F 
 10016 12ab 74544342 		.ascii	"tTCB->pxTopOfStack <= pxCurrentTCB->pxStack ) { vAp"
 10016      2D3E7078 
 10016      546F704F 
 10016      66537461 
 10016      636B203C 
 10017 12de 706C6963 		.ascii	"plicationStackOverflowHook( ( xTaskHandle ) pxCurre"
 10017      6174696F 
 10017      6E537461 
 10017      636B4F76 
 10017      6572666C 
 10018 1311 6E745443 		.ascii	"ntTCB, pxCurrentTCB->pcTaskName ); } }\000"
 10018      422C2070 
 10018      78437572 
 10018      72656E74 
 10018      5443422D 
 10019              	.LASF577:
 10020 1338 5F535953 		.ascii	"_SYS_SIZE_T_H \000"
 10020      5F53495A 
 10020      455F545F 
 10020      482000
 10021              	.LASF885:
 10022 1347 494E434C 		.ascii	"INCLUDE_xTaskResumeFromISR 1\000"
 10022      5544455F 
 10022      78546173 
 10022      6B526573 
 10022      756D6546 
 10023              	.LASF233:
 10024 1364 5F5F5549 		.ascii	"__UINT_LEAST8_TYPE__ unsigned char\000"
 10024      4E545F4C 
 10024      45415354 
 10024      385F5459 
 10024      50455F5F 
 10025              	.LASF415:
 10026 1387 5F5F4143 		.ascii	"__ACCUM_FBIT__ 15\000"
 10026      43554D5F 
 10026      46424954 
 10026      5F5F2031 
 10026      3500
 10027              	.LASF790:
 10028 1399 70757463 		.ascii	"putchar(x) putc(x, stdout)\000"
 10028      68617228 
 10028      78292070 
 10028      75746328 
 10028      782C2073 
 10029              	.LASF421:
 10030 13b4 5F5F5541 		.ascii	"__UACCUM_IBIT__ 16\000"
 10030      4343554D 
 10030      5F494249 
 10030      545F5F20 
 10030      313600
 10031              	.LASF7:
 10032 13c7 6C6F6E67 		.ascii	"long int\000"
 10032      20696E74 
 10032      00
 10033              	.LASF296:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 237


 10034 13d0 5F5F5549 		.ascii	"__UINT_FAST64_MAX__ 18446744073709551615ULL\000"
 10034      4E545F46 
 10034      41535436 
 10034      345F4D41 
 10034      585F5F20 
 10035              	.LASF147:
 10036 13fc 70784375 		.ascii	"pxCurrentTCB\000"
 10036      7272656E 
 10036      74544342 
 10036      00
 10037              	.LASF882:
 10038 1409 636F6E66 		.ascii	"configUSE_COUNTING_SEMAPHORES 0\000"
 10038      69675553 
 10038      455F434F 
 10038      554E5449 
 10038      4E475F53 
 10039              	.LASF324:
 10040 1429 5F5F4442 		.ascii	"__DBL_MIN__ ((double)2.2250738585072014e-308L)\000"
 10040      4C5F4D49 
 10040      4E5F5F20 
 10040      2828646F 
 10040      75626C65 
 10041              	.LASF881:
 10042 1458 636F6E66 		.ascii	"configUSE_TIMERS 0\000"
 10042      69675553 
 10042      455F5449 
 10042      4D455253 
 10042      203000
 10043              	.LASF599:
 10044 146b 5F5F5F69 		.ascii	"___int_least16_t_defined 1\000"
 10044      6E745F6C 
 10044      65617374 
 10044      31365F74 
 10044      5F646566 
 10045              	.LASF253:
 10046 1486 5F5F5743 		.ascii	"__WCHAR_MAX__ 4294967295U\000"
 10046      4841525F 
 10046      4D41585F 
 10046      5F203432 
 10046      39343936 
 10047              	.LASF359:
 10048 14a0 5F5F4445 		.ascii	"__DEC128_MIN_EXP__ (-6142)\000"
 10048      43313238 
 10048      5F4D494E 
 10048      5F455850 
 10048      5F5F2028 
 10049              	.LASF540:
 10050 14bb 5F4C4442 		.ascii	"_LDBL_EQ_DBL 1\000"
 10050      4C5F4551 
 10050      5F44424C 
 10050      203100
 10051              	.LASF477:
 10052 14ca 5F5F5544 		.ascii	"__UDA_FBIT__ 32\000"
 10052      415F4642 
 10052      49545F5F 
 10052      20333200 
 10053              	.LASF574:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 238


 10054 14da 5F5F7369 		.ascii	"__size_t__ \000"
 10054      7A655F74 
 10054      5F5F2000 
 10055              	.LASF969:
 10056 14e6 7461736B 		.ascii	"taskSCHEDULER_NOT_STARTED 0\000"
 10056      53434845 
 10056      44554C45 
 10056      525F4E4F 
 10056      545F5354 
 10057              	.LASF414:
 10058 1502 5F5F5553 		.ascii	"__USACCUM_EPSILON__ 0x1P-8UHK\000"
 10058      41434355 
 10058      4D5F4550 
 10058      53494C4F 
 10058      4E5F5F20 
 10059              	.LASF262:
 10060 1520 5F5F5549 		.ascii	"__UINTMAX_C(c) c ## ULL\000"
 10060      4E544D41 
 10060      585F4328 
 10060      63292063 
 10060      20232320 
 10061              	.LASF211:
 10062 1538 5F5F5349 		.ascii	"__SIZEOF_POINTER__ 4\000"
 10062      5A454F46 
 10062      5F504F49 
 10062      4E544552 
 10062      5F5F2034 
 10063              	.LASF229:
 10064 154d 5F5F494E 		.ascii	"__INT_LEAST8_TYPE__ signed char\000"
 10064      545F4C45 
 10064      41535438 
 10064      5F545950 
 10064      455F5F20 
 10065              	.LASF894:
 10066 156d 76517565 		.ascii	"vQueueUnregisterQueue(xQueue) \000"
 10066      7565556E 
 10066      72656769 
 10066      73746572 
 10066      51756575 
 10067              	.LASF659:
 10068 158c 5F524545 		.ascii	"_REENT_STRTOK_LAST(ptr) ((ptr)->_misc->_strtok_last"
 10068      4E545F53 
 10068      5452544F 
 10068      4B5F4C41 
 10068      53542870 
 10069 15bf 2900     		.ascii	")\000"
 10070              	.LASF88:
 10071 15c1 78546173 		.ascii	"xTaskGetTickCount\000"
 10071      6B476574 
 10071      5469636B 
 10071      436F756E 
 10071      7400
 10072              	.LASF69:
 10073 15d3 70785461 		.ascii	"pxTask\000"
 10073      736B00
 10074              	.LASF675:
 10075 15da 5F5F494E 		.ascii	"__INTTYPES_DEFINED__ \000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 239


 10075      54545950 
 10075      45535F44 
 10075      4546494E 
 10075      45445F5F 
 10076              	.LASF290:
 10077 15f0 5F5F494E 		.ascii	"__INT_FAST16_MAX__ 2147483647\000"
 10077      545F4641 
 10077      53543136 
 10077      5F4D4158 
 10077      5F5F2032 
 10078              	.LASF514:
 10079 160e 5F5F5448 		.ascii	"__THUMB_INTERWORK__ 1\000"
 10079      554D425F 
 10079      494E5445 
 10079      52574F52 
 10079      4B5F5F20 
 10080              	.LASF403:
 10081 1624 5F5F554C 		.ascii	"__ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR\000"
 10081      4C465241 
 10081      43545F4D 
 10081      41585F5F 
 10081      20305846 
 10082              	.LASF91:
 10083 1650 76546173 		.ascii	"vTaskIncrementTick\000"
 10083      6B496E63 
 10083      72656D65 
 10083      6E745469 
 10083      636B00
 10084              	.LASF265:
 10085 1663 5F5F494E 		.ascii	"__INT8_MAX__ 127\000"
 10085      54385F4D 
 10085      41585F5F 
 10085      20313237 
 10085      00
 10086              	.LASF837:
 10087 1674 494E434C 		.ascii	"INCLUDE_vTaskCleanUpResources 0\000"
 10087      5544455F 
 10087      76546173 
 10087      6B436C65 
 10087      616E5570 
 10088              	.LASF332:
 10089 1694 5F5F4C44 		.ascii	"__LDBL_MIN_EXP__ (-1021)\000"
 10089      424C5F4D 
 10089      494E5F45 
 10089      58505F5F 
 10089      20282D31 
 10090              	.LASF586:
 10091 16ad 5F53495A 		.ascii	"_SIZE_T_DECLARED \000"
 10091      455F545F 
 10091      4445434C 
 10091      41524544 
 10091      2000
 10092              	.LASF219:
 10093 16bf 5F5F4348 		.ascii	"__CHAR32_TYPE__ long unsigned int\000"
 10093      41523332 
 10093      5F545950 
 10093      455F5F20 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 240


 10093      6C6F6E67 
 10094              	.LASF2:
 10095 16e1 756E7369 		.ascii	"unsigned char\000"
 10095      676E6564 
 10095      20636861 
 10095      7200
 10096              	.LASF980:
 10097 16ef 7854696D 		.ascii	"xTimerChangePeriod(xTimer,xNewPeriod,xBlockTime) xT"
 10097      65724368 
 10097      616E6765 
 10097      50657269 
 10097      6F642878 
 10098 1722 696D6572 		.ascii	"imerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_P"
 10098      47656E65 
 10098      72696343 
 10098      6F6D6D61 
 10098      6E642820 
 10099 1755 4552494F 		.ascii	"ERIOD, ( xNewPeriod ), NULL, ( xBlockTime ) )\000"
 10099      442C2028 
 10099      20784E65 
 10099      77506572 
 10099      696F6420 
 10100              	.LASF306:
 10101 1783 5F5F464C 		.ascii	"__FLT_MAX_EXP__ 128\000"
 10101      545F4D41 
 10101      585F4558 
 10101      505F5F20 
 10101      31323800 
 10102              	.LASF197:
 10103 1797 5F5F5349 		.ascii	"__SIZEOF_LONG__ 4\000"
 10103      5A454F46 
 10103      5F4C4F4E 
 10103      475F5F20 
 10103      3400
 10104              	.LASF569:
 10105 17a9 5F504152 		.ascii	"_PARAMS(paramlist) paramlist\000"
 10105      414D5328 
 10105      70617261 
 10105      6D6C6973 
 10105      74292070 
 10106              	.LASF811:
 10107 17c6 65727251 		.ascii	"errQUEUE_FULL ( 0 )\000"
 10107      55455545 
 10107      5F46554C 
 10107      4C202820 
 10107      30202900 
 10108              	.LASF766:
 10109 17da 5345454B 		.ascii	"SEEK_CUR 1\000"
 10109      5F435552 
 10109      203100
 10110              	.LASF104:
 10111 17e5 70785469 		.ascii	"pxTicksToWait\000"
 10111      636B7354 
 10111      6F576169 
 10111      7400
 10112              	.LASF935:
 10113 17f3 74726163 		.ascii	"traceTIMER_CREATE(pxNewTimer) \000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 241


 10113      6554494D 
 10113      45525F43 
 10113      52454154 
 10113      45287078 
 10114              	.LASF201:
 10115 1812 5F5F5349 		.ascii	"__SIZEOF_DOUBLE__ 8\000"
 10115      5A454F46 
 10115      5F444F55 
 10115      424C455F 
 10115      5F203800 
 10116              	.LASF711:
 10117 1826 5F434C4F 		.ascii	"_CLOCK_T_ unsigned long\000"
 10117      434B5F54 
 10117      5F20756E 
 10117      7369676E 
 10117      6564206C 
 10118              	.LASF48:
 10119 183e 70634E61 		.ascii	"pcName\000"
 10119      6D6500
 10120              	.LASF801:
 10121 1845 73747263 		.ascii	"strcmpi strcasecmp\000"
 10121      6D706920 
 10121      73747263 
 10121      61736563 
 10121      6D7000
 10122              	.LASF873:
 10123 1858 50524956 		.ascii	"PRIVILEGED_DATA \000"
 10123      494C4547 
 10123      45445F44 
 10123      41544120 
 10123      00
 10124              	.LASF912:
 10125 1869 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 10125      6554414B 
 10125      455F4D55 
 10125      5445585F 
 10125      52454355 
 10126              	.LASF649:
 10127 1894 5F524545 		.ascii	"_REENT_RAND48_SEED(ptr) ((ptr)->_r48->_seed)\000"
 10127      4E545F52 
 10127      414E4434 
 10127      385F5345 
 10127      45442870 
 10128              	.LASF355:
 10129 18c1 5F5F4445 		.ascii	"__DEC64_MAX__ 9.999999999999999E384DD\000"
 10129      4336345F 
 10129      4D41585F 
 10129      5F20392E 
 10129      39393939 
 10130              	.LASF791:
 10131 18e7 5F5F6E65 		.ascii	"__need_wchar_t \000"
 10131      65645F77 
 10131      63686172 
 10131      5F742000 
 10132              	.LASF815:
 10133 18f7 65727251 		.ascii	"errQUEUE_YIELD ( -5 )\000"
 10133      55455545 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 242


 10133      5F594945 
 10133      4C442028 
 10133      202D3520 
 10134              	.LASF796:
 10135 190d 45584954 		.ascii	"EXIT_SUCCESS 0\000"
 10135      5F535543 
 10135      43455353 
 10135      203000
 10136              	.LASF479:
 10137 191c 5F5F5554 		.ascii	"__UTA_FBIT__ 64\000"
 10137      415F4642 
 10137      49545F5F 
 10137      20363400 
 10138              	.LASF760:
 10139 192c 464F5045 		.ascii	"FOPEN_MAX 20\000"
 10139      4E5F4D41 
 10139      58203230 
 10139      00
 10140              	.LASF522:
 10141 1939 53544D33 		.ascii	"STM32F10X_HD 1\000"
 10141      32463130 
 10141      585F4844 
 10141      203100
 10142              	.LASF308:
 10143 1948 5F5F464C 		.ascii	"__FLT_DECIMAL_DIG__ 9\000"
 10143      545F4445 
 10143      43494D41 
 10143      4C5F4449 
 10143      475F5F20 
 10144              	.LASF890:
 10145 195e 706F7274 		.ascii	"portCLEAN_UP_TCB(pxTCB) ( void ) pxTCB\000"
 10145      434C4541 
 10145      4E5F5550 
 10145      5F544342 
 10145      28707854 
 10146              	.LASF131:
 10147 1985 78537573 		.ascii	"xSuspendedTaskList\000"
 10147      70656E64 
 10147      65645461 
 10147      736B4C69 
 10147      737400
 10148              	.LASF931:
 10149 1998 74726163 		.ascii	"traceTASK_SUSPEND(pxTaskToSuspend) \000"
 10149      65544153 
 10149      4B5F5355 
 10149      5350454E 
 10149      44287078 
 10150              	.LASF1:
 10151 19bc 7369676E 		.ascii	"signed char\000"
 10151      65642063 
 10151      68617200 
 10152              	.LASF529:
 10153 19c8 5F5F4353 		.ascii	"__CS_SOURCERYGXX_MAJ__ 2012\000"
 10153      5F534F55 
 10153      52434552 
 10153      59475858 
 10153      5F4D414A 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 243


 10154              	.LASF989:
 10155 19e4 7461736B 		.ascii	"taskSECOND_CHECK_FOR_STACK_OVERFLOW() { static cons"
 10155      5345434F 
 10155      4E445F43 
 10155      4845434B 
 10155      5F464F52 
 10156 1a17 7420756E 		.ascii	"t unsigned char ucExpectedStackBytes[] = { tskSTACK"
 10156      7369676E 
 10156      65642063 
 10156      68617220 
 10156      75634578 
 10157 1a4a 5F46494C 		.ascii	"_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,"
 10157      4C5F4259 
 10157      54452C20 
 10157      74736B53 
 10157      5441434B 
 10158 1a7d 2074736B 		.ascii	" tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_F"
 10158      53544143 
 10158      4B5F4649 
 10158      4C4C5F42 
 10158      5954452C 
 10159 1ab0 494C4C5F 		.ascii	"ILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, t"
 10159      42595445 
 10159      2C207473 
 10159      6B535441 
 10159      434B5F46 
 10160 1ae3 736B5354 		.ascii	"skSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FIL"
 10160      41434B5F 
 10160      46494C4C 
 10160      5F425954 
 10160      452C2074 
 10161 1b16 4C5F4259 		.ascii	"L_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tsk"
 10161      54452C20 
 10161      74736B53 
 10161      5441434B 
 10161      5F46494C 
 10162 1b49 53544143 		.ascii	"STACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_"
 10162      4B5F4649 
 10162      4C4C5F42 
 10162      5954452C 
 10162      2074736B 
 10163 1b7c 42595445 		.ascii	"BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskST"
 10163      2C207473 
 10163      6B535441 
 10163      434B5F46 
 10163      494C4C5F 
 10164 1baf 41434B5F 		.ascii	"ACK_FILL_BYTE, tskSTACK_FILL_BYTE }; if( memcmp( ( "
 10164      46494C4C 
 10164      5F425954 
 10164      452C2074 
 10164      736B5354 
 10165 1be2 766F6964 		.ascii	"void * ) pxCurrentTCB->pxStack, ( void * ) ucExpect"
 10165      202A2029 
 10165      20707843 
 10165      75727265 
 10165      6E745443 
 10166 1c15 65645374 		.ascii	"edStackBytes, sizeof( ucExpectedStackBytes ) ) != 0"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 244


 10166      61636B42 
 10166      79746573 
 10166      2C207369 
 10166      7A656F66 
 10167 1c48 2029207B 		.ascii	" ) { vApplicationStackOverflowHook( ( xTaskHandle )"
 10167      20764170 
 10167      706C6963 
 10167      6174696F 
 10167      6E537461 
 10168 1c7b 20707843 		.ascii	" pxCurrentTCB, pxCurrentTCB->pcTaskName ); } }\000"
 10168      75727265 
 10168      6E745443 
 10168      422C2070 
 10168      78437572 
 10169              	.LASF483:
 10170 1caa 5F5F474E 		.ascii	"__GNUC_STDC_INLINE__ 1\000"
 10170      55435F53 
 10170      5444435F 
 10170      494E4C49 
 10170      4E455F5F 
 10171              	.LASF375:
 10172 1cc1 5F5F4652 		.ascii	"__FRACT_FBIT__ 15\000"
 10172      4143545F 
 10172      46424954 
 10172      5F5F2031 
 10172      3500
 10173              	.LASF439:
 10174 1cd3 5F5F4C4C 		.ascii	"__LLACCUM_EPSILON__ 0x1P-31LLK\000"
 10174      41434355 
 10174      4D5F4550 
 10174      53494C4F 
 10174      4E5F5F20 
 10175              	.LASF568:
 10176 1cf2 5F4C4F4E 		.ascii	"_LONG_LONG_TYPE long long\000"
 10176      475F4C4F 
 10176      4E475F54 
 10176      59504520 
 10176      6C6F6E67 
 10177              	.LASF789:
 10178 1d0c 67657463 		.ascii	"getchar() getc(stdin)\000"
 10178      68617228 
 10178      29206765 
 10178      74632873 
 10178      7464696E 
 10179              	.LASF625:
 10180 1d22 5F52414E 		.ascii	"_RAND48_SEED_2 (0x1234)\000"
 10180      4434385F 
 10180      53454544 
 10180      5F322028 
 10180      30783132 
 10181              	.LASF947:
 10182 1d3a 636F6E66 		.ascii	"configPRE_SLEEP_PROCESSING(x) \000"
 10182      69675052 
 10182      455F534C 
 10182      4545505F 
 10182      50524F43 
 10183              	.LASF850:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 245


 10184 1d59 706F7274 		.ascii	"portSHORT short\000"
 10184      53484F52 
 10184      54207368 
 10184      6F727400 
 10185              	.LASF866:
 10186 1d69 706F7274 		.ascii	"portTASK_FUNCTION(vFunction,pvParameters) void vFun"
 10186      5441534B 
 10186      5F46554E 
 10186      4354494F 
 10186      4E287646 
 10187 1d9c 6374696F 		.ascii	"ction( void *pvParameters )\000"
 10187      6E282076 
 10187      6F696420 
 10187      2A707650 
 10187      6172616D 
 10188              	.LASF927:
 10189 1db8 74726163 		.ascii	"traceTASK_DELETE(pxTaskToDelete) \000"
 10189      65544153 
 10189      4B5F4445 
 10189      4C455445 
 10189      28707854 
 10190              	.LASF425:
 10191 1dda 5F5F4C41 		.ascii	"__LACCUM_FBIT__ 31\000"
 10191      4343554D 
 10191      5F464249 
 10191      545F5F20 
 10191      333100
 10192              	.LASF960:
 10193 1ded 6C697374 		.ascii	"listLIST_ITEM_CONTAINER(pxListItem) ( ( pxListItem "
 10193      4C495354 
 10193      5F495445 
 10193      4D5F434F 
 10193      4E544149 
 10194 1e20 292D3E70 		.ascii	")->pvContainer )\000"
 10194      76436F6E 
 10194      7461696E 
 10194      65722029 
 10194      00
 10195              	.LASF408:
 10196 1e31 5F5F5341 		.ascii	"__SACCUM_MAX__ 0X7FFFP-7HK\000"
 10196      4343554D 
 10196      5F4D4158 
 10196      5F5F2030 
 10196      58374646 
 10197              	.LASF474:
 10198 1e4c 5F5F5548 		.ascii	"__UHA_IBIT__ 8\000"
 10198      415F4942 
 10198      49545F5F 
 10198      203800
 10199              	.LASF984:
 10200 1e5b 7854696D 		.ascii	"xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken)"
 10200      65725374 
 10200      6F704672 
 10200      6F6D4953 
 10200      52287854 
 10201 1e8e 20785469 		.ascii	" xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP,"
 10201      6D657247 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 246


 10201      656E6572 
 10201      6963436F 
 10201      6D6D616E 
 10202 1ec1 20302C20 		.ascii	" 0, ( pxHigherPriorityTaskWoken ), 0U )\000"
 10202      28207078 
 10202      48696768 
 10202      65725072 
 10202      696F7269 
 10203              	.LASF585:
 10204 1ee9 5F425344 		.ascii	"_BSD_SIZE_T_DEFINED_ \000"
 10204      5F53495A 
 10204      455F545F 
 10204      44454649 
 10204      4E45445F 
 10205              	.LASF107:
 10206 1eff 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 10206      6E697469 
 10206      616C6973 
 10206      65544342 
 10206      56617269 
 10207              	.LASF243:
 10208 1f19 5F5F5549 		.ascii	"__UINT_FAST32_TYPE__ unsigned int\000"
 10208      4E545F46 
 10208      41535433 
 10208      325F5459 
 10208      50455F5F 
 10209              	.LASF587:
 10210 1f3b 5F5F5F69 		.ascii	"___int_size_t_h \000"
 10210      6E745F73 
 10210      697A655F 
 10210      745F6820 
 10210      00
 10211              	.LASF183:
 10212 1f4c 5F5F5354 		.ascii	"__STDC_UTF_32__ 1\000"
 10212      44435F55 
 10212      54465F33 
 10212      325F5F20 
 10212      3100
 10213              	.LASF200:
 10214 1f5e 5F5F5349 		.ascii	"__SIZEOF_FLOAT__ 4\000"
 10214      5A454F46 
 10214      5F464C4F 
 10214      41545F5F 
 10214      203400
 10215              	.LASF752:
 10216 1f71 5F5F534F 		.ascii	"__SORD 0x2000\000"
 10216      52442030 
 10216      78323030 
 10216      3000
 10217              	.LASF307:
 10218 1f7f 5F5F464C 		.ascii	"__FLT_MAX_10_EXP__ 38\000"
 10218      545F4D41 
 10218      585F3130 
 10218      5F455850 
 10218      5F5F2033 
 10219              	.LASF378:
 10220 1f95 5F5F4652 		.ascii	"__FRACT_MAX__ 0X7FFFP-15R\000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 247


 10220      4143545F 
 10220      4D41585F 
 10220      5F203058 
 10220      37464646 
 10221              	.LASF319:
 10222 1faf 5F5F4442 		.ascii	"__DBL_MIN_10_EXP__ (-307)\000"
 10222      4C5F4D49 
 10222      4E5F3130 
 10222      5F455850 
 10222      5F5F2028 
 10223              	.LASF909:
 10224 1fc9 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE(pxMutex) \000"
 10224      65474956 
 10224      455F4D55 
 10224      5445585F 
 10224      52454355 
 10225              	.LASF268:
 10226 1fed 5F5F494E 		.ascii	"__INT64_MAX__ 9223372036854775807LL\000"
 10226      5436345F 
 10226      4D41585F 
 10226      5F203932 
 10226      32333337 
 10227              	.LASF547:
 10228 2011 5F524541 		.ascii	"_READ_WRITE_RETURN_TYPE int\000"
 10228      445F5752 
 10228      4954455F 
 10228      52455455 
 10228      524E5F54 
 10229              	.LASF777:
 10230 202d 5F5F7367 		.ascii	"__sgetc_raw_r(__ptr,__f) (--(__f)->_r < 0 ? __srget"
 10230      6574635F 
 10230      7261775F 
 10230      72285F5F 
 10230      7074722C 
 10231 2060 5F72285F 		.ascii	"_r(__ptr, __f) : (int)(*(__f)->_p++))\000"
 10231      5F707472 
 10231      2C205F5F 
 10231      6629203A 
 10231      2028696E 
 10232              	.LASF780:
 10233 2086 5F5F7370 		.ascii	"__sputc_r(__ptr,__c,__p) __sputc_raw_r(__ptr, __c, "
 10233      7574635F 
 10233      72285F5F 
 10233      7074722C 
 10233      5F5F632C 
 10234 20b9 5F5F7029 		.ascii	"__p)\000"
 10234      00
 10235              	.LASF54:
 10236 20be 78526574 		.ascii	"xReturn\000"
 10236      75726E00 
 10237              	.LASF138:
 10238 20c6 75784D69 		.ascii	"uxMissedTicks\000"
 10238      73736564 
 10238      5469636B 
 10238      7300
 10239              	.LASF745:
 10240 20d4 5F5F5345 		.ascii	"__SERR 0x0040\000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 248


 10240      52522030 
 10240      78303034 
 10240      3000
 10241              	.LASF320:
 10242 20e2 5F5F4442 		.ascii	"__DBL_MAX_EXP__ 1024\000"
 10242      4C5F4D41 
 10242      585F4558 
 10242      505F5F20 
 10242      31303234 
 10243              	.LASF293:
 10244 20f7 5F5F5549 		.ascii	"__UINT_FAST8_MAX__ 4294967295U\000"
 10244      4E545F46 
 10244      41535438 
 10244      5F4D4158 
 10244      5F5F2034 
 10245              	.LASF453:
 10246 2116 5F5F5451 		.ascii	"__TQ_FBIT__ 127\000"
 10246      5F464249 
 10246      545F5F20 
 10246      31323700 
 10247              	.LASF786:
 10248 2126 70757463 		.ascii	"putc(x,fp) __sputc_r(_REENT, x, fp)\000"
 10248      28782C66 
 10248      7029205F 
 10248      5F737075 
 10248      74635F72 
 10249              	.LASF781:
 10250 214a 5F5F7366 		.ascii	"__sfeof(p) (((p)->_flags & __SEOF) != 0)\000"
 10250      656F6628 
 10250      70292028 
 10250      28287029 
 10250      2D3E5F66 
 10251              	.LASF539:
 10252 2173 5F484156 		.ascii	"_HAVE_LONG_DOUBLE 1\000"
 10252      455F4C4F 
 10252      4E475F44 
 10252      4F55424C 
 10252      45203100 
 10253              	.LASF77:
 10254 2187 70785461 		.ascii	"pxTaskToSuspend\000"
 10254      736B546F 
 10254      53757370 
 10254      656E6400 
 10255              	.LASF717:
 10256 2197 71756164 		.ascii	"quad quad_t\000"
 10256      20717561 
 10256      645F7400 
 10257              	.LASF31:
 10258 21a3 7854696D 		.ascii	"xTimeOnEntering\000"
 10258      654F6E45 
 10258      6E746572 
 10258      696E6700 
 10259              	.LASF848:
 10260 21b3 706F7274 		.ascii	"portDOUBLE double\000"
 10260      444F5542 
 10260      4C452064 
 10260      6F75626C 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 249


 10260      6500
 10261              	.LASF556:
 10262 21c5 5F564F4C 		.ascii	"_VOLATILE volatile\000"
 10262      4154494C 
 10262      4520766F 
 10262      6C617469 
 10262      6C6500
 10263              	.LASF199:
 10264 21d8 5F5F5349 		.ascii	"__SIZEOF_SHORT__ 2\000"
 10264      5A454F46 
 10264      5F53484F 
 10264      52545F5F 
 10264      203200
 10265              	.LASF440:
 10266 21eb 5F5F554C 		.ascii	"__ULLACCUM_FBIT__ 32\000"
 10266      4C414343 
 10266      554D5F46 
 10266      4249545F 
 10266      5F203332 
 10267              	.LASF563:
 10268 2200 5F455846 		.ascii	"_EXFNPTR(name,proto) (* name) proto\000"
 10268      4E505452 
 10268      286E616D 
 10268      652C7072 
 10268      6F746F29 
 10269              	.LASF901:
 10270 2224 74726163 		.ascii	"traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,ux"
 10270      65544153 
 10270      4B5F5052 
 10270      494F5249 
 10270      54595F44 
 10271 2257 4F726967 		.ascii	"OriginalPriority) \000"
 10271      696E616C 
 10271      5072696F 
 10271      72697479 
 10271      292000
 10272              	.LASF152:
 10273 226a 5F535953 		.ascii	"_SYS_FEATURES_H \000"
 10273      5F464541 
 10273      54555245 
 10273      535F4820 
 10273      00
 10274              	.LASF25:
 10275 227b 7078496E 		.ascii	"pxIndex\000"
 10275      64657800 
 10276              	.LASF39:
 10277 2283 7078546F 		.ascii	"pxTopOfStack\000"
 10277      704F6653 
 10277      7461636B 
 10277      00
 10278              	.LASF115:
 10279 2290 7573436F 		.ascii	"usCount\000"
 10279      756E7400 
 10280              	.LASF948:
 10281 2298 636F6E66 		.ascii	"configPOST_SLEEP_PROCESSING(x) \000"
 10281      6967504F 
 10281      53545F53 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 250


 10281      4C454550 
 10281      5F50524F 
 10282              	.LASF112:
 10283 22b8 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 10283      6C6C6F63 
 10283      61746554 
 10283      4342416E 
 10283      64537461 
 10284              	.LASF202:
 10285 22cf 5F5F5349 		.ascii	"__SIZEOF_LONG_DOUBLE__ 8\000"
 10285      5A454F46 
 10285      5F4C4F4E 
 10285      475F444F 
 10285      55424C45 
 10286              	.LASF136:
 10287 22e8 78536368 		.ascii	"xSchedulerRunning\000"
 10287      6564756C 
 10287      65725275 
 10287      6E6E696E 
 10287      6700
 10288              	.LASF501:
 10289 22fa 5F5F5052 		.ascii	"__PRAGMA_REDEFINE_EXTNAME 1\000"
 10289      41474D41 
 10289      5F524544 
 10289      4546494E 
 10289      455F4558 
 10290              	.LASF214:
 10291 2316 5F5F5743 		.ascii	"__WCHAR_TYPE__ unsigned int\000"
 10291      4841525F 
 10291      54595045 
 10291      5F5F2075 
 10291      6E736967 
 10292              	.LASF647:
 10293 2332 5F524545 		.ascii	"_REENT_SIGNGAM(ptr) ((ptr)->_gamma_signgam)\000"
 10293      4E545F53 
 10293      49474E47 
 10293      414D2870 
 10293      74722920 
 10294              	.LASF163:
 10295 235e 504F5254 		.ascii	"PORTABLE_H \000"
 10295      41424C45 
 10295      5F482000 
 10296              	.LASF99:
 10297 236a 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 10297      6B52656D 
 10297      6F766546 
 10297      726F6D45 
 10297      76656E74 
 10298              	.LASF476:
 10299 2383 5F5F5553 		.ascii	"__USA_IBIT__ 16\000"
 10299      415F4942 
 10299      49545F5F 
 10299      20313600 
 10300              	.LASF487:
 10301 2393 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1\000"
 10301      435F4841 
 10301      56455F53 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 251


 10301      594E435F 
 10301      434F4D50 
 10302              	.LASF117:
 10303 23b8 7063456E 		.ascii	"pcEndOfStack\000"
 10303      644F6653 
 10303      7461636B 
 10303      00
 10304              	.LASF247:
 10305 23c5 5F5F4758 		.ascii	"__GXX_ABI_VERSION 1002\000"
 10305      585F4142 
 10305      495F5645 
 10305      5253494F 
 10305      4E203130 
 10306              	.LASF47:
 10307 23dc 70785461 		.ascii	"pxTaskCode\000"
 10307      736B436F 
 10307      646500
 10308              	.LASF244:
 10309 23e7 5F5F5549 		.ascii	"__UINT_FAST64_TYPE__ long long unsigned int\000"
 10309      4E545F46 
 10309      41535436 
 10309      345F5459 
 10309      50455F5F 
 10310              	.LASF21:
 10311 2413 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 10311      495F4C49 
 10311      53545F49 
 10311      54454D00 
 10312              	.LASF870:
 10313 2423 706F7274 		.ascii	"portNUM_CONFIGURABLE_REGIONS 1\000"
 10313      4E554D5F 
 10313      434F4E46 
 10313      49475552 
 10313      41424C45 
 10314              	.LASF617:
 10315 2442 5F57494E 		.ascii	"_WINT_T \000"
 10315      545F5420 
 10315      00
 10316              	.LASF310:
 10317 244b 5F5F464C 		.ascii	"__FLT_MIN__ 1.1754943508222875e-38F\000"
 10317      545F4D49 
 10317      4E5F5F20 
 10317      312E3137 
 10317      35343934 
 10318              	.LASF573:
 10319 246f 5F5F6E65 		.ascii	"__need_size_t \000"
 10319      65645F73 
 10319      697A655F 
 10319      742000
 10320              	.LASF465:
 10321 247e 5F5F4841 		.ascii	"__HA_FBIT__ 7\000"
 10321      5F464249 
 10321      545F5F20 
 10321      3700
 10322              	.LASF497:
 10323 248c 5F5F4743 		.ascii	"__GCC_ATOMIC_LLONG_LOCK_FREE 1\000"
 10323      435F4154 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 252


 10323      4F4D4943 
 10323      5F4C4C4F 
 10323      4E475F4C 
 10324              	.LASF613:
 10325 24ab 5F5F6C6F 		.ascii	"__lock_try_acquire(lock) (_CAST_VOID 0)\000"
 10325      636B5F74 
 10325      72795F61 
 10325      63717569 
 10325      7265286C 
 10326              	.LASF345:
 10327 24d3 5F5F4445 		.ascii	"__DEC32_MIN_EXP__ (-94)\000"
 10327      4333325F 
 10327      4D494E5F 
 10327      4558505F 
 10327      5F20282D 
 10328              	.LASF371:
 10329 24eb 5F5F5553 		.ascii	"__USFRACT_IBIT__ 0\000"
 10329      46524143 
 10329      545F4942 
 10329      49545F5F 
 10329      203000
 10330              	.LASF278:
 10331 24fe 5F5F494E 		.ascii	"__INT32_C(c) c ## L\000"
 10331      5433325F 
 10331      43286329 
 10331      20632023 
 10331      23204C00 
 10332              	.LASF731:
 10333 2512 5F5F4D53 		.ascii	"__MS_types__\000"
 10333      5F747970 
 10333      65735F5F 
 10333      00
 10334              	.LASF670:
 10335 251f 5F524545 		.ascii	"_REENT_SIGNAL_BUF(ptr) ((ptr)->_signal_buf)\000"
 10335      4E545F53 
 10335      49474E41 
 10335      4C5F4255 
 10335      46287074 
 10336              	.LASF528:
 10337 254b 414C4947 		.ascii	"ALIGN_STRUCT_END __attribute((aligned(4)))\000"
 10337      4E5F5354 
 10337      52554354 
 10337      5F454E44 
 10337      205F5F61 
 10338              	.LASF372:
 10339 2576 5F5F5553 		.ascii	"__USFRACT_MIN__ 0.0UHR\000"
 10339      46524143 
 10339      545F4D49 
 10339      4E5F5F20 
 10339      302E3055 
 10340              	.LASF942:
 10341 258d 636F6E66 		.ascii	"configUSE_MALLOC_FAILED_HOOK 0\000"
 10341      69675553 
 10341      455F4D41 
 10341      4C4C4F43 
 10341      5F464149 
 10342              	.LASF658:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 253


 10343 25ac 5F524545 		.ascii	"_REENT_EMERGENCY(ptr) ((ptr)->_emergency)\000"
 10343      4E545F45 
 10343      4D455247 
 10343      454E4359 
 10343      28707472 
 10344              	.LASF794:
 10345 25d6 616C6C6F 		.ascii	"alloca(size) __builtin_alloca(size)\000"
 10345      63612873 
 10345      697A6529 
 10345      205F5F62 
 10345      75696C74 
 10346              	.LASF564:
 10347 25fa 5F444546 		.ascii	"_DEFUN(name,arglist,args) name(args)\000"
 10347      554E286E 
 10347      616D652C 
 10347      6172676C 
 10347      6973742C 
 10348              	.LASF598:
 10349 261f 5F5F5F69 		.ascii	"___int16_t_defined 1\000"
 10349      6E743136 
 10349      5F745F64 
 10349      6566696E 
 10349      65642031 
 10350              	.LASF673:
 10351 2634 5F524545 		.ascii	"_REENT _impure_ptr\000"
 10351      4E54205F 
 10351      696D7075 
 10351      72655F70 
 10351      747200
 10352              	.LASF334:
 10353 2647 5F5F4C44 		.ascii	"__LDBL_MAX_EXP__ 1024\000"
 10353      424C5F4D 
 10353      41585F45 
 10353      58505F5F 
 10353      20313032 
 10354              	.LASF906:
 10355 265d 74726163 		.ascii	"traceQUEUE_CREATE_FAILED(ucQueueType) \000"
 10355      65515545 
 10355      55455F43 
 10355      52454154 
 10355      455F4641 
 10356              	.LASF94:
 10357 2684 75634578 		.ascii	"ucExpectedStackBytes\000"
 10357      70656374 
 10357      65645374 
 10357      61636B42 
 10357      79746573 
 10358              	.LASF576:
 10359 2699 5F53495A 		.ascii	"_SIZE_T \000"
 10359      455F5420 
 10359      00
 10360              	.LASF327:
 10361 26a2 5F5F4442 		.ascii	"__DBL_HAS_DENORM__ 1\000"
 10361      4C5F4841 
 10361      535F4445 
 10361      4E4F524D 
 10361      5F5F2031 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 254


 10362              	.LASF770:
 10363 26b7 73746465 		.ascii	"stderr (_REENT->_stderr)\000"
 10363      72722028 
 10363      5F524545 
 10363      4E542D3E 
 10363      5F737464 
 10364              	.LASF536:
 10365 26d0 5F4D425F 		.ascii	"_MB_LEN_MAX 1\000"
 10365      4C454E5F 
 10365      4D415820 
 10365      3100
 10366              	.LASF58:
 10367 26de 76546173 		.ascii	"vTaskDelete\000"
 10367      6B44656C 
 10367      65746500 
 10368              	.LASF142:
 10369 26ea 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 10369      74546173 
 10369      6B556E62 
 10369      6C6F636B 
 10369      54696D65 
 10370              	.LASF469:
 10371 26ff 5F5F4441 		.ascii	"__DA_FBIT__ 31\000"
 10371      5F464249 
 10371      545F5F20 
 10371      333100
 10372              	.LASF557:
 10373 270e 5F534947 		.ascii	"_SIGNED signed\000"
 10373      4E454420 
 10373      7369676E 
 10373      656400
 10374              	.LASF312:
 10375 271d 5F5F464C 		.ascii	"__FLT_DENORM_MIN__ 1.4012984643248171e-45F\000"
 10375      545F4445 
 10375      4E4F524D 
 10375      5F4D494E 
 10375      5F5F2031 
 10376              	.LASF337:
 10377 2748 5F5F4C44 		.ascii	"__LDBL_MAX__ 1.7976931348623157e+308L\000"
 10377      424C5F4D 
 10377      41585F5F 
 10377      20312E37 
 10377      39373639 
 10378              	.LASF275:
 10379 276e 5F5F494E 		.ascii	"__INT_LEAST16_MAX__ 32767\000"
 10379      545F4C45 
 10379      41535431 
 10379      365F4D41 
 10379      585F5F20 
 10380              	.LASF444:
 10381 2788 5F5F554C 		.ascii	"__ULLACCUM_EPSILON__ 0x1P-32ULLK\000"
 10381      4C414343 
 10381      554D5F45 
 10381      5053494C 
 10381      4F4E5F5F 
 10382              	.LASF987:
 10383 27a9 53544143 		.ascii	"STACK_MACROS_H \000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 255


 10383      4B5F4D41 
 10383      43524F53 
 10383      5F482000 
 10384              	.LASF550:
 10385 27b9 5F454E44 		.ascii	"_END_STD_C \000"
 10385      5F535444 
 10385      5F432000 
 10386              	.LASF753:
 10387 27c5 5F5F534C 		.ascii	"__SL64 0x8000\000"
 10387      36342030 
 10387      78383030 
 10387      3000
 10388              	.LASF82:
 10389 27d3 78546173 		.ascii	"xTaskResumeFromISR\000"
 10389      6B526573 
 10389      756D6546 
 10389      726F6D49 
 10389      535200
 10390              	.LASF137:
 10391 27e6 75785363 		.ascii	"uxSchedulerSuspended\000"
 10391      68656475 
 10391      6C657253 
 10391      75737065 
 10391      6E646564 
 10392              	.LASF676:
 10393 27fb 5F535953 		.ascii	"_SYS_TYPES_H \000"
 10393      5F545950 
 10393      45535F48 
 10393      2000
 10394              	.LASF286:
 10395 2809 5F5F5549 		.ascii	"__UINT32_C(c) c ## UL\000"
 10395      4E543332 
 10395      5F432863 
 10395      29206320 
 10395      23232055 
 10396              	.LASF743:
 10397 281f 5F5F5352 		.ascii	"__SRW 0x0010\000"
 10397      57203078 
 10397      30303130 
 10397      00
 10398              	.LASF661:
 10399 282c 5F524545 		.ascii	"_REENT_MBTOWC_STATE(ptr) ((ptr)->_misc->_mbtowc_sta"
 10399      4E545F4D 
 10399      42544F57 
 10399      435F5354 
 10399      41544528 
 10400 285f 74652900 		.ascii	"te)\000"
 10401              	.LASF747:
 10402 2863 5F5F5341 		.ascii	"__SAPP 0x0100\000"
 10402      50502030 
 10402      78303130 
 10402      3000
 10403              	.LASF311:
 10404 2871 5F5F464C 		.ascii	"__FLT_EPSILON__ 1.1920928955078125e-7F\000"
 10404      545F4550 
 10404      53494C4F 
 10404      4E5F5F20 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 256


 10404      312E3139 
 10405              	.LASF289:
 10406 2898 5F5F494E 		.ascii	"__INT_FAST8_MAX__ 2147483647\000"
 10406      545F4641 
 10406      5354385F 
 10406      4D41585F 
 10406      5F203231 
 10407              	.LASF524:
 10408 28b5 56454354 		.ascii	"VECT_TAB_FLASH 1\000"
 10408      5F544142 
 10408      5F464C41 
 10408      53482031 
 10408      00
 10409              	.LASF609:
 10410 28c6 5F5F6C6F 		.ascii	"__lock_close(lock) (_CAST_VOID 0)\000"
 10410      636B5F63 
 10410      6C6F7365 
 10410      286C6F63 
 10410      6B292028 
 10411              	.LASF932:
 10412 28e8 74726163 		.ascii	"traceTASK_RESUME(pxTaskToResume) \000"
 10412      65544153 
 10412      4B5F5245 
 10412      53554D45 
 10412      28707854 
 10413              	.LASF750:
 10414 290a 5F5F534E 		.ascii	"__SNPT 0x0800\000"
 10414      50542030 
 10414      78303830 
 10414      3000
 10415              	.LASF513:
 10416 2918 5F5F5646 		.ascii	"__VFP_FP__ 1\000"
 10416      505F4650 
 10416      5F5F2031 
 10416      00
 10417              	.LASF225:
 10418 2925 5F5F5549 		.ascii	"__UINT8_TYPE__ unsigned char\000"
 10418      4E54385F 
 10418      54595045 
 10418      5F5F2075 
 10418      6E736967 
 10419              	.LASF494:
 10420 2942 5F5F4743 		.ascii	"__GCC_ATOMIC_SHORT_LOCK_FREE 2\000"
 10420      435F4154 
 10420      4F4D4943 
 10420      5F53484F 
 10420      52545F4C 
 10421              	.LASF128:
 10422 2961 7850656E 		.ascii	"xPendingReadyList\000"
 10422      64696E67 
 10422      52656164 
 10422      794C6973 
 10422      7400
 10423              	.LASF410:
 10424 2973 5F5F5553 		.ascii	"__USACCUM_FBIT__ 8\000"
 10424      41434355 
 10424      4D5F4642 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 257


 10424      49545F5F 
 10424      203800
 10425              	.LASF498:
 10426 2986 5F5F4743 		.ascii	"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1\000"
 10426      435F4154 
 10426      4F4D4943 
 10426      5F544553 
 10426      545F414E 
 10427              	.LASF155:
 10428 29aa 5F535953 		.ascii	"_SYS__TYPES_H \000"
 10428      5F5F5459 
 10428      5045535F 
 10428      482000
 10429              	.LASF951:
 10430 29b9 6C697374 		.ascii	"listGET_LIST_ITEM_OWNER(pxListItem) ( pxListItem )-"
 10430      4745545F 
 10430      4C495354 
 10430      5F495445 
 10430      4D5F4F57 
 10431 29ec 3E70764F 		.ascii	">pvOwner\000"
 10431      776E6572 
 10431      00
 10432              	.LASF895:
 10433 29f5 706F7274 		.ascii	"portPOINTER_SIZE_TYPE unsigned long\000"
 10433      504F494E 
 10433      5445525F 
 10433      53495A45 
 10433      5F545950 
 10434              	.LASF792:
 10435 2a19 5F4E4557 		.ascii	"_NEWLIB_ALLOCA_H \000"
 10435      4C49425F 
 10435      414C4C4F 
 10435      43415F48 
 10435      2000
 10436              	.LASF342:
 10437 2a2b 5F5F4C44 		.ascii	"__LDBL_HAS_INFINITY__ 1\000"
 10437      424C5F48 
 10437      41535F49 
 10437      4E46494E 
 10437      4954595F 
 10438              	.LASF816:
 10439 2a43 46524545 		.ascii	"FREERTOS_CONFIG_H \000"
 10439      52544F53 
 10439      5F434F4E 
 10439      4649475F 
 10439      482000
 10440              	.LASF471:
 10441 2a56 5F5F5441 		.ascii	"__TA_FBIT__ 63\000"
 10441      5F464249 
 10441      545F5F20 
 10441      363300
 10442              	.LASF964:
 10443 2a65 7461736B 		.ascii	"taskYIELD() portYIELD()\000"
 10443      5949454C 
 10443      44282920 
 10443      706F7274 
 10443      5949454C 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 258


 10444              	.LASF641:
 10445 2a7d 5F524545 		.ascii	"_REENT_INIT_MP(var) do { struct _reent *_r = (var);"
 10445      4E545F49 
 10445      4E49545F 
 10445      4D502876 
 10445      61722920 
 10446 2ab0 205F722D 		.ascii	" _r->_mp->_result_k = 0; _r->_mp->_result = _r->_mp"
 10446      3E5F6D70 
 10446      2D3E5F72 
 10446      6573756C 
 10446      745F6B20 
 10447 2ae3 2D3E5F70 		.ascii	"->_p5s = _NULL; _r->_mp->_freelist = _NULL; } while"
 10447      3573203D 
 10447      205F4E55 
 10447      4C4C3B20 
 10447      5F722D3E 
 10448 2b16 20283029 		.ascii	" (0)\000"
 10448      00
 10449              	.LASF113:
 10450 2b1b 75735461 		.ascii	"usTaskCheckFreeStackSpace\000"
 10450      736B4368 
 10450      65636B46 
 10450      72656553 
 10450      7461636B 
 10451              	.LASF594:
 10452 2b35 5F5F474E 		.ascii	"__GNUC_VA_LIST \000"
 10452      55435F56 
 10452      415F4C49 
 10452      53542000 
 10453              	.LASF842:
 10454 2b45 636F6E66 		.ascii	"configKERNEL_INTERRUPT_PRIORITY 255\000"
 10454      69674B45 
 10454      524E454C 
 10454      5F494E54 
 10454      45525255 
 10455              	.LASF518:
 10456 2b69 5F5F4152 		.ascii	"__ARM_ARCH_EXT_IDIV__ 1\000"
 10456      4D5F4152 
 10456      43485F45 
 10456      58545F49 
 10456      4449565F 
 10457              	.LASF516:
 10458 2b81 5F5F4152 		.ascii	"__ARM_PCS 1\000"
 10458      4D5F5043 
 10458      53203100 
 10459              	.LASF812:
 10460 2b8d 65727243 		.ascii	"errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )\000"
 10460      4F554C44 
 10460      5F4E4F54 
 10460      5F414C4C 
 10460      4F434154 
 10461              	.LASF456:
 10462 2bba 5F5F5551 		.ascii	"__UQQ_IBIT__ 0\000"
 10462      515F4942 
 10462      49545F5F 
 10462      203000
 10463              	.LASF264:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 259


 10464 2bc9 5F5F5349 		.ascii	"__SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)\000"
 10464      475F4154 
 10464      4F4D4943 
 10464      5F4D494E 
 10464      5F5F2028 
 10465              	.LASF422:
 10466 2bf6 5F5F5541 		.ascii	"__UACCUM_MIN__ 0.0UK\000"
 10466      4343554D 
 10466      5F4D494E 
 10466      5F5F2030 
 10466      2E30554B 
 10467              	.LASF697:
 10468 2c0b 5F425344 		.ascii	"_BSD_WCHAR_T_ \000"
 10468      5F574348 
 10468      41525F54 
 10468      5F2000
 10469              	.LASF93:
 10470 2c1a 76546173 		.ascii	"vTaskSwitchContext\000"
 10470      6B537769 
 10470      74636843 
 10470      6F6E7465 
 10470      787400
 10471              	.LASF929:
 10472 2c2d 74726163 		.ascii	"traceTASK_DELAY() \000"
 10472      65544153 
 10472      4B5F4445 
 10472      4C415928 
 10472      292000
 10473              	.LASF654:
 10474 2c40 5F524545 		.ascii	"_REENT_MP_P5S(ptr) ((ptr)->_mp->_p5s)\000"
 10474      4E545F4D 
 10474      505F5035 
 10474      53287074 
 10474      72292028 
 10475              	.LASF916:
 10476 2c66 74726163 		.ascii	"traceQUEUE_SEND_FAILED(pxQueue) \000"
 10476      65515545 
 10476      55455F53 
 10476      454E445F 
 10476      4641494C 
 10477              	.LASF612:
 10478 2c87 5F5F6C6F 		.ascii	"__lock_acquire_recursive(lock) (_CAST_VOID 0)\000"
 10478      636B5F61 
 10478      63717569 
 10478      72655F72 
 10478      65637572 
 10479              	.LASF972:
 10480 2cb5 78546173 		.ascii	"xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParame"
 10480      6B437265 
 10480      61746528 
 10480      70765461 
 10480      736B436F 
 10481 2ce8 74657273 		.ascii	"ters,uxPriority,pxCreatedTask) xTaskGenericCreate( "
 10481      2C757850 
 10481      72696F72 
 10481      6974792C 
 10481      70784372 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 260


 10482 2d1b 28207076 		.ascii	"( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvP"
 10482      5461736B 
 10482      436F6465 
 10482      20292C20 
 10482      28207063 
 10483 2d4e 6172616D 		.ascii	"arameters ), ( uxPriority ), ( pxCreatedTask ), ( N"
 10483      65746572 
 10483      7320292C 
 10483      20282075 
 10483      78507269 
 10484 2d81 554C4C20 		.ascii	"ULL ), ( NULL ) )\000"
 10484      292C2028 
 10484      204E554C 
 10484      4C202920 
 10484      2900
 10485              	.LASF84:
 10486 2d93 76546173 		.ascii	"vTaskStartScheduler\000"
 10486      6B537461 
 10486      72745363 
 10486      68656475 
 10486      6C657200 
 10487              	.LASF823:
 10488 2da7 636F6E66 		.ascii	"configMINIMAL_STACK_SIZE ( ( unsigned portSHORT ) 1"
 10488      69674D49 
 10488      4E494D41 
 10488      4C5F5354 
 10488      41434B5F 
 10489 2dda 32382029 		.ascii	"28 )\000"
 10489      00
 10490              	.LASF95:
 10491 2ddf 7078436F 		.ascii	"pxConstList\000"
 10491      6E73744C 
 10491      69737400 
 10492              	.LASF817:
 10493 2deb 636F6E66 		.ascii	"configUSE_PREEMPTION 1\000"
 10493      69675553 
 10493      455F5052 
 10493      45454D50 
 10493      54494F4E 
 10494              	.LASF656:
 10495 2e02 5F524545 		.ascii	"_REENT_ASCTIME_BUF(ptr) ((ptr)->_asctime_buf)\000"
 10495      4E545F41 
 10495      53435449 
 10495      4D455F42 
 10495      55462870 
 10496              	.LASF51:
 10497 2e30 70784372 		.ascii	"pxCreatedTask\000"
 10497      65617465 
 10497      64546173 
 10497      6B00
 10498              	.LASF955:
 10499 2e3e 6C697374 		.ascii	"listLIST_IS_EMPTY(pxList) ( ( pxList )->uxNumberOfI"
 10499      4C495354 
 10499      5F49535F 
 10499      454D5054 
 10499      59287078 
 10500 2e71 74656D73 		.ascii	"tems == ( unsigned portBASE_TYPE ) 0 )\000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 261


 10500      203D3D20 
 10500      2820756E 
 10500      7369676E 
 10500      65642070 
 10501              	.LASF974:
 10502 2e98 746D7243 		.ascii	"tmrCOMMAND_START 0\000"
 10502      4F4D4D41 
 10502      4E445F53 
 10502      54415254 
 10502      203000
 10503              	.LASF805:
 10504 2eab 50524F4A 		.ascii	"PROJDEFS_H \000"
 10504      44454653 
 10504      5F482000 
 10505              	.LASF357:
 10506 2eb7 5F5F4445 		.ascii	"__DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD\000"
 10506      4336345F 
 10506      5355424E 
 10506      4F524D41 
 10506      4C5F4D49 
 10507              	.LASF374:
 10508 2ee8 5F5F5553 		.ascii	"__USFRACT_EPSILON__ 0x1P-8UHR\000"
 10508      46524143 
 10508      545F4550 
 10508      53494C4F 
 10508      4E5F5F20 
 10509              	.LASF708:
 10510 2f06 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 10510      20282876 
 10510      6F696420 
 10510      2A293029 
 10510      00
 10511              	.LASF4:
 10512 2f17 73686F72 		.ascii	"short unsigned int\000"
 10512      7420756E 
 10512      7369676E 
 10512      65642069 
 10512      6E7400
 10513              	.LASF292:
 10514 2f2a 5F5F494E 		.ascii	"__INT_FAST64_MAX__ 9223372036854775807LL\000"
 10514      545F4641 
 10514      53543634 
 10514      5F4D4158 
 10514      5F5F2039 
 10515              	.LASF853:
 10516 2f53 706F7274 		.ascii	"portMAX_DELAY ( portTickType ) 0xffffffff\000"
 10516      4D41585F 
 10516      44454C41 
 10516      59202820 
 10516      706F7274 
 10517              	.LASF580:
 10518 2f7d 5F5F5349 		.ascii	"__SIZE_T \000"
 10518      5A455F54 
 10518      2000
 10519              	.LASF601:
 10520 2f87 5F5F5F69 		.ascii	"___int_least32_t_defined 1\000"
 10520      6E745F6C 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 262


 10520      65617374 
 10520      33325F74 
 10520      5F646566 
 10521              	.LASF438:
 10522 2fa2 5F5F4C4C 		.ascii	"__LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK\000"
 10522      41434355 
 10522      4D5F4D41 
 10522      585F5F20 
 10522      30583746 
 10523              	.LASF592:
 10524 2fcc 5F5F6E65 		.ascii	"__need_NULL\000"
 10524      65645F4E 
 10524      554C4C00 
 10525              	.LASF130:
 10526 2fd8 75785461 		.ascii	"uxTasksDeleted\000"
 10526      736B7344 
 10526      656C6574 
 10526      656400
 10527              	.LASF482:
 10528 2fe7 5F5F5553 		.ascii	"__USER_LABEL_PREFIX__ \000"
 10528      45525F4C 
 10528      4142454C 
 10528      5F505245 
 10528      4649585F 
 10529              	.LASF397:
 10530 2ffe 5F5F4C4C 		.ascii	"__LLFRACT_MIN__ (-0.5LLR-0.5LLR)\000"
 10530      46524143 
 10530      545F4D49 
 10530      4E5F5F20 
 10530      282D302E 
 10531              	.LASF819:
 10532 301f 636F6E66 		.ascii	"configUSE_TICK_HOOK 0\000"
 10532      69675553 
 10532      455F5449 
 10532      434B5F48 
 10532      4F4F4B20 
 10533              	.LASF830:
 10534 3035 636F6E66 		.ascii	"configCHECK_FOR_STACK_OVERFLOW 2\000"
 10534      69674348 
 10534      45434B5F 
 10534      464F525F 
 10534      53544143 
 10535              	.LASF776:
 10536 3056 66776F70 		.ascii	"fwopen(__cookie,__fn) funopen(__cookie, (int (*)())"
 10536      656E285F 
 10536      5F636F6F 
 10536      6B69652C 
 10536      5F5F666E 
 10537 3089 302C205F 		.ascii	"0, __fn, (fpos_t (*)())0, (int (*)())0)\000"
 10537      5F666E2C 
 10537      20286670 
 10537      6F735F74 
 10537      20282A29 
 10538              	.LASF818:
 10539 30b1 636F6E66 		.ascii	"configUSE_IDLE_HOOK 0\000"
 10539      69675553 
 10539      455F4944 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 263


 10539      4C455F48 
 10539      4F4F4B20 
 10540              	.LASF89:
 10541 30c7 78546963 		.ascii	"xTicks\000"
 10541      6B7300
 10542              	.LASF532:
 10543 30ce 5F5F4E45 		.ascii	"__NEWLIB_H__ 1\000"
 10543      574C4942 
 10543      5F485F5F 
 10543      203100
 10544              	.LASF191:
 10545 30dd 5F5F4154 		.ascii	"__ATOMIC_ACQUIRE 2\000"
 10545      4F4D4943 
 10545      5F414351 
 10545      55495245 
 10545      203200
 10546              	.LASF863:
 10547 30f0 706F7274 		.ascii	"portENTER_CRITICAL() vPortEnterCritical()\000"
 10547      454E5445 
 10547      525F4352 
 10547      49544943 
 10547      414C2829 
 10548              	.LASF132:
 10549 311a 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 10549      7272656E 
 10549      744E756D 
 10549      6265724F 
 10549      66546173 
 10550              	.LASF86:
 10551 3131 76546173 		.ascii	"vTaskSuspendAll\000"
 10551      6B537573 
 10551      70656E64 
 10551      416C6C00 
 10552              	.LASF907:
 10553 3141 74726163 		.ascii	"traceCREATE_MUTEX(pxNewQueue) \000"
 10553      65435245 
 10553      4154455F 
 10553      4D555445 
 10553      58287078 
 10554              	.LASF787:
 10555 3160 66617374 		.ascii	"fast_putc(x,p) (--(p)->_w < 0 ? __swbuf_r(_REENT, ("
 10555      5F707574 
 10555      6328782C 
 10555      70292028 
 10555      2D2D2870 
 10556 3193 696E7429 		.ascii	"int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0)"
 10556      2878292C 
 10556      20702920 
 10556      3D3D2045 
 10556      4F46203A 
 10557 31c6 2900     		.ascii	")\000"
 10558              	.LASF679:
 10559 31c8 5F414E53 		.ascii	"_ANSI_STDDEF_H \000"
 10559      495F5354 
 10559      44444546 
 10559      5F482000 
 10560              	.LASF30:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 264


 10561 31d8 784F7665 		.ascii	"xOverflowCount\000"
 10561      72666C6F 
 10561      77436F75 
 10561      6E7400
 10562              	.LASF928:
 10563 31e7 74726163 		.ascii	"traceTASK_DELAY_UNTIL() \000"
 10563      65544153 
 10563      4B5F4445 
 10563      4C41595F 
 10563      554E5449 
 10564              	.LASF325:
 10565 3200 5F5F4442 		.ascii	"__DBL_EPSILON__ ((double)2.2204460492503131e-16L)\000"
 10565      4C5F4550 
 10565      53494C4F 
 10565      4E5F5F20 
 10565      2828646F 
 10566              	.LASF102:
 10567 3232 70785469 		.ascii	"pxTimeOut\000"
 10567      6D654F75 
 10567      7400
 10568              	.LASF387:
 10569 323c 5F5F4C46 		.ascii	"__LFRACT_MIN__ (-0.5LR-0.5LR)\000"
 10569      52414354 
 10569      5F4D494E 
 10569      5F5F2028 
 10569      2D302E35 
 10570              	.LASF194:
 10571 325a 5F5F4154 		.ascii	"__ATOMIC_CONSUME 1\000"
 10571      4F4D4943 
 10571      5F434F4E 
 10571      53554D45 
 10571      203100
 10572              	.LASF314:
 10573 326d 5F5F464C 		.ascii	"__FLT_HAS_INFINITY__ 1\000"
 10573      545F4841 
 10573      535F494E 
 10573      46494E49 
 10573      54595F5F 
 10574              	.LASF835:
 10575 3284 494E434C 		.ascii	"INCLUDE_uxTaskPriorityGet 1\000"
 10575      5544455F 
 10575      75785461 
 10575      736B5072 
 10575      696F7269 
 10576              	.LASF418:
 10577 32a0 5F5F4143 		.ascii	"__ACCUM_MAX__ 0X7FFFFFFFP-15K\000"
 10577      43554D5F 
 10577      4D41585F 
 10577      5F203058 
 10577      37464646 
 10578              	.LASF914:
 10579 32be 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE_FAILED() \000"
 10579      65435245 
 10579      4154455F 
 10579      434F554E 
 10579      54494E47 
 10580              	.LASF333:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 265


 10581 32e7 5F5F4C44 		.ascii	"__LDBL_MIN_10_EXP__ (-307)\000"
 10581      424C5F4D 
 10581      494E5F31 
 10581      305F4558 
 10581      505F5F20 
 10582              	.LASF862:
 10583 3302 706F7274 		.ascii	"portENABLE_INTERRUPTS() vPortClearInterruptMask(0)\000"
 10583      454E4142 
 10583      4C455F49 
 10583      4E544552 
 10583      52555054 
 10584              	.LASF924:
 10585 3335 74726163 		.ascii	"traceQUEUE_DELETE(pxQueue) \000"
 10585      65515545 
 10585      55455F44 
 10585      454C4554 
 10585      45287078 
 10586              	.LASF762:
 10587 3351 4C5F746D 		.ascii	"L_tmpnam FILENAME_MAX\000"
 10587      706E616D 
 10587      2046494C 
 10587      454E414D 
 10587      455F4D41 
 10588              	.LASF597:
 10589 3367 5F5F5F69 		.ascii	"___int8_t_defined 1\000"
 10589      6E74385F 
 10589      745F6465 
 10589      66696E65 
 10589      64203100 
 10590              	.LASF97:
 10591 337b 70784576 		.ascii	"pxEventList\000"
 10591      656E744C 
 10591      69737400 
 10592              	.LASF9:
 10593 3387 6C6F6E67 		.ascii	"long unsigned int\000"
 10593      20756E73 
 10593      69676E65 
 10593      6420696E 
 10593      7400
 10594              	.LASF468:
 10595 3399 5F5F5341 		.ascii	"__SA_IBIT__ 16\000"
 10595      5F494249 
 10595      545F5F20 
 10595      313600
 10596              	.LASF105:
 10597 33a8 76546173 		.ascii	"vTaskMissedYield\000"
 10597      6B4D6973 
 10597      73656459 
 10597      69656C64 
 10597      00
 10598              	.LASF185:
 10599 33b9 5F5F474E 		.ascii	"__GNUC__ 4\000"
 10599      55435F5F 
 10599      203400
 10600              	.LASF864:
 10601 33c4 706F7274 		.ascii	"portEXIT_CRITICAL() vPortExitCritical()\000"
 10601      45584954 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 266


 10601      5F435249 
 10601      54494341 
 10601      4C282920 
 10602              	.LASF983:
 10603 33ec 7854696D 		.ascii	"xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken"
 10603      65725374 
 10603      61727446 
 10603      726F6D49 
 10603      53522878 
 10604 341f 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STAR"
 10604      696D6572 
 10604      47656E65 
 10604      72696343 
 10604      6F6D6D61 
 10605 3452 542C2028 		.ascii	"T, ( xTaskGetTickCountFromISR() ), ( pxHigherPriori"
 10605      20785461 
 10605      736B4765 
 10605      74546963 
 10605      6B436F75 
 10606 3485 74795461 		.ascii	"tyTaskWoken ), 0U )\000"
 10606      736B576F 
 10606      6B656E20 
 10606      292C2030 
 10606      55202900 
 10607              	.LASF226:
 10608 3499 5F5F5549 		.ascii	"__UINT16_TYPE__ short unsigned int\000"
 10608      4E543136 
 10608      5F545950 
 10608      455F5F20 
 10608      73686F72 
 10609              	.LASF797:
 10610 34bc 52414E44 		.ascii	"RAND_MAX __RAND_MAX\000"
 10610      5F4D4158 
 10610      205F5F52 
 10610      414E445F 
 10610      4D415800 
 10611              	.LASF512:
 10612 34d0 5F5F534F 		.ascii	"__SOFTFP__ 1\000"
 10612      46544650 
 10612      5F5F2031 
 10612      00
 10613              	.LASF957:
 10614 34dd 6C697374 		.ascii	"listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { xList *"
 10614      4745545F 
 10614      4F574E45 
 10614      525F4F46 
 10614      5F4E4558 
 10615 3510 20636F6E 		.ascii	" const pxConstList = ( pxList ); ( pxConstList )->p"
 10615      73742070 
 10615      78436F6E 
 10615      73744C69 
 10615      7374203D 
 10616 3543 78496E64 		.ascii	"xIndex = ( pxConstList )->pxIndex->pxNext; if( ( px"
 10616      6578203D 
 10616      20282070 
 10616      78436F6E 
 10616      73744C69 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 267


 10617 3576 436F6E73 		.ascii	"ConstList )->pxIndex == ( xListItem * ) &( ( pxCons"
 10617      744C6973 
 10617      7420292D 
 10617      3E707849 
 10617      6E646578 
 10618 35a9 744C6973 		.ascii	"tList )->xListEnd ) ) { ( pxConstList )->pxIndex = "
 10618      7420292D 
 10618      3E784C69 
 10618      7374456E 
 10618      64202920 
 10619 35dc 28207078 		.ascii	"( pxConstList )->pxIndex->pxNext; } ( pxTCB ) = ( p"
 10619      436F6E73 
 10619      744C6973 
 10619      7420292D 
 10619      3E707849 
 10620 360f 78436F6E 		.ascii	"xConstList )->pxIndex->pvOwner; }\000"
 10620      73744C69 
 10620      73742029 
 10620      2D3E7078 
 10620      496E6465 
 10621              	.LASF346:
 10622 3631 5F5F4445 		.ascii	"__DEC32_MAX_EXP__ 97\000"
 10622      4333325F 
 10622      4D41585F 
 10622      4558505F 
 10622      5F203937 
 10623              	.LASF101:
 10624 3646 76546173 		.ascii	"vTaskSetTimeOutState\000"
 10624      6B536574 
 10624      54696D65 
 10624      4F757453 
 10624      74617465 
 10625              	.LASF578:
 10626 365b 5F545F53 		.ascii	"_T_SIZE_ \000"
 10626      495A455F 
 10626      2000
 10627              	.LASF715:
 10628 3665 5F53545F 		.ascii	"_ST_INT32 __attribute__ ((__mode__ (__SI__)))\000"
 10628      494E5433 
 10628      32205F5F 
 10628      61747472 
 10628      69627574 
 10629              	.LASF241:
 10630 3693 5F5F5549 		.ascii	"__UINT_FAST8_TYPE__ unsigned int\000"
 10630      4E545F46 
 10630      41535438 
 10630      5F545950 
 10630      455F5F20 
 10631              	.LASF436:
 10632 36b4 5F5F4C4C 		.ascii	"__LLACCUM_IBIT__ 32\000"
 10632      41434355 
 10632      4D5F4942 
 10632      49545F5F 
 10632      20333200 
 10633              	.LASF379:
 10634 36c8 5F5F4652 		.ascii	"__FRACT_EPSILON__ 0x1P-15R\000"
 10634      4143545F 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 268


 10634      45505349 
 10634      4C4F4E5F 
 10634      5F203078 
 10635              	.LASF860:
 10636 36e3 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortClearInte"
 10636      434C4541 
 10636      525F494E 
 10636      54455252 
 10636      5550545F 
 10637 3716 72727570 		.ascii	"rruptMask(x)\000"
 10637      744D6173 
 10637      6B287829 
 10637      00
 10638              	.LASF714:
 10639 3723 5F54494D 		.ascii	"_TIMER_T_ unsigned long\000"
 10639      45525F54 
 10639      5F20756E 
 10639      7369676E 
 10639      6564206C 
 10640              	.LASF269:
 10641 373b 5F5F5549 		.ascii	"__UINT8_MAX__ 255\000"
 10641      4E54385F 
 10641      4D41585F 
 10641      5F203235 
 10641      3500
 10642              	.LASF33:
 10643 374d 784D454D 		.ascii	"xMEMORY_REGION\000"
 10643      4F52595F 
 10643      52454749 
 10643      4F4E00
 10644              	.LASF899:
 10645 375c 74726163 		.ascii	"traceTASK_SWITCHED_OUT() \000"
 10645      65544153 
 10645      4B5F5357 
 10645      49544348 
 10645      45445F4F 
 10646              	.LASF633:
 10647 3776 5F524545 		.ascii	"_REENT_INIT(var) { 0, (__FILE *)&__sf_fake_stdin, ("
 10647      4E545F49 
 10647      4E495428 
 10647      76617229 
 10647      207B2030 
 10648 37a9 5F5F4649 		.ascii	"__FILE *)&__sf_fake_stdout, (__FILE *)&__sf_fake_st"
 10648      4C45202A 
 10648      29265F5F 
 10648      73665F66 
 10648      616B655F 
 10649 37dc 64657272 		.ascii	"derr, 0, _NULL, 0, 0, \"C\", _NULL, _NULL, 0, 0, _N"
 10649      2C20302C 
 10649      205F4E55 
 10649      4C4C2C20 
 10649      302C2030 
 10650 380d 554C4C2C 		.ascii	"ULL, _NULL, _NULL, _NULL, _NULL, _NULL, {_NULL, 0, "
 10650      205F4E55 
 10650      4C4C2C20 
 10650      5F4E554C 
 10650      4C2C205F 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 269


 10651 3840 7B5F4E55 		.ascii	"{_NULL}, _NULL}, {_NULL, 0, _NULL}, _NULL, _NULL, _"
 10651      4C4C7D2C 
 10651      205F4E55 
 10651      4C4C7D2C 
 10651      207B5F4E 
 10652 3873 4E554C4C 		.ascii	"NULL }\000"
 10652      207D00
 10653              	.LASF250:
 10654 387a 5F5F494E 		.ascii	"__INT_MAX__ 2147483647\000"
 10654      545F4D41 
 10654      585F5F20 
 10654      32313437 
 10654      34383336 
 10655              	.LASF709:
 10656 3891 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 10656      65746F66 
 10656      28545950 
 10656      452C4D45 
 10656      4D424552 
 10657 38c4 42455229 		.ascii	"BER)\000"
 10657      00
 10658              	.LASF288:
 10659 38c9 5F5F5549 		.ascii	"__UINT64_C(c) c ## ULL\000"
 10659      4E543634 
 10659      5F432863 
 10659      29206320 
 10659      23232055 
 10660              	.LASF236:
 10661 38e0 5F5F5549 		.ascii	"__UINT_LEAST64_TYPE__ long long unsigned int\000"
 10661      4E545F4C 
 10661      45415354 
 10661      36345F54 
 10661      5950455F 
 10662              	.LASF103:
 10663 390d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 10663      6B436865 
 10663      636B466F 
 10663      7254696D 
 10663      654F7574 
 10664              	.LASF339:
 10665 3922 5F5F4C44 		.ascii	"__LDBL_EPSILON__ 2.2204460492503131e-16L\000"
 10665      424C5F45 
 10665      5053494C 
 10665      4F4E5F5F 
 10665      20322E32 
 10666              	.LASF491:
 10667 394b 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR16_T_LOCK_FREE 2\000"
 10667      435F4154 
 10667      4F4D4943 
 10667      5F434841 
 10667      5231365F 
 10668              	.LASF965:
 10669 396d 7461736B 		.ascii	"taskENTER_CRITICAL() portENTER_CRITICAL()\000"
 10669      454E5445 
 10669      525F4352 
 10669      49544943 
 10669      414C2829 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 270


 10670              	.LASF192:
 10671 3997 5F5F4154 		.ascii	"__ATOMIC_RELEASE 3\000"
 10671      4F4D4943 
 10671      5F52454C 
 10671      45415345 
 10671      203300
 10672              	.LASF571:
 10673 39aa 5F454C49 		.ascii	"_ELIDABLE_INLINE __inline__\000"
 10673      4441424C 
 10673      455F494E 
 10673      4C494E45 
 10673      205F5F69 
 10674              	.LASF810:
 10675 39c6 65727251 		.ascii	"errQUEUE_EMPTY ( 0 )\000"
 10675      55455545 
 10675      5F454D50 
 10675      54592028 
 10675      20302029 
 10676              	.LASF302:
 10677 39db 5F5F464C 		.ascii	"__FLT_MANT_DIG__ 24\000"
 10677      545F4D41 
 10677      4E545F44 
 10677      49475F5F 
 10677      20323400 
 10678              	.LASF971:
 10679 39ef 7461736B 		.ascii	"taskSCHEDULER_SUSPENDED 2\000"
 10679      53434845 
 10679      44554C45 
 10679      525F5355 
 10679      5350454E 
 10680              	.LASF624:
 10681 3a09 5F52414E 		.ascii	"_RAND48_SEED_1 (0xabcd)\000"
 10681      4434385F 
 10681      53454544 
 10681      5F312028 
 10681      30786162 
 10682              	.LASF462:
 10683 3a21 5F5F5544 		.ascii	"__UDQ_IBIT__ 0\000"
 10683      515F4942 
 10683      49545F5F 
 10683      203000
 10684              	.LASF824:
 10685 3a30 636F6E66 		.ascii	"configTOTAL_HEAP_SIZE ( ( size_t ) ( 17 * 1024 ) )\000"
 10685      6967544F 
 10685      54414C5F 
 10685      48454150 
 10685      5F53495A 
 10686              	.LASF606:
 10687 3a63 5F5F4C4F 		.ascii	"__LOCK_INIT_RECURSIVE(class,lock) static int lock ="
 10687      434B5F49 
 10687      4E49545F 
 10687      52454355 
 10687      52534956 
 10688 3a96 20303B00 		.ascii	" 0;\000"
 10689              	.LASF121:
 10690 3a9a 70784D75 		.ascii	"pxMutexHolder\000"
 10690      74657848 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 271


 10690      6F6C6465 
 10690      7200
 10691              	.LASF949:
 10692 3aa8 4C495354 		.ascii	"LIST_H \000"
 10692      5F482000 
 10693              	.LASF876:
 10694 3ab0 494E434C 		.ascii	"INCLUDE_xTimerGetTimerDaemonTaskHandle 0\000"
 10694      5544455F 
 10694      7854696D 
 10694      65724765 
 10694      7454696D 
 10695              	.LASF831:
 10696 3ad9 636F6E66 		.ascii	"configUSE_RECURSIVE_MUTEXES 1\000"
 10696      69675553 
 10696      455F5245 
 10696      43555253 
 10696      4956455F 
 10697              	.LASF682:
 10698 3af7 5F545F50 		.ascii	"_T_PTRDIFF_ \000"
 10698      54524449 
 10698      46465F20 
 10698      00
 10699              	.LASF340:
 10700 3b04 5F5F4C44 		.ascii	"__LDBL_DENORM_MIN__ 4.9406564584124654e-324L\000"
 10700      424C5F44 
 10700      454E4F52 
 10700      4D5F4D49 
 10700      4E5F5F20 
 10701              	.LASF545:
 10702 3b31 5F5F4558 		.ascii	"__EXPORT \000"
 10702      504F5254 
 10702      2000
 10703              	.LASF401:
 10704 3b3b 5F5F554C 		.ascii	"__ULLFRACT_IBIT__ 0\000"
 10704      4C465241 
 10704      43545F49 
 10704      4249545F 
 10704      5F203000 
 10705              	.LASF618:
 10706 3b4f 5F5F6E65 		.ascii	"__need_wint_t\000"
 10706      65645F77 
 10706      696E745F 
 10706      7400
 10707              	.LASF144:
 10708 3b5d 536F7572 		.ascii	"Source/tasks.c\000"
 10708      63652F74 
 10708      61736B73 
 10708      2E6300
 10709              	.LASF96:
 10710 3b6c 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 10710      6B506C61 
 10710      63654F6E 
 10710      4576656E 
 10710      744C6973 
 10711              	.LASF829:
 10712 3b82 636F6E66 		.ascii	"configUSE_MUTEXES 1\000"
 10712      69675553 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 272


 10712      455F4D55 
 10712      54455845 
 10712      53203100 
 10713              	.LASF611:
 10714 3b96 5F5F6C6F 		.ascii	"__lock_acquire(lock) (_CAST_VOID 0)\000"
 10714      636B5F61 
 10714      63717569 
 10714      7265286C 
 10714      6F636B29 
 10715              	.LASF666:
 10716 3bba 5F524545 		.ascii	"_REENT_WCRTOMB_STATE(ptr) ((ptr)->_misc->_wcrtomb_s"
 10716      4E545F57 
 10716      4352544F 
 10716      4D425F53 
 10716      54415445 
 10717 3bed 74617465 		.ascii	"tate)\000"
 10717      2900
 10718              	.LASF820:
 10719 3bf3 636F6E66 		.ascii	"configCPU_CLOCK_HZ ( ( unsigned portLONG ) 72000000"
 10719      69674350 
 10719      555F434C 
 10719      4F434B5F 
 10719      485A2028 
 10720 3c26 202900   		.ascii	" )\000"
 10721              	.LASF946:
 10722 3c29 76506F72 		.ascii	"vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockT"
 10722      74467265 
 10722      65416C69 
 10722      676E6564 
 10722      28707642 
 10723 3c5c 6F467265 		.ascii	"oFree )\000"
 10723      65202900 
 10724              	.LASF106:
 10725 3c64 70727649 		.ascii	"prvIdleTask\000"
 10725      646C6554 
 10725      61736B00 
 10726              	.LASF34:
 10727 3c70 70764261 		.ascii	"pvBaseAddress\000"
 10727      73654164 
 10727      64726573 
 10727      7300
 10728              	.LASF309:
 10729 3c7e 5F5F464C 		.ascii	"__FLT_MAX__ 3.4028234663852886e+38F\000"
 10729      545F4D41 
 10729      585F5F20 
 10729      332E3430 
 10729      32383233 
 10730              	.LASF420:
 10731 3ca2 5F5F5541 		.ascii	"__UACCUM_FBIT__ 16\000"
 10731      4343554D 
 10731      5F464249 
 10731      545F5F20 
 10731      313600
 10732              	.LASF384:
 10733 3cb5 5F5F5546 		.ascii	"__UFRACT_EPSILON__ 0x1P-16UR\000"
 10733      52414354 
 10733      5F455053 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 273


 10733      494C4F4E 
 10733      5F5F2030 
 10734              	.LASF254:
 10735 3cd2 5F5F5743 		.ascii	"__WCHAR_MIN__ 0U\000"
 10735      4841525F 
 10735      4D494E5F 
 10735      5F203055 
 10735      00
 10736              	.LASF271:
 10737 3ce3 5F5F5549 		.ascii	"__UINT32_MAX__ 4294967295UL\000"
 10737      4E543332 
 10737      5F4D4158 
 10737      5F5F2034 
 10737      32393439 
 10738              	.LASF486:
 10739 3cff 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1\000"
 10739      435F4841 
 10739      56455F53 
 10739      594E435F 
 10739      434F4D50 
 10740              	.LASF18:
 10741 3d24 7076436F 		.ascii	"pvContainer\000"
 10741      6E746169 
 10741      6E657200 
 10742              	.LASF496:
 10743 3d30 5F5F4743 		.ascii	"__GCC_ATOMIC_LONG_LOCK_FREE 2\000"
 10743      435F4154 
 10743      4F4D4943 
 10743      5F4C4F4E 
 10743      475F4C4F 
 10744              	.LASF432:
 10745 3d4e 5F5F554C 		.ascii	"__ULACCUM_MIN__ 0.0ULK\000"
 10745      41434355 
 10745      4D5F4D49 
 10745      4E5F5F20 
 10745      302E3055 
 10746              	.LASF538:
 10747 3d65 5F415445 		.ascii	"_ATEXIT_DYNAMIC_ALLOC 1\000"
 10747      5849545F 
 10747      44594E41 
 10747      4D49435F 
 10747      414C4C4F 
 10748              	.LASF591:
 10749 3d7d 5F5F6E65 		.ascii	"__need_size_t\000"
 10749      65645F73 
 10749      697A655F 
 10749      7400
 10750              	.LASF83:
 10751 3d8b 75785361 		.ascii	"uxSavedInterruptStatus\000"
 10751      76656449 
 10751      6E746572 
 10751      72757074 
 10751      53746174 
 10752              	.LASF581:
 10753 3da2 5F53495A 		.ascii	"_SIZE_T_ \000"
 10753      455F545F 
 10753      2000
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 274


 10754              	.LASF558:
 10755 3dac 5F444F54 		.ascii	"_DOTS , ...\000"
 10755      53202C20 
 10755      2E2E2E00 
 10756              	.LASF301:
 10757 3db8 5F5F464C 		.ascii	"__FLT_RADIX__ 2\000"
 10757      545F5241 
 10757      4449585F 
 10757      5F203200 
 10758              	.LASF5:
 10759 3dc8 6C6F6E67 		.ascii	"long long int\000"
 10759      206C6F6E 
 10759      6720696E 
 10759      7400
 10760              	.LASF802:
 10761 3dd6 73747269 		.ascii	"stricmp strcasecmp\000"
 10761      636D7020 
 10761      73747263 
 10761      61736563 
 10761      6D7000
 10762              	.LASF981:
 10763 3de9 7854696D 		.ascii	"xTimerDelete(xTimer,xBlockTime) xTimerGenericComman"
 10763      65724465 
 10763      6C657465 
 10763      28785469 
 10763      6D65722C 
 10764 3e1c 64282028 		.ascii	"d( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xBloc"
 10764      20785469 
 10764      6D657220 
 10764      292C2074 
 10764      6D72434F 
 10765 3e4f 6B54696D 		.ascii	"kTime ) )\000"
 10765      65202920 
 10765      2900
 10766              	.LASF710:
 10767 3e59 5F4D4143 		.ascii	"_MACHTYPES_H_ \000"
 10767      48545950 
 10767      45535F48 
 10767      5F2000
 10768              	.LASF489:
 10769 3e68 5F5F4743 		.ascii	"__GCC_ATOMIC_BOOL_LOCK_FREE 2\000"
 10769      435F4154 
 10769      4F4D4943 
 10769      5F424F4F 
 10769      4C5F4C4F 
 10770              	.LASF644:
 10771 3e86 5F524545 		.ascii	"_REENT_INIT_MISC(var) do { struct _reent *_r = (var"
 10771      4E545F49 
 10771      4E49545F 
 10771      4D495343 
 10771      28766172 
 10772 3eb9 293B205F 		.ascii	"); _r->_misc->_strtok_last = _NULL; _r->_misc->_mbl"
 10772      722D3E5F 
 10772      6D697363 
 10772      2D3E5F73 
 10772      7472746F 
 10773 3eec 656E5F73 		.ascii	"en_state.__count = 0; _r->_misc->_mblen_state.__val"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 275


 10773      74617465 
 10773      2E5F5F63 
 10773      6F756E74 
 10773      203D2030 
 10774 3f1f 75652E5F 		.ascii	"ue.__wch = 0; _r->_misc->_wctomb_state.__count = 0;"
 10774      5F776368 
 10774      203D2030 
 10774      3B205F72 
 10774      2D3E5F6D 
 10775 3f52 205F722D 		.ascii	" _r->_misc->_wctomb_state.__value.__wch = 0; _r->_m"
 10775      3E5F6D69 
 10775      73632D3E 
 10775      5F776374 
 10775      6F6D625F 
 10776 3f85 6973632D 		.ascii	"isc->_mbtowc_state.__count = 0; _r->_misc->_mbtowc_"
 10776      3E5F6D62 
 10776      746F7763 
 10776      5F737461 
 10776      74652E5F 
 10777 3fb8 73746174 		.ascii	"state.__value.__wch = 0; _r->_misc->_mbrlen_state._"
 10777      652E5F5F 
 10777      76616C75 
 10777      652E5F5F 
 10777      77636820 
 10778 3feb 5F636F75 		.ascii	"_count = 0; _r->_misc->_mbrlen_state.__value.__wch "
 10778      6E74203D 
 10778      20303B20 
 10778      5F722D3E 
 10778      5F6D6973 
 10779 401e 3D20303B 		.ascii	"= 0; _r->_misc->_mbrtowc_state.__count = 0; _r->_mi"
 10779      205F722D 
 10779      3E5F6D69 
 10779      73632D3E 
 10779      5F6D6272 
 10780 4051 73632D3E 		.ascii	"sc->_mbrtowc_state.__value.__wch = 0; _r->_misc->_m"
 10780      5F6D6272 
 10780      746F7763 
 10780      5F737461 
 10780      74652E5F 
 10781 4084 62737274 		.ascii	"bsrtowcs_state.__count = 0; _r->_misc->_mbsrtowcs_s"
 10781      6F776373 
 10781      5F737461 
 10781      74652E5F 
 10781      5F636F75 
 10782 40b7 74617465 		.ascii	"tate.__value.__wch = 0; _r->_misc->_wcrtomb_state._"
 10782      2E5F5F76 
 10782      616C7565 
 10782      2E5F5F77 
 10782      6368203D 
 10783 40ea 5F636F75 		.ascii	"_count = 0; _r->_misc->_wcrtomb_state.__value.__wch"
 10783      6E74203D 
 10783      20303B20 
 10783      5F722D3E 
 10783      5F6D6973 
 10784 411d 203D2030 		.ascii	" = 0; _r->_misc->_wcsrtombs_state.__count = 0; _r->"
 10784      3B205F72 
 10784      2D3E5F6D 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 276


 10784      6973632D 
 10784      3E5F7763 
 10785 4150 5F6D6973 		.ascii	"_misc->_wcsrtombs_state.__value.__wch = 0; _r->_mis"
 10785      632D3E5F 
 10785      77637372 
 10785      746F6D62 
 10785      735F7374 
 10786 4183 632D3E5F 		.ascii	"c->_l64a_buf[0] = '\\0'; _r->_misc->_getdate_err = "
 10786      6C363461 
 10786      5F627566 
 10786      5B305D20 
 10786      3D20275C 
 10787 41b5 303B207D 		.ascii	"0; } while (0)\000"
 10787      20776869 
 10787      6C652028 
 10787      302900
 10788              	.LASF75:
 10789 41c4 78596965 		.ascii	"xYieldRequired\000"
 10789      6C645265 
 10789      71756972 
 10789      656400
 10790              	.LASF764:
 10791 41d3 505F746D 		.ascii	"P_tmpdir \"/tmp\"\000"
 10791      70646972 
 10791      20222F74 
 10791      6D702200 
 10792              	.LASF827:
 10793 41e3 636F6E66 		.ascii	"configUSE_16_BIT_TICKS 0\000"
 10793      69675553 
 10793      455F3136 
 10793      5F424954 
 10793      5F544943 
 10794              	.LASF681:
 10795 41fc 5F505452 		.ascii	"_PTRDIFF_T \000"
 10795      44494646 
 10795      5F542000 
 10796              	.LASF963:
 10797 4208 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( unsigned portBASE_TYPE ) 0U )\000"
 10797      444C455F 
 10797      5052494F 
 10797      52495459 
 10797      20282028 
 10798              	.LASF239:
 10799 423b 5F5F494E 		.ascii	"__INT_FAST32_TYPE__ int\000"
 10799      545F4641 
 10799      53543332 
 10799      5F545950 
 10799      455F5F20 
 10800              	.LASF643:
 10801 4253 5F524545 		.ascii	"_REENT_CHECK_EMERGENCY(var) _REENT_CHECK(var, _emer"
 10801      4E545F43 
 10801      4845434B 
 10801      5F454D45 
 10801      5247454E 
 10802 4286 67656E63 		.ascii	"gency, char *, _REENT_EMERGENCY_SIZE, )\000"
 10802      792C2063 
 10802      68617220 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 277


 10802      2A2C205F 
 10802      5245454E 
 10803              	.LASF615:
 10804 42ae 5F5F6C6F 		.ascii	"__lock_release(lock) (_CAST_VOID 0)\000"
 10804      636B5F72 
 10804      656C6561 
 10804      7365286C 
 10804      6F636B29 
 10805              	.LASF822:
 10806 42d2 636F6E66 		.ascii	"configMAX_PRIORITIES ( ( unsigned portBASE_TYPE ) 5"
 10806      69674D41 
 10806      585F5052 
 10806      494F5249 
 10806      54494553 
 10807 4305 202900   		.ascii	" )\000"
 10808              	.LASF642:
 10809 4308 5F524545 		.ascii	"_REENT_CHECK_MP(var) _REENT_CHECK(var, _mp, struct "
 10809      4E545F43 
 10809      4845434B 
 10809      5F4D5028 
 10809      76617229 
 10810 433b 5F6D7072 		.ascii	"_mprec *, sizeof *((var)->_mp), _REENT_INIT_MP(var)"
 10810      6563202A 
 10810      2C207369 
 10810      7A656F66 
 10810      202A2828 
 10811 436e 2900     		.ascii	")\000"
 10812              	.LASF650:
 10813 4370 5F524545 		.ascii	"_REENT_RAND48_MULT(ptr) ((ptr)->_r48->_mult)\000"
 10813      4E545F52 
 10813      414E4434 
 10813      385F4D55 
 10813      4C542870 
 10814              	.LASF370:
 10815 439d 5F5F5553 		.ascii	"__USFRACT_FBIT__ 8\000"
 10815      46524143 
 10815      545F4642 
 10815      49545F5F 
 10815      203800
 10816              	.LASF695:
 10817 43b0 5F5F5743 		.ascii	"__WCHAR_T \000"
 10817      4841525F 
 10817      542000
 10818              	.LASF150:
 10819 43bb 5F5F5359 		.ascii	"__SYS_CONFIG_H__ \000"
 10819      535F434F 
 10819      4E464947 
 10819      5F485F5F 
 10819      2000
 10820              	.LASF798:
 10821 43cd 4D425F43 		.ascii	"MB_CUR_MAX __locale_mb_cur_max()\000"
 10821      55525F4D 
 10821      4158205F 
 10821      5F6C6F63 
 10821      616C655F 
 10822              	.LASF767:
 10823 43ee 5345454B 		.ascii	"SEEK_END 2\000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 278


 10823      5F454E44 
 10823      203200
 10824              	.LASF600:
 10825 43f9 5F5F5F69 		.ascii	"___int32_t_defined 1\000"
 10825      6E743332 
 10825      5F745F64 
 10825      6566696E 
 10825      65642031 
 10826              	.LASF961:
 10827 440e 6C697374 		.ascii	"listLIST_IS_INITIALISED(pxList) ( ( pxList )->xList"
 10827      4C495354 
 10827      5F49535F 
 10827      494E4954 
 10827      49414C49 
 10828 4441 456E642E 		.ascii	"End.xItemValue == portMAX_DELAY )\000"
 10828      78497465 
 10828      6D56616C 
 10828      7565203D 
 10828      3D20706F 
 10829              	.LASF224:
 10830 4463 5F5F494E 		.ascii	"__INT64_TYPE__ long long int\000"
 10830      5436345F 
 10830      54595045 
 10830      5F5F206C 
 10830      6F6E6720 
 10831              	.LASF385:
 10832 4480 5F5F4C46 		.ascii	"__LFRACT_FBIT__ 31\000"
 10832      52414354 
 10832      5F464249 
 10832      545F5F20 
 10832      333100
 10833              	.LASF204:
 10834 4493 5F5F4348 		.ascii	"__CHAR_BIT__ 8\000"
 10834      41525F42 
 10834      49545F5F 
 10834      203800
 10835              	.LASF502:
 10836 44a2 5F5F5349 		.ascii	"__SIZEOF_WCHAR_T__ 4\000"
 10836      5A454F46 
 10836      5F574348 
 10836      41525F54 
 10836      5F5F2034 
 10837              	.LASF20:
 10838 44b7 784C4953 		.ascii	"xLIST_ITEM\000"
 10838      545F4954 
 10838      454D00
 10839              	.LASF509:
 10840 44c2 5F5F7468 		.ascii	"__thumb2__ 1\000"
 10840      756D6232 
 10840      5F5F2031 
 10840      00
 10841              	.LASF923:
 10842 44cf 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) \000"
 10842      65515545 
 10842      55455F52 
 10842      45434549 
 10842      56455F46 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 279


 10843              	.LASF383:
 10844 44fc 5F5F5546 		.ascii	"__UFRACT_MAX__ 0XFFFFP-16UR\000"
 10844      52414354 
 10844      5F4D4158 
 10844      5F5F2030 
 10844      58464646 
 10845              	.LASF839:
 10846 4518 494E434C 		.ascii	"INCLUDE_vTaskDelayUntil 1\000"
 10846      5544455F 
 10846      76546173 
 10846      6B44656C 
 10846      6179556E 
 10847              	.LASF85:
 10848 4532 76546173 		.ascii	"vTaskEndScheduler\000"
 10848      6B456E64 
 10848      53636865 
 10848      64756C65 
 10848      7200
 10849              	.LASF35:
 10850 4544 756C4C65 		.ascii	"ulLengthInBytes\000"
 10850      6E677468 
 10850      496E4279 
 10850      74657300 
 10851              	.LASF28:
 10852 4554 78546173 		.ascii	"xTaskHandle\000"
 10852      6B48616E 
 10852      646C6500 
 10853              	.LASF596:
 10854 4560 5F5F4558 		.ascii	"__EXP(x) __ ##x ##__\000"
 10854      50287829 
 10854      205F5F20 
 10854      23237820 
 10854      23235F5F 
 10855              	.LASF209:
 10856 4575 5F5F4259 		.ascii	"__BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 10856      54455F4F 
 10856      52444552 
 10856      5F5F205F 
 10856      5F4F5244 
 10857              	.LASF123:
 10858 459c 70785265 		.ascii	"pxReadyTasksLists\000"
 10858      61647954 
 10858      61736B73 
 10858      4C697374 
 10858      7300
 10859              	.LASF551:
 10860 45ae 5F4E4F54 		.ascii	"_NOTHROW \000"
 10860      48524F57 
 10860      2000
 10861              	.LASF149:
 10862 45b8 5F414E53 		.ascii	"_ANSIDECL_H_ \000"
 10862      49444543 
 10862      4C5F485F 
 10862      2000
 10863              	.LASF854:
 10864 45c6 706F7274 		.ascii	"portSTACK_GROWTH ( -1 )\000"
 10864      53544143 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 280


 10864      4B5F4752 
 10864      4F575448 
 10864      2028202D 
 10865              	.LASF758:
 10866 45de 454F4620 		.ascii	"EOF (-1)\000"
 10866      282D3129 
 10866      00
 10867              	.LASF74:
 10868 45e7 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 10868      696F7269 
 10868      74795573 
 10868      65644F6E 
 10868      456E7472 
 10869              	.LASF291:
 10870 45fd 5F5F494E 		.ascii	"__INT_FAST32_MAX__ 2147483647\000"
 10870      545F4641 
 10870      53543332 
 10870      5F4D4158 
 10870      5F5F2032 
 10871              	.LASF380:
 10872 461b 5F5F5546 		.ascii	"__UFRACT_FBIT__ 16\000"
 10872      52414354 
 10872      5F464249 
 10872      545F5F20 
 10872      313600
 10873              	.LASF461:
 10874 462e 5F5F5544 		.ascii	"__UDQ_FBIT__ 64\000"
 10874      515F4642 
 10874      49545F5F 
 10874      20363400 
 10875              	.LASF335:
 10876 463e 5F5F4C44 		.ascii	"__LDBL_MAX_10_EXP__ 308\000"
 10876      424C5F4D 
 10876      41585F31 
 10876      305F4558 
 10876      505F5F20 
 10877              	.LASF744:
 10878 4656 5F5F5345 		.ascii	"__SEOF 0x0020\000"
 10878      4F462030 
 10878      78303032 
 10878      3000
 10879              	.LASF663:
 10880 4664 5F524545 		.ascii	"_REENT_MBRLEN_STATE(ptr) ((ptr)->_misc->_mbrlen_sta"
 10880      4E545F4D 
 10880      42524C45 
 10880      4E5F5354 
 10880      41544528 
 10881 4697 74652900 		.ascii	"te)\000"
 10882              	.LASF855:
 10883 469b 706F7274 		.ascii	"portTICK_RATE_MS ( ( portTickType ) 1000 / configTI"
 10883      5449434B 
 10883      5F524154 
 10883      455F4D53 
 10883      20282028 
 10884 46ce 434B5F52 		.ascii	"CK_RATE_HZ )\000"
 10884      4154455F 
 10884      485A2029 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 281


 10884      00
 10885              	.LASF326:
 10886 46db 5F5F4442 		.ascii	"__DBL_DENORM_MIN__ ((double)4.9406564584124654e-324"
 10886      4C5F4445 
 10886      4E4F524D 
 10886      5F4D494E 
 10886      5F5F2028 
 10887 470e 4C2900   		.ascii	"L)\000"
 10888              	.LASF976:
 10889 4711 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD 2\000"
 10889      4F4D4D41 
 10889      4E445F43 
 10889      48414E47 
 10889      455F5045 
 10890              	.LASF190:
 10891 472c 5F5F4154 		.ascii	"__ATOMIC_SEQ_CST 5\000"
 10891      4F4D4943 
 10891      5F534551 
 10891      5F435354 
 10891      203500
 10892              	.LASF583:
 10893 473f 5F53495A 		.ascii	"_SIZE_T_DEFINED_ \000"
 10893      455F545F 
 10893      44454649 
 10893      4E45445F 
 10893      2000
 10894              	.LASF13:
 10895 4751 706F7274 		.ascii	"portTickType\000"
 10895      5469636B 
 10895      54797065 
 10895      00
 10896              	.LASF304:
 10897 475e 5F5F464C 		.ascii	"__FLT_MIN_EXP__ (-125)\000"
 10897      545F4D49 
 10897      4E5F4558 
 10897      505F5F20 
 10897      282D3132 
 10898              	.LASF300:
 10899 4775 5F5F4445 		.ascii	"__DEC_EVAL_METHOD__ 2\000"
 10899      435F4556 
 10899      414C5F4D 
 10899      4554484F 
 10899      445F5F20 
 10900              	.LASF12:
 10901 478b 70645441 		.ascii	"pdTASK_CODE\000"
 10901      534B5F43 
 10901      4F444500 
 10902              	.LASF846:
 10903 4797 706F7274 		.ascii	"portCHAR char\000"
 10903      43484152 
 10903      20636861 
 10903      7200
 10904              	.LASF411:
 10905 47a5 5F5F5553 		.ascii	"__USACCUM_IBIT__ 8\000"
 10905      41434355 
 10905      4D5F4942 
 10905      49545F5F 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 282


 10905      203800
 10906              	.LASF763:
 10907 47b8 544D505F 		.ascii	"TMP_MAX 26\000"
 10907      4D415820 
 10907      323600
 10908              	.LASF967:
 10909 47c3 7461736B 		.ascii	"taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()\000"
 10909      44495341 
 10909      424C455F 
 10909      494E5445 
 10909      52525550 
 10910              	.LASF298:
 10911 47f5 5F5F5549 		.ascii	"__UINTPTR_MAX__ 4294967295U\000"
 10911      4E545054 
 10911      525F4D41 
 10911      585F5F20 
 10911      34323934 
 10912              	.LASF716:
 10913 4811 70687973 		.ascii	"physadr physadr_t\000"
 10913      61647220 
 10913      70687973 
 10913      6164725F 
 10913      7400
 10914              	.LASF303:
 10915 4823 5F5F464C 		.ascii	"__FLT_DIG__ 6\000"
 10915      545F4449 
 10915      475F5F20 
 10915      3600
 10916              	.LASF424:
 10917 4831 5F5F5541 		.ascii	"__UACCUM_EPSILON__ 0x1P-16UK\000"
 10917      4343554D 
 10917      5F455053 
 10917      494C4F4E 
 10917      5F5F2030 
 10918              	.LASF17:
 10919 484e 70764F77 		.ascii	"pvOwner\000"
 10919      6E657200 
 10920              	.LASF704:
 10921 4856 5F574348 		.ascii	"_WCHAR_T_DECLARED \000"
 10921      41525F54 
 10921      5F444543 
 10921      4C415245 
 10921      442000
 10922              	.LASF118:
 10923 4869 70727644 		.ascii	"prvDeleteTCB\000"
 10923      656C6574 
 10923      65544342 
 10923      00
 10924              	.LASF887:
 10925 4876 706F7274 		.ascii	"portALIGNMENT_ASSERT_pxCurrentTCB configASSERT\000"
 10925      414C4947 
 10925      4E4D454E 
 10925      545F4153 
 10925      53455254 
 10926              	.LASF724:
 10927 48a5 4E464442 		.ascii	"NFDBITS (sizeof (fd_mask) * NBBY)\000"
 10927      49545320 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 283


 10927      2873697A 
 10927      656F6620 
 10927      2866645F 
 10928              	.LASF154:
 10929 48c7 5F535953 		.ascii	"_SYS_REENT_H_ \000"
 10929      5F524545 
 10929      4E545F48 
 10929      5F2000
 10930              	.LASF299:
 10931 48d6 5F5F464C 		.ascii	"__FLT_EVAL_METHOD__ 0\000"
 10931      545F4556 
 10931      414C5F4D 
 10931      4554484F 
 10931      445F5F20 
 10932              	.LASF3:
 10933 48ec 73686F72 		.ascii	"short int\000"
 10933      7420696E 
 10933      7400
 10934              	.LASF0:
 10935 48f6 756E7369 		.ascii	"unsigned int\000"
 10935      676E6564 
 10935      20696E74 
 10935      00
 10936              	.LASF24:
 10937 4903 75784E75 		.ascii	"uxNumberOfItems\000"
 10937      6D626572 
 10937      4F664974 
 10937      656D7300 
 10938              	.LASF515:
 10939 4913 5F5F4152 		.ascii	"__ARM_ARCH_7M__ 1\000"
 10939      4D5F4152 
 10939      43485F37 
 10939      4D5F5F20 
 10939      3100
 10940              	.LASF954:
 10941 4925 6C697374 		.ascii	"listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList) ( (&( ( px"
 10941      4745545F 
 10941      4954454D 
 10941      5F56414C 
 10941      55455F4F 
 10942 4958 4C697374 		.ascii	"List )->xListEnd ))->pxNext->xItemValue )\000"
 10942      20292D3E 
 10942      784C6973 
 10942      74456E64 
 10942      2029292D 
 10943              	.LASF182:
 10944 4982 5F5F5354 		.ascii	"__STDC_UTF_16__ 1\000"
 10944      44435F55 
 10944      54465F31 
 10944      365F5F20 
 10944      3100
 10945              	.LASF628:
 10946 4994 5F52414E 		.ascii	"_RAND48_MULT_2 (0x0005)\000"
 10946      4434385F 
 10946      4D554C54 
 10946      5F322028 
 10946      30783030 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 284


 10947              	.LASF560:
 10948 49ac 5F455846 		.ascii	"_EXFUN_NOTHROW(name,proto) name proto _NOTHROW\000"
 10948      554E5F4E 
 10948      4F544852 
 10948      4F57286E 
 10948      616D652C 
 10949              	.LASF122:
 10950 49db 76546173 		.ascii	"vTaskPriorityDisinherit\000"
 10950      6B507269 
 10950      6F726974 
 10950      79446973 
 10950      696E6865 
 10951              	.LASF645:
 10952 49f3 5F524545 		.ascii	"_REENT_CHECK_MISC(var) _REENT_CHECK(var, _misc, str"
 10952      4E545F43 
 10952      4845434B 
 10952      5F4D4953 
 10952      43287661 
 10953 4a26 75637420 		.ascii	"uct _misc_reent *, sizeof *((var)->_misc), _REENT_I"
 10953      5F6D6973 
 10953      635F7265 
 10953      656E7420 
 10953      2A2C2073 
 10954 4a59 4E49545F 		.ascii	"NIT_MISC(var))\000"
 10954      4D495343 
 10954      28766172 
 10954      292900
 10955              	.LASF683:
 10956 4a68 5F545F50 		.ascii	"_T_PTRDIFF \000"
 10956      54524449 
 10956      46462000 
 10957              	.LASF455:
 10958 4a74 5F5F5551 		.ascii	"__UQQ_FBIT__ 8\000"
 10958      515F4642 
 10958      49545F5F 
 10958      203800
 10959              	.LASF100:
 10960 4a83 7078556E 		.ascii	"pxUnblockedTCB\000"
 10960      626C6F63 
 10960      6B656454 
 10960      434200
 10961              	.LASF722:
 10962 4a92 4E424259 		.ascii	"NBBY 8\000"
 10962      203800
 10963              	.LASF352:
 10964 4a99 5F5F4445 		.ascii	"__DEC64_MIN_EXP__ (-382)\000"
 10964      4336345F 
 10964      4D494E5F 
 10964      4558505F 
 10964      5F20282D 
 10965              	.LASF423:
 10966 4ab2 5F5F5541 		.ascii	"__UACCUM_MAX__ 0XFFFFFFFFP-16UK\000"
 10966      4343554D 
 10966      5F4D4158 
 10966      5F5F2030 
 10966      58464646 
 10967              	.LASF712:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 285


 10968 4ad2 5F54494D 		.ascii	"_TIME_T_ long\000"
 10968      455F545F 
 10968      206C6F6E 
 10968      6700
 10969              	.LASF116:
 10970 4ae0 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 10970      736B4765 
 10970      74537461 
 10970      636B4869 
 10970      67685761 
 10971              	.LASF793:
 10972 4afc 616C6C6F 		.ascii	"alloca\000"
 10972      636100
 10973              	.LASF388:
 10974 4b03 5F5F4C46 		.ascii	"__LFRACT_MAX__ 0X7FFFFFFFP-31LR\000"
 10974      52414354 
 10974      5F4D4158 
 10974      5F5F2030 
 10974      58374646 
 10975              	.LASF504:
 10976 4b23 5F5F5349 		.ascii	"__SIZEOF_PTRDIFF_T__ 4\000"
 10976      5A454F46 
 10976      5F505452 
 10976      44494646 
 10976      5F545F5F 
 10977              	.LASF691:
 10978 4b3a 5F5F5743 		.ascii	"__WCHAR_T__ \000"
 10978      4841525F 
 10978      545F5F20 
 10978      00
 10979              	.LASF210:
 10980 4b47 5F5F464C 		.ascii	"__FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 10980      4F41545F 
 10980      574F5244 
 10980      5F4F5244 
 10980      45525F5F 
 10981              	.LASF287:
 10982 4b74 5F5F5549 		.ascii	"__UINT_LEAST64_MAX__ 18446744073709551615ULL\000"
 10982      4E545F4C 
 10982      45415354 
 10982      36345F4D 
 10982      41585F5F 
 10983              	.LASF703:
 10984 4ba1 5F474343 		.ascii	"_GCC_WCHAR_T \000"
 10984      5F574348 
 10984      41525F54 
 10984      2000
 10985              	.LASF526:
 10986 4baf 696E6C69 		.ascii	"inline \000"
 10986      6E652000 
 10987              	.LASF220:
 10988 4bb7 5F5F5349 		.ascii	"__SIG_ATOMIC_TYPE__ int\000"
 10988      475F4154 
 10988      4F4D4943 
 10988      5F545950 
 10988      455F5F20 
 10989              	.LASF761:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 286


 10990 4bcf 46494C45 		.ascii	"FILENAME_MAX 1024\000"
 10990      4E414D45 
 10990      5F4D4158 
 10990      20313032 
 10990      3400
 10991              	.LASF910:
 10992 4be1 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 10992      65474956 
 10992      455F4D55 
 10992      5445585F 
 10992      52454355 
 10993              	.LASF962:
 10994 4c0c 74736B4B 		.ascii	"tskKERNEL_VERSION_NUMBER \"V7.3.0\"\000"
 10994      45524E45 
 10994      4C5F5645 
 10994      5253494F 
 10994      4E5F4E55 
 10995              	.LASF358:
 10996 4c2e 5F5F4445 		.ascii	"__DEC128_MANT_DIG__ 34\000"
 10996      43313238 
 10996      5F4D414E 
 10996      545F4449 
 10996      475F5F20 
 10997              	.LASF263:
 10998 4c45 5F5F5349 		.ascii	"__SIG_ATOMIC_MAX__ 2147483647\000"
 10998      475F4154 
 10998      4F4D4943 
 10998      5F4D4158 
 10998      5F5F2032 
 10999              	.LASF546:
 11000 4c63 5F5F494D 		.ascii	"__IMPORT \000"
 11000      504F5254 
 11000      2000
 11001              	.LASF56:
 11002 4c6d 70785461 		.ascii	"pxTaskToDelete\000"
 11002      736B546F 
 11002      44656C65 
 11002      746500
 11003              	.LASF475:
 11004 4c7c 5F5F5553 		.ascii	"__USA_FBIT__ 16\000"
 11004      415F4642 
 11004      49545F5F 
 11004      20313600 
 11005              	.LASF98:
 11006 4c8c 78546963 		.ascii	"xTicksToWait\000"
 11006      6B73546F 
 11006      57616974 
 11006      00
 11007              	.LASF156:
 11008 4c99 5F4D4143 		.ascii	"_MACHINE__TYPES_H \000"
 11008      48494E45 
 11008      5F5F5459 
 11008      5045535F 
 11008      482000
 11009              	.LASF607:
 11010 4cac 5F5F6C6F 		.ascii	"__lock_init(lock) (_CAST_VOID 0)\000"
 11010      636B5F69 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 287


 11010      6E697428 
 11010      6C6F636B 
 11010      2920285F 
 11011              	.LASF151:
 11012 4ccd 5F5F4945 		.ascii	"__IEEE_LITTLE_ENDIAN \000"
 11012      45455F4C 
 11012      4954544C 
 11012      455F454E 
 11012      4449414E 
 11013              	.LASF87:
 11014 4ce3 78546173 		.ascii	"xTaskResumeAll\000"
 11014      6B526573 
 11014      756D6541 
 11014      6C6C00
 11015              	.LASF859:
 11016 4cf2 706F7274 		.ascii	"portSET_INTERRUPT_MASK_FROM_ISR() ulPortSetInterrup"
 11016      5345545F 
 11016      494E5445 
 11016      52525550 
 11016      545F4D41 
 11017 4d25 744D6173 		.ascii	"tMask()\000"
 11017      6B282900 
 11018              	.LASF490:
 11019 4d2d 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR_LOCK_FREE 2\000"
 11019      435F4154 
 11019      4F4D4943 
 11019      5F434841 
 11019      525F4C4F 
 11020              	.LASF562:
 11021 4d4b 5F455850 		.ascii	"_EXPARM(name,proto) (* name) proto\000"
 11021      41524D28 
 11021      6E616D65 
 11021      2C70726F 
 11021      746F2920 
 11022              	.LASF858:
 11023 4d6e 706F7274 		.ascii	"portEND_SWITCHING_ISR(xSwitchRequired) if( xSwitchR"
 11023      454E445F 
 11023      53574954 
 11023      4348494E 
 11023      475F4953 
 11024 4da1 65717569 		.ascii	"equired ) vPortYieldFromISR()\000"
 11024      72656420 
 11024      29207650 
 11024      6F727459 
 11024      69656C64 
 11025              	.LASF389:
 11026 4dbf 5F5F4C46 		.ascii	"__LFRACT_EPSILON__ 0x1P-31LR\000"
 11026      52414354 
 11026      5F455053 
 11026      494C4F4E 
 11026      5F5F2030 
 11027              	.LASF549:
 11028 4ddc 5F424547 		.ascii	"_BEGIN_STD_C \000"
 11028      494E5F53 
 11028      54445F43 
 11028      2000
 11029              	.LASF937:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 288


 11030 4dea 74726163 		.ascii	"traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageV"
 11030      6554494D 
 11030      45525F43 
 11030      4F4D4D41 
 11030      4E445F53 
 11031 4e1d 616C7565 		.ascii	"alueValue,xReturn) \000"
 11031      56616C75 
 11031      652C7852 
 11031      65747572 
 11031      6E292000 
 11032              	.LASF638:
 11033 4e31 5F524545 		.ascii	"_REENT_CHECK_ASCTIME_BUF(var) _REENT_CHECK(var, _as"
 11033      4E545F43 
 11033      4845434B 
 11033      5F415343 
 11033      54494D45 
 11034 4e64 6374696D 		.ascii	"ctime_buf, char *, _REENT_ASCTIME_SIZE, memset((var"
 11034      655F6275 
 11034      662C2063 
 11034      68617220 
 11034      2A2C205F 
 11035 4e97 292D3E5F 		.ascii	")->_asctime_buf, 0, _REENT_ASCTIME_SIZE))\000"
 11035      61736374 
 11035      696D655F 
 11035      6275662C 
 11035      20302C20 
 11036              	.LASF164:
 11037 4ec1 5441534B 		.ascii	"TASK_H \000"
 11037      5F482000 
 11038              	.LASF978:
 11039 4ec9 7854696D 		.ascii	"xTimerStart(xTimer,xBlockTime) xTimerGenericCommand"
 11039      65725374 
 11039      61727428 
 11039      7854696D 
 11039      65722C78 
 11040 4efc 28202820 		.ascii	"( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount"
 11040      7854696D 
 11040      65722029 
 11040      2C20746D 
 11040      72434F4D 
 11041 4f2f 28292029 		.ascii	"() ), NULL, ( xBlockTime ) )\000"
 11041      2C204E55 
 11041      4C4C2C20 
 11041      28207842 
 11041      6C6F636B 
 11042              	.LASF273:
 11043 4f4c 5F5F494E 		.ascii	"__INT_LEAST8_MAX__ 127\000"
 11043      545F4C45 
 11043      41535438 
 11043      5F4D4158 
 11043      5F5F2031 
 11044              	.LASF922:
 11045 4f63 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR(pxQueue) \000"
 11045      65515545 
 11045      55455F52 
 11045      45434549 
 11045      56455F46 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 289


 11046              	.LASF506:
 11047 4f89 5F5F6172 		.ascii	"__arm__ 1\000"
 11047      6D5F5F20 
 11047      3100
 11048              	.LASF902:
 11049 4f93 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) \000"
 11049      65424C4F 
 11049      434B494E 
 11049      475F4F4E 
 11049      5F515545 
 11050              	.LASF26:
 11051 4fbc 784C6973 		.ascii	"xListEnd\000"
 11051      74456E64 
 11051      00
 11052              	.LASF572:
 11053 4fc5 5F465354 		.ascii	"_FSTDIO \000"
 11053      44494F20 
 11053      00
 11054              	.LASF772:
 11055 4fce 5F737464 		.ascii	"_stdout_r(x) ((x)->_stdout)\000"
 11055      6F75745F 
 11055      72287829 
 11055      20282878 
 11055      292D3E5F 
 11056              	.LASF734:
 11057 4fea 5F5F7469 		.ascii	"__timer_t_defined \000"
 11057      6D65725F 
 11057      745F6465 
 11057      66696E65 
 11057      642000
 11058              	.LASF945:
 11059 4ffd 7076506F 		.ascii	"pvPortMallocAligned(x,puxStackBuffer) ( ( ( puxStac"
 11059      72744D61 
 11059      6C6C6F63 
 11059      416C6967 
 11059      6E656428 
 11060 5030 6B427566 		.ascii	"kBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ("
 11060      66657220 
 11060      29203D3D 
 11060      204E554C 
 11060      4C202920 
 11061 5063 20707578 		.ascii	" puxStackBuffer ) )\000"
 11061      53746163 
 11061      6B427566 
 11061      66657220 
 11061      29202900 
 11062              	.LASF662:
 11063 5077 5F524545 		.ascii	"_REENT_WCTOMB_STATE(ptr) ((ptr)->_misc->_wctomb_sta"
 11063      4E545F57 
 11063      43544F4D 
 11063      425F5354 
 11063      41544528 
 11064 50aa 74652900 		.ascii	"te)\000"
 11065              	.LASF692:
 11066 50ae 5F574348 		.ascii	"_WCHAR_T \000"
 11066      41525F54 
 11066      2000
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 290


 11067              	.LASF977:
 11068 50b8 746D7243 		.ascii	"tmrCOMMAND_DELETE 3\000"
 11068      4F4D4D41 
 11068      4E445F44 
 11068      454C4554 
 11068      45203300 
 11069              	.LASF926:
 11070 50cc 74726163 		.ascii	"traceTASK_CREATE_FAILED() \000"
 11070      65544153 
 11070      4B5F4352 
 11070      45415445 
 11070      5F464149 
 11071              	.LASF344:
 11072 50e7 5F5F4445 		.ascii	"__DEC32_MANT_DIG__ 7\000"
 11072      4333325F 
 11072      4D414E54 
 11072      5F444947 
 11072      5F5F2037 
 11073              	.LASF530:
 11074 50fc 5F5F4353 		.ascii	"__CS_SOURCERYGXX_MIN__ 9\000"
 11074      5F534F55 
 11074      52434552 
 11074      59475858 
 11074      5F4D494E 
 11075              	.LASF595:
 11076 5115 5F4D4143 		.ascii	"_MACHINE__DEFAULT_TYPES_H \000"
 11076      48494E45 
 11076      5F5F4445 
 11076      4641554C 
 11076      545F5459 
 11077              	.LASF205:
 11078 5130 5F5F4249 		.ascii	"__BIGGEST_ALIGNMENT__ 8\000"
 11078      47474553 
 11078      545F414C 
 11078      49474E4D 
 11078      454E545F 
 11079              	.LASF412:
 11080 5148 5F5F5553 		.ascii	"__USACCUM_MIN__ 0.0UHK\000"
 11080      41434355 
 11080      4D5F4D49 
 11080      4E5F5F20 
 11080      302E3055 
 11081              	.LASF688:
 11082 515f 5F474343 		.ascii	"_GCC_PTRDIFF_T \000"
 11082      5F505452 
 11082      44494646 
 11082      5F542000 
 11083              	.LASF856:
 11084 516f 706F7274 		.ascii	"portBYTE_ALIGNMENT 8\000"
 11084      42595445 
 11084      5F414C49 
 11084      474E4D45 
 11084      4E542038 
 11085              	.LASF834:
 11086 5184 494E434C 		.ascii	"INCLUDE_vTaskPrioritySet 1\000"
 11086      5544455F 
 11086      76546173 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 291


 11086      6B507269 
 11086      6F726974 
 11087              	.LASF472:
 11088 519f 5F5F5441 		.ascii	"__TA_IBIT__ 64\000"
 11088      5F494249 
 11088      545F5F20 
 11088      363400
 11089              	.LASF840:
 11090 51ae 494E434C 		.ascii	"INCLUDE_vTaskDelay 1\000"
 11090      5544455F 
 11090      76546173 
 11090      6B44656C 
 11090      61792031 
 11091              	.LASF68:
 11092 51c3 75785461 		.ascii	"uxTaskPriorityGet\000"
 11092      736B5072 
 11092      696F7269 
 11092      74794765 
 11092      7400
 11093              	.LASF10:
 11094 51d5 63686172 		.ascii	"char\000"
 11094      00
 11095              	.LASF605:
 11096 51da 5F5F4C4F 		.ascii	"__LOCK_INIT(class,lock) static int lock = 0;\000"
 11096      434B5F49 
 11096      4E495428 
 11096      636C6173 
 11096      732C6C6F 
 11097              	.LASF64:
 11098 5207 7853686F 		.ascii	"xShouldDelay\000"
 11098      756C6444 
 11098      656C6179 
 11098      00
 11099              	.LASF700:
 11100 5214 5F574348 		.ascii	"_WCHAR_T_H \000"
 11100      41525F54 
 11100      5F482000 
 11101              	.LASF877:
 11102 5220 494E434C 		.ascii	"INCLUDE_xQueueGetMutexHolder 0\000"
 11102      5544455F 
 11102      78517565 
 11102      75654765 
 11102      744D7574 
 11103              	.LASF720:
 11104 523f 5F5F7469 		.ascii	"__time_t_defined \000"
 11104      6D655F74 
 11104      5F646566 
 11104      696E6564 
 11104      2000
 11105              	.LASF757:
 11106 5251 5F494F4E 		.ascii	"_IONBF 2\000"
 11106      42462032 
 11106      00
 11107              	.LASF167:
 11108 525a 74736B49 		.ascii	"tskIDLE_STACK_SIZE configMINIMAL_STACK_SIZE\000"
 11108      444C455F 
 11108      53544143 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 292


 11108      4B5F5349 
 11108      5A452063 
 11109              	.LASF544:
 11110 5286 5F5F5241 		.ascii	"__RAND_MAX 0x7fffffff\000"
 11110      4E445F4D 
 11110      41582030 
 11110      78376666 
 11110      66666666 
 11111              	.LASF460:
 11112 529c 5F5F5553 		.ascii	"__USQ_IBIT__ 0\000"
 11112      515F4942 
 11112      49545F5F 
 11112      203000
 11113              	.LASF738:
 11114 52ab 5F66756E 		.ascii	"_funlockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __l"
 11114      6C6F636B 
 11114      66696C65 
 11114      28667029 
 11114      20282828 
 11115 52de 6F636B5F 		.ascii	"ock_release_recursive((fp)->_lock))\000"
 11115      72656C65 
 11115      6173655F 
 11115      72656375 
 11115      72736976 
 11116              	.LASF925:
 11117 5302 74726163 		.ascii	"traceTASK_CREATE(pxNewTCB) \000"
 11117      65544153 
 11117      4B5F4352 
 11117      45415445 
 11117      2870784E 
 11118              	.LASF381:
 11119 531e 5F5F5546 		.ascii	"__UFRACT_IBIT__ 0\000"
 11119      52414354 
 11119      5F494249 
 11119      545F5F20 
 11119      3000
 11120              	.LASF76:
 11121 5330 76546173 		.ascii	"vTaskSuspend\000"
 11121      6B537573 
 11121      70656E64 
 11121      00
 11122              	.LASF274:
 11123 533d 5F5F494E 		.ascii	"__INT8_C(c) c\000"
 11123      54385F43 
 11123      28632920 
 11123      6300
 11124              	.LASF386:
 11125 534b 5F5F4C46 		.ascii	"__LFRACT_IBIT__ 0\000"
 11125      52414354 
 11125      5F494249 
 11125      545F5F20 
 11125      3000
 11126              	.LASF779:
 11127 535d 5F5F7370 		.ascii	"__sputc_raw_r(__ptr,__c,__p) (--(__p)->_w < 0 ? (__"
 11127      7574635F 
 11127      7261775F 
 11127      72285F5F 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 293


 11127      7074722C 
 11128 5390 70292D3E 		.ascii	"p)->_w >= (__p)->_lbfsize ? (*(__p)->_p = (__c)), *"
 11128      5F77203E 
 11128      3D20285F 
 11128      5F70292D 
 11128      3E5F6C62 
 11129 53c3 285F5F70 		.ascii	"(__p)->_p != '\\n' ? (int)*(__p)->_p++ : __swbuf_r("
 11129      292D3E5F 
 11129      7020213D 
 11129      20275C6E 
 11129      27203F20 
 11130 53f5 5F5F7074 		.ascii	"__ptr, '\\n', __p) : __swbuf_r(__ptr, (int)(__c), _"
 11130      722C2027 
 11130      5C6E272C 
 11130      205F5F70 
 11130      29203A20 
 11131 5427 5F702920 		.ascii	"_p) : (*(__p)->_p = (__c), (int)*(__p)->_p++))\000"
 11131      3A20282A 
 11131      285F5F70 
 11131      292D3E5F 
 11131      70203D20 
 11132              	.LASF832:
 11133 5456 636F6E66 		.ascii	"configUSE_CO_ROUTINES 0\000"
 11133      69675553 
 11133      455F434F 
 11133      5F524F55 
 11133      54494E45 
 11134              	.LASF678:
 11135 546e 5F535444 		.ascii	"_STDDEF_H_ \000"
 11135      4445465F 
 11135      485F2000 
 11136              	.LASF533:
 11137 547a 5F4E4557 		.ascii	"_NEWLIB_VERSION \"1.18.0\"\000"
 11137      4C49425F 
 11137      56455253 
 11137      494F4E20 
 11137      22312E31 
 11138              	.LASF318:
 11139 5493 5F5F4442 		.ascii	"__DBL_MIN_EXP__ (-1021)\000"
 11139      4C5F4D49 
 11139      4E5F4558 
 11139      505F5F20 
 11139      282D3130 
 11140              	.LASF120:
 11141 54ab 76546173 		.ascii	"vTaskPriorityInherit\000"
 11141      6B507269 
 11141      6F726974 
 11141      79496E68 
 11141      65726974 
 11142              	.LASF44:
 11143 54c0 70635461 		.ascii	"pcTaskName\000"
 11143      736B4E61 
 11143      6D6500
 11144              	.LASF161:
 11145 54cb 494E435F 		.ascii	"INC_FREERTOS_H \000"
 11145      46524545 
 11145      52544F53 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 294


 11145      5F482000 
 11146              	.LASF267:
 11147 54db 5F5F494E 		.ascii	"__INT32_MAX__ 2147483647L\000"
 11147      5433325F 
 11147      4D41585F 
 11147      5F203231 
 11147      34373438 
 11148              	.LASF880:
 11149 54f5 494E434C 		.ascii	"INCLUDE_eTaskStateGet 0\000"
 11149      5544455F 
 11149      65546173 
 11149      6B537461 
 11149      74654765 
 11150              	.LASF941:
 11151 550d 706F7274 		.ascii	"portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() \000"
 11151      434F4E46 
 11151      49475552 
 11151      455F5449 
 11151      4D45525F 
 11152              	.LASF614:
 11153 5537 5F5F6C6F 		.ascii	"__lock_try_acquire_recursive(lock) (_CAST_VOID 0)\000"
 11153      636B5F74 
 11153      72795F61 
 11153      63717569 
 11153      72655F72 
 11154              	.LASF354:
 11155 5569 5F5F4445 		.ascii	"__DEC64_MIN__ 1E-383DD\000"
 11155      4336345F 
 11155      4D494E5F 
 11155      5F203145 
 11155      2D333833 
 11156              	.LASF740:
 11157 5580 5F5F534E 		.ascii	"__SNBF 0x0002\000"
 11157      42462030 
 11157      78303030 
 11157      3200
 11158              	.LASF603:
 11159 558e 5F5F4558 		.ascii	"__EXP\000"
 11159      5000
 11160              	.LASF602:
 11161 5594 5F5F5F69 		.ascii	"___int64_t_defined 1\000"
 11161      6E743634 
 11161      5F745F64 
 11161      6566696E 
 11161      65642031 
 11162              	.LASF341:
 11163 55a9 5F5F4C44 		.ascii	"__LDBL_HAS_DENORM__ 1\000"
 11163      424C5F48 
 11163      41535F44 
 11163      454E4F52 
 11163      4D5F5F20 
 11164              	.LASF889:
 11165 55bf 494E434C 		.ascii	"INCLUDE_xTaskGetCurrentTaskHandle 0\000"
 11165      5544455F 
 11165      78546173 
 11165      6B476574 
 11165      43757272 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 295


 11166              	.LASF38:
 11167 55e3 74736B54 		.ascii	"tskTaskControlBlock\000"
 11167      61736B43 
 11167      6F6E7472 
 11167      6F6C426C 
 11167      6F636B00 
 11168              	.LASF61:
 11169 55f7 7854696D 		.ascii	"xTimeIncrement\000"
 11169      65496E63 
 11169      72656D65 
 11169      6E7400
 11170              	.LASF417:
 11171 5606 5F5F4143 		.ascii	"__ACCUM_MIN__ (-0X1P15K-0X1P15K)\000"
 11171      43554D5F 
 11171      4D494E5F 
 11171      5F20282D 
 11171      30583150 
 11172              	.LASF435:
 11173 5627 5F5F4C4C 		.ascii	"__LLACCUM_FBIT__ 31\000"
 11173      41434355 
 11173      4D5F4642 
 11173      49545F5F 
 11173      20333100 
 11174              	.LASF65:
 11175 563b 76546173 		.ascii	"vTaskDelay\000"
 11175      6B44656C 
 11175      617900
 11176              	.LASF553:
 11177 5646 5F414E44 		.ascii	"_AND ,\000"
 11177      202C00
 11178              	.LASF869:
 11179 564d 706F7274 		.ascii	"portBYTE_ALIGNMENT_MASK ( 0x0007 )\000"
 11179      42595445 
 11179      5F414C49 
 11179      474E4D45 
 11179      4E545F4D 
 11180              	.LASF231:
 11181 5670 5F5F494E 		.ascii	"__INT_LEAST32_TYPE__ long int\000"
 11181      545F4C45 
 11181      41535433 
 11181      325F5459 
 11181      50455F5F 
 11182              	.LASF27:
 11183 568e 784C6973 		.ascii	"xList\000"
 11183      7400
 11184              	.LASF936:
 11185 5694 74726163 		.ascii	"traceTIMER_CREATE_FAILED() \000"
 11185      6554494D 
 11185      45525F43 
 11185      52454154 
 11185      455F4641 
 11186              	.LASF376:
 11187 56b0 5F5F4652 		.ascii	"__FRACT_IBIT__ 0\000"
 11187      4143545F 
 11187      49424954 
 11187      5F5F2030 
 11187      00
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 296


 11188              	.LASF871:
 11189 56c1 4D50555F 		.ascii	"MPU_WRAPPERS_H \000"
 11189      57524150 
 11189      50455253 
 11189      5F482000 
 11190              	.LASF206:
 11191 56d1 5F5F4F52 		.ascii	"__ORDER_LITTLE_ENDIAN__ 1234\000"
 11191      4445525F 
 11191      4C495454 
 11191      4C455F45 
 11191      4E444941 
 11192              	.LASF843:
 11193 56ee 636F6E66 		.ascii	"configMAX_SYSCALL_INTERRUPT_PRIORITY 191\000"
 11193      69674D41 
 11193      585F5359 
 11193      5343414C 
 11193      4C5F494E 
 11194              	.LASF351:
 11195 5717 5F5F4445 		.ascii	"__DEC64_MANT_DIG__ 16\000"
 11195      4336345F 
 11195      4D414E54 
 11195      5F444947 
 11195      5F5F2031 
 11196              	.LASF6:
 11197 572d 6C6F6E67 		.ascii	"long long unsigned int\000"
 11197      206C6F6E 
 11197      6720756E 
 11197      7369676E 
 11197      65642069 
 11198              	.LASF669:
 11199 5744 5F524545 		.ascii	"_REENT_GETDATE_ERR_P(ptr) (&((ptr)->_misc->_getdate"
 11199      4E545F47 
 11199      45544441 
 11199      54455F45 
 11199      52525F50 
 11200 5777 5F657272 		.ascii	"_err))\000"
 11200      292900
 11201              	.LASF305:
 11202 577e 5F5F464C 		.ascii	"__FLT_MIN_10_EXP__ (-37)\000"
 11202      545F4D49 
 11202      4E5F3130 
 11202      5F455850 
 11202      5F5F2028 
 11203              	.LASF431:
 11204 5797 5F5F554C 		.ascii	"__ULACCUM_IBIT__ 32\000"
 11204      41434355 
 11204      4D5F4942 
 11204      49545F5F 
 11204      20333200 
 11205              	.LASF836:
 11206 57ab 494E434C 		.ascii	"INCLUDE_vTaskDelete 1\000"
 11206      5544455F 
 11206      76546173 
 11206      6B44656C 
 11206      65746520 
 11207              	.LASF920:
 11208 57c1 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR(pxQueue) \000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 297


 11208      65515545 
 11208      55455F53 
 11208      454E445F 
 11208      46524F4D 
 11209              	.LASF213:
 11210 57e4 5F5F5054 		.ascii	"__PTRDIFF_TYPE__ int\000"
 11210      52444946 
 11210      465F5459 
 11210      50455F5F 
 11210      20696E74 
 11211              	.LASF584:
 11212 57f9 5F53495A 		.ascii	"_SIZE_T_DEFINED \000"
 11212      455F545F 
 11212      44454649 
 11212      4E454420 
 11212      00
 11213              	.LASF451:
 11214 580a 5F5F4451 		.ascii	"__DQ_FBIT__ 63\000"
 11214      5F464249 
 11214      545F5F20 
 11214      363300
 11215              	.LASF406:
 11216 5819 5F5F5341 		.ascii	"__SACCUM_IBIT__ 8\000"
 11216      4343554D 
 11216      5F494249 
 11216      545F5F20 
 11216      3800
 11217              	.LASF950:
 11218 582b 6C697374 		.ascii	"listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( pxLis"
 11218      5345545F 
 11218      4C495354 
 11218      5F495445 
 11218      4D5F4F57 
 11219 585e 74497465 		.ascii	"tItem )->pvOwner = ( void * ) ( pxOwner )\000"
 11219      6D20292D 
 11219      3E70764F 
 11219      776E6572 
 11219      203D2028 
 11220              	.LASF904:
 11221 5888 74726163 		.ascii	"traceMOVED_TASK_TO_READY_STATE(pxTCB) \000"
 11221      654D4F56 
 11221      45445F54 
 11221      41534B5F 
 11221      544F5F52 
 11222              	.LASF684:
 11223 58af 5F5F5054 		.ascii	"__PTRDIFF_T \000"
 11223      52444946 
 11223      465F5420 
 11223      00
 11224              	.LASF458:
 11225 58bc 5F5F5548 		.ascii	"__UHQ_IBIT__ 0\000"
 11225      515F4942 
 11225      49545F5F 
 11225      203000
 11226              	.LASF884:
 11227 58cb 706F7274 		.ascii	"portCRITICAL_NESTING_IN_TCB 0\000"
 11227      43524954 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 298


 11227      4943414C 
 11227      5F4E4553 
 11227      54494E47 
 11228              	.LASF488:
 11229 58e9 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1\000"
 11229      435F4841 
 11229      56455F53 
 11229      594E435F 
 11229      434F4D50 
 11230              	.LASF238:
 11231 590e 5F5F494E 		.ascii	"__INT_FAST16_TYPE__ int\000"
 11231      545F4641 
 11231      53543136 
 11231      5F545950 
 11231      455F5F20 
 11232              	.LASF939:
 11233 5926 74726163 		.ascii	"traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMes"
 11233      6554494D 
 11233      45525F43 
 11233      4F4D4D41 
 11233      4E445F52 
 11234 5959 73616765 		.ascii	"sageValue) \000"
 11234      56616C75 
 11234      65292000 
 11235              	.LASF407:
 11236 5965 5F5F5341 		.ascii	"__SACCUM_MIN__ (-0X1P7HK-0X1P7HK)\000"
 11236      4343554D 
 11236      5F4D494E 
 11236      5F5F2028 
 11236      2D305831 
 11237              	.LASF393:
 11238 5987 5F5F554C 		.ascii	"__ULFRACT_MAX__ 0XFFFFFFFFP-32ULR\000"
 11238      46524143 
 11238      545F4D41 
 11238      585F5F20 
 11238      30584646 
 11239              	.LASF234:
 11240 59a9 5F5F5549 		.ascii	"__UINT_LEAST16_TYPE__ short unsigned int\000"
 11240      4E545F4C 
 11240      45415354 
 11240      31365F54 
 11240      5950455F 
 11241              	.LASF428:
 11242 59d2 5F5F4C41 		.ascii	"__LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK\000"
 11242      4343554D 
 11242      5F4D4158 
 11242      5F5F2030 
 11242      58374646 
 11243              	.LASF218:
 11244 59fa 5F5F4348 		.ascii	"__CHAR16_TYPE__ short unsigned int\000"
 11244      41523136 
 11244      5F545950 
 11244      455F5F20 
 11244      73686F72 
 11245              	.LASF176:
 11246 5a1d 706F7274 		.ascii	"portRESET_READY_PRIORITY(uxPriority,uxTopReadyPrior"
 11246      52455345 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 299


 11246      545F5245 
 11246      4144595F 
 11246      5052494F 
 11247 5a50 69747929 		.ascii	"ity) \000"
 11247      2000
 11248              	.LASF283:
 11249 5a56 5F5F5549 		.ascii	"__UINT_LEAST16_MAX__ 65535\000"
 11249      4E545F4C 
 11249      45415354 
 11249      31365F4D 
 11249      41585F5F 
 11250              	.LASF821:
 11251 5a71 636F6E66 		.ascii	"configTICK_RATE_HZ ( ( portTickType ) 1000 )\000"
 11251      69675449 
 11251      434B5F52 
 11251      4154455F 
 11251      485A2028 
 11252              	.LASF463:
 11253 5a9e 5F5F5554 		.ascii	"__UTQ_FBIT__ 128\000"
 11253      515F4642 
 11253      49545F5F 
 11253      20313238 
 11253      00
 11254              	.LASF111:
 11255 5aaf 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11255      64644375 
 11255      7272656E 
 11255      74546173 
 11255      6B546F44 
 11256              	.LASF809:
 11257 5ace 70644641 		.ascii	"pdFAIL ( 0 )\000"
 11257      494C2028 
 11257      20302029 
 11257      00
 11258              	.LASF852:
 11259 5adb 706F7274 		.ascii	"portBASE_TYPE long\000"
 11259      42415345 
 11259      5F545950 
 11259      45206C6F 
 11259      6E6700
 11260              	.LASF195:
 11261 5aee 5F5F4649 		.ascii	"__FINITE_MATH_ONLY__ 0\000"
 11261      4E495445 
 11261      5F4D4154 
 11261      485F4F4E 
 11261      4C595F5F 
 11262              	.LASF16:
 11263 5b05 70785072 		.ascii	"pxPrevious\000"
 11263      6576696F 
 11263      757300
 11264              	.LASF719:
 11265 5b10 5F5F636C 		.ascii	"__clock_t_defined \000"
 11265      6F636B5F 
 11265      745F6465 
 11265      66696E65 
 11265      642000
 11266              	.LASF59:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 300


 11267 5b23 76546173 		.ascii	"vTaskDelayUntil\000"
 11267      6B44656C 
 11267      6179556E 
 11267      74696C00 
 11268              	.LASF959:
 11269 5b33 6C697374 		.ascii	"listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( pxLi"
 11269      49535F43 
 11269      4F4E5441 
 11269      494E4544 
 11269      5F574954 
 11270 5b66 73744974 		.ascii	"stItem )->pvContainer == ( void * ) ( pxList ) )\000"
 11270      656D2029 
 11270      2D3E7076 
 11270      436F6E74 
 11270      61696E65 
 11271              	.LASF80:
 11272 5b97 76546173 		.ascii	"vTaskResume\000"
 11272      6B526573 
 11272      756D6500 
 11273              	.LASF699:
 11274 5ba3 5F574348 		.ascii	"_WCHAR_T_DEFINED \000"
 11274      41525F54 
 11274      5F444546 
 11274      494E4544 
 11274      2000
 11275              	.LASF433:
 11276 5bb5 5F5F554C 		.ascii	"__ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK\000"
 11276      41434355 
 11276      4D5F4D41 
 11276      585F5F20 
 11276      30584646 
 11277              	.LASF774:
 11278 5bdf 5F5F5641 		.ascii	"__VALIST __gnuc_va_list\000"
 11278      4C495354 
 11278      205F5F67 
 11278      6E75635F 
 11278      76615F6C 
 11279              	.LASF648:
 11280 5bf7 5F524545 		.ascii	"_REENT_RAND_NEXT(ptr) ((ptr)->_r48->_rand_next)\000"
 11280      4E545F52 
 11280      414E445F 
 11280      4E455854 
 11280      28707472 
 11281              	.LASF392:
 11282 5c27 5F5F554C 		.ascii	"__ULFRACT_MIN__ 0.0ULR\000"
 11282      46524143 
 11282      545F4D49 
 11282      4E5F5F20 
 11282      302E3055 
 11283              	.LASF452:
 11284 5c3e 5F5F4451 		.ascii	"__DQ_IBIT__ 0\000"
 11284      5F494249 
 11284      545F5F20 
 11284      3000
 11285              	.LASF735:
 11286 5c4c 5F5F6E65 		.ascii	"__need_inttypes\000"
 11286      65645F69 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 301


 11286      6E747479 
 11286      70657300 
 11287              	.LASF223:
 11288 5c5c 5F5F494E 		.ascii	"__INT32_TYPE__ long int\000"
 11288      5433325F 
 11288      54595045 
 11288      5F5F206C 
 11288      6F6E6720 
 11289              	.LASF109:
 11290 5c74 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11290      6865636B 
 11290      5461736B 
 11290      73576169 
 11290      74696E67 
 11291              	.LASF579:
 11292 5c94 5F545F53 		.ascii	"_T_SIZE \000"
 11292      495A4520 
 11292      00
 11293              	.LASF621:
 11294 5c9d 5F415445 		.ascii	"_ATEXIT_SIZE 32\000"
 11294      5849545F 
 11294      53495A45 
 11294      20333200 
 11295              	.LASF582:
 11296 5cad 5F425344 		.ascii	"_BSD_SIZE_T_ \000"
 11296      5F53495A 
 11296      455F545F 
 11296      2000
 11297              	.LASF255:
 11298 5cbb 5F5F5749 		.ascii	"__WINT_MAX__ 4294967295U\000"
 11298      4E545F4D 
 11298      41585F5F 
 11298      20343239 
 11298      34393637 
 11299              	.LASF148:
 11300 5cd4 5F535444 		.ascii	"_STDIO_H_ \000"
 11300      494F5F48 
 11300      5F2000
 11301              	.LASF279:
 11302 5cdf 5F5F494E 		.ascii	"__INT_LEAST64_MAX__ 9223372036854775807LL\000"
 11302      545F4C45 
 11302      41535436 
 11302      345F4D41 
 11302      585F5F20 
 11303              	.LASF60:
 11304 5d09 70785072 		.ascii	"pxPreviousWakeTime\000"
 11304      6576696F 
 11304      75735761 
 11304      6B655469 
 11304      6D6500
 11305              	.LASF694:
 11306 5d1c 5F545F57 		.ascii	"_T_WCHAR \000"
 11306      43484152 
 11306      2000
 11307              	.LASF680:
 11308 5d26 5F5F5354 		.ascii	"__STDDEF_H__ \000"
 11308      44444546 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 302


 11308      5F485F5F 
 11308      2000
 11309              	.LASF166:
 11310 5d34 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE\000"
 11310      57524150 
 11310      50455253 
 11310      5F494E43 
 11310      4C554445 
 11311              	.LASF687:
 11312 5d58 5F5F5F69 		.ascii	"___int_ptrdiff_t_h \000"
 11312      6E745F70 
 11312      74726469 
 11312      66665F74 
 11312      5F682000 
 11313              	.LASF258:
 11314 5d6c 5F5F5349 		.ascii	"__SIZE_MAX__ 4294967295U\000"
 11314      5A455F4D 
 11314      41585F5F 
 11314      20343239 
 11314      34393637 
 11315              	.LASF713:
 11316 5d85 5F434C4F 		.ascii	"_CLOCKID_T_ unsigned long\000"
 11316      434B4944 
 11316      5F545F20 
 11316      756E7369 
 11316      676E6564 
 11317              	.LASF667:
 11318 5d9f 5F524545 		.ascii	"_REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_misc->_wcsrtom"
 11318      4E545F57 
 11318      43535254 
 11318      4F4D4253 
 11318      5F535441 
 11319 5dd2 62735F73 		.ascii	"bs_state)\000"
 11319      74617465 
 11319      2900
 11320              	.LASF467:
 11321 5ddc 5F5F5341 		.ascii	"__SA_FBIT__ 15\000"
 11321      5F464249 
 11321      545F5F20 
 11321      313500
 11322              	.LASF702:
 11323 5deb 5F5F494E 		.ascii	"__INT_WCHAR_T_H \000"
 11323      545F5743 
 11323      4841525F 
 11323      545F4820 
 11323      00
 11324              	.LASF566:
 11325 5dfc 5F434153 		.ascii	"_CAST_VOID (void)\000"
 11325      545F564F 
 11325      49442028 
 11325      766F6964 
 11325      2900
 11326              	.LASF520:
 11327 5e0e 5F5F454C 		.ascii	"__ELF__ 1\000"
 11327      465F5F20 
 11327      3100
 11328              	.LASF511:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 303


 11329 5e18 5F5F5448 		.ascii	"__THUMBEL__ 1\000"
 11329      554D4245 
 11329      4C5F5F20 
 11329      3100
 11330              	.LASF19:
 11331 5e26 784C6973 		.ascii	"xListItem\000"
 11331      74497465 
 11331      6D00
 11332              	.LASF135:
 11333 5e30 7578546F 		.ascii	"uxTopReadyPriority\000"
 11333      70526561 
 11333      64795072 
 11333      696F7269 
 11333      747900
 11334              	.LASF446:
 11335 5e43 5F5F5151 		.ascii	"__QQ_IBIT__ 0\000"
 11335      5F494249 
 11335      545F5F20 
 11335      3000
 11336              	.LASF510:
 11337 5e51 5F5F4152 		.ascii	"__ARMEL__ 1\000"
 11337      4D454C5F 
 11337      5F203100 
 11338              	.LASF696:
 11339 5e5d 5F574348 		.ascii	"_WCHAR_T_ \000"
 11339      41525F54 
 11339      5F2000
 11340              	.LASF917:
 11341 5e68 74726163 		.ascii	"traceQUEUE_RECEIVE(pxQueue) \000"
 11341      65515545 
 11341      55455F52 
 11341      45434549 
 11341      56452870 
 11342              	.LASF635:
 11343 5e85 5F5F7265 		.ascii	"__reent_assert(x) ((void)0)\000"
 11343      656E745F 
 11343      61737365 
 11343      72742878 
 11343      29202828 
 11344              	.LASF175:
 11345 5ea1 7461736B 		.ascii	"taskRESET_READY_PRIORITY(uxPriority) \000"
 11345      52455345 
 11345      545F5245 
 11345      4144595F 
 11345      5052494F 
 11346              	.LASF63:
 11347 5ec7 78416C72 		.ascii	"xAlreadyYielded\000"
 11347      65616479 
 11347      5969656C 
 11347      64656400 
 11348              	.LASF261:
 11349 5ed7 5F5F5549 		.ascii	"__UINTMAX_MAX__ 18446744073709551615ULL\000"
 11349      4E544D41 
 11349      585F4D41 
 11349      585F5F20 
 11349      31383434 
 11350              	.LASF217:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 304


 11351 5eff 5F5F5549 		.ascii	"__UINTMAX_TYPE__ long long unsigned int\000"
 11351      4E544D41 
 11351      585F5459 
 11351      50455F5F 
 11351      206C6F6E 
 11352              	.LASF554:
 11353 5f27 5F4E4F41 		.ascii	"_NOARGS void\000"
 11353      52475320 
 11353      766F6964 
 11353      00
 11354              	.LASF913:
 11355 5f34 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE() \000"
 11355      65435245 
 11355      4154455F 
 11355      434F554E 
 11355      54494E47 
 11356              	.LASF657:
 11357 5f56 5F524545 		.ascii	"_REENT_TM(ptr) ((ptr)->_localtime_buf)\000"
 11357      4E545F54 
 11357      4D287074 
 11357      72292028 
 11357      28707472 
 11358              	.LASF966:
 11359 5f7d 7461736B 		.ascii	"taskEXIT_CRITICAL() portEXIT_CRITICAL()\000"
 11359      45584954 
 11359      5F435249 
 11359      54494341 
 11359      4C282920 
 11360              	.LASF235:
 11361 5fa5 5F5F5549 		.ascii	"__UINT_LEAST32_TYPE__ long unsigned int\000"
 11361      4E545F4C 
 11361      45415354 
 11361      33325F54 
 11361      5950455F 
 11362              	.LASF172:
 11363 5fcd 74736B53 		.ascii	"tskSUSPENDED_CHAR ( ( signed char ) 'S' )\000"
 11363      55535045 
 11363      4E444544 
 11363      5F434841 
 11363      52202820 
 11364              	.LASF186:
 11365 5ff7 5F5F474E 		.ascii	"__GNUC_MINOR__ 7\000"
 11365      55435F4D 
 11365      494E4F52 
 11365      5F5F2037 
 11365      00
 11366              	.LASF627:
 11367 6008 5F52414E 		.ascii	"_RAND48_MULT_1 (0xdeec)\000"
 11367      4434385F 
 11367      4D554C54 
 11367      5F312028 
 11367      30786465 
 11368              	.LASF216:
 11369 6020 5F5F494E 		.ascii	"__INTMAX_TYPE__ long long int\000"
 11369      544D4158 
 11369      5F545950 
 11369      455F5F20 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 305


 11369      6C6F6E67 
 11370              	.LASF495:
 11371 603e 5F5F4743 		.ascii	"__GCC_ATOMIC_INT_LOCK_FREE 2\000"
 11371      435F4154 
 11371      4F4D4943 
 11371      5F494E54 
 11371      5F4C4F43 
 11372              	.LASF92:
 11373 605b 70785465 		.ascii	"pxTemp\000"
 11373      6D7000
 11374              	.LASF623:
 11375 6062 5F52414E 		.ascii	"_RAND48_SEED_0 (0x330e)\000"
 11375      4434385F 
 11375      53454544 
 11375      5F302028 
 11375      30783333 
 11376              	.LASF367:
 11377 607a 5F5F5346 		.ascii	"__SFRACT_MIN__ (-0.5HR-0.5HR)\000"
 11377      52414354 
 11377      5F4D494E 
 11377      5F5F2028 
 11377      2D302E35 
 11378              	.LASF620:
 11379 6098 5F5F4C6F 		.ascii	"__Long long\000"
 11379      6E67206C 
 11379      6F6E6700 
 11380              	.LASF589:
 11381 60a4 5F53495A 		.ascii	"_SIZET_ \000"
 11381      45545F20 
 11381      00
 11382              	.LASF849:
 11383 60ad 706F7274 		.ascii	"portLONG long\000"
 11383      4C4F4E47 
 11383      206C6F6E 
 11383      6700
 11384              	.LASF158:
 11385 60bb 5F535444 		.ascii	"_STDLIB_H_ \000"
 11385      4C49425F 
 11385      485F2000 
 11386              	.LASF329:
 11387 60c7 5F5F4442 		.ascii	"__DBL_HAS_QUIET_NAN__ 1\000"
 11387      4C5F4841 
 11387      535F5155 
 11387      4945545F 
 11387      4E414E5F 
 11388              	.LASF52:
 11389 60df 70757853 		.ascii	"puxStackBuffer\000"
 11389      7461636B 
 11389      42756666 
 11389      657200
 11390              	.LASF67:
 11391 60ee 78546173 		.ascii	"xTaskGenericCreate\000"
 11391      6B47656E 
 11391      65726963 
 11391      43726561 
 11391      746500
 11392              	.LASF973:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 306


 11393 6101 78546173 		.ascii	"xTaskCreateRestricted(x,pxCreatedTask) xTaskGeneric"
 11393      6B437265 
 11393      61746552 
 11393      65737472 
 11393      69637465 
 11394 6134 43726561 		.ascii	"Create( ((x)->pvTaskCode), ((x)->pcName), ((x)->usS"
 11394      74652820 
 11394      28287829 
 11394      2D3E7076 
 11394      5461736B 
 11395 6167 7461636B 		.ascii	"tackDepth), ((x)->pvParameters), ((x)->uxPriority),"
 11395      44657074 
 11395      68292C20 
 11395      28287829 
 11395      2D3E7076 
 11396 619a 20287078 		.ascii	" (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xReg"
 11396      43726561 
 11396      74656454 
 11396      61736B29 
 11396      2C202828 
 11397 61cd 696F6E73 		.ascii	"ions) )\000"
 11397      29202900 
 11398              	.LASF398:
 11399 61d5 5F5F4C4C 		.ascii	"__LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR\000"
 11399      46524143 
 11399      545F4D41 
 11399      585F5F20 
 11399      30583746 
 11400              	.LASF178:
 11401 61ff 70727643 		.ascii	"prvCheckDelayedTasks() { portTickType xItemValue; i"
 11401      6865636B 
 11401      44656C61 
 11401      79656454 
 11401      61736B73 
 11402 6232 66282078 		.ascii	"f( xTickCount >= xNextTaskUnblockTime ) { for( ;; )"
 11402      5469636B 
 11402      436F756E 
 11402      74203E3D 
 11402      20784E65 
 11403 6265 207B2069 		.ascii	" { if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pd"
 11403      6628206C 
 11403      6973744C 
 11403      4953545F 
 11403      49535F45 
 11404 6298 46414C53 		.ascii	"FALSE ) { xNextTaskUnblockTime = portMAX_DELAY; bre"
 11404      45202920 
 11404      7B20784E 
 11404      65787454 
 11404      61736B55 
 11405 62cb 616B3B20 		.ascii	"ak; } else { pxTCB = ( tskTCB * ) listGET_OWNER_OF_"
 11405      7D20656C 
 11405      7365207B 
 11405      20707854 
 11405      4342203D 
 11406 62fe 48454144 		.ascii	"HEAD_ENTRY( pxDelayedTaskList ); xItemValue = listG"
 11406      5F454E54 
 11406      52592820 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 307


 11406      70784465 
 11406      6C617965 
 11407 6331 45545F4C 		.ascii	"ET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );"
 11407      4953545F 
 11407      4954454D 
 11407      5F56414C 
 11407      55452820 
 11408 6364 20696628 		.ascii	" if( xTickCount < xItemValue ) { xNextTaskUnblockTi"
 11408      20785469 
 11408      636B436F 
 11408      756E7420 
 11408      3C207849 
 11409 6397 6D65203D 		.ascii	"me = xItemValue; break; } uxListRemove( &( pxTCB->x"
 11409      20784974 
 11409      656D5661 
 11409      6C75653B 
 11409      20627265 
 11410 63ca 47656E65 		.ascii	"GenericListItem ) ); if( pxTCB->xEventListItem.pvCo"
 11410      7269634C 
 11410      69737449 
 11410      74656D20 
 11410      2920293B 
 11411 63fd 6E746169 		.ascii	"ntainer != NULL ) { uxListRemove( &( pxTCB->xEventL"
 11411      6E657220 
 11411      213D204E 
 11411      554C4C20 
 11411      29207B20 
 11412 6430 69737449 		.ascii	"istItem ) ); } prvAddTaskToReadyQueue( pxTCB ); } }"
 11412      74656D20 
 11412      2920293B 
 11412      207D2070 
 11412      72764164 
 11413 6463 207D207D 		.ascii	" } }\000"
 11413      00
 11414              	.LASF114:
 11415 6468 70756353 		.ascii	"pucStackByte\000"
 11415      7461636B 
 11415      42797465 
 11415      00
 11416              	.LASF257:
 11417 6475 5F5F5054 		.ascii	"__PTRDIFF_MAX__ 2147483647\000"
 11417      52444946 
 11417      465F4D41 
 11417      585F5F20 
 11417      32313437 
 11418              	.LASF769:
 11419 6490 7374646F 		.ascii	"stdout (_REENT->_stdout)\000"
 11419      75742028 
 11419      5F524545 
 11419      4E542D3E 
 11419      5F737464 
 11420              	.LASF177:
 11421 64a9 70727641 		.ascii	"prvAddTaskToReadyQueue(pxTCB) traceMOVED_TASK_TO_RE"
 11421      64645461 
 11421      736B546F 
 11421      52656164 
 11421      79517565 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 308


 11422 64dc 4144595F 		.ascii	"ADY_STATE( pxTCB ) taskRECORD_READY_PRIORITY( ( pxT"
 11422      53544154 
 11422      45282070 
 11422      78544342 
 11422      20292074 
 11423 650f 43422029 		.ascii	"CB )->uxPriority ); vListInsertEnd( ( xList * ) &( "
 11423      2D3E7578 
 11423      5072696F 
 11423      72697479 
 11423      20293B20 
 11424 6542 70785265 		.ascii	"pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( "
 11424      61647954 
 11424      61736B73 
 11424      4C697374 
 11424      735B2028 
 11425 6575 70785443 		.ascii	"pxTCB )->xGenericListItem ) )\000"
 11425      4220292D 
 11425      3E784765 
 11425      6E657269 
 11425      634C6973 
 11426              	.LASF674:
 11427 6593 5F474C4F 		.ascii	"_GLOBAL_REENT _global_impure_ptr\000"
 11427      42414C5F 
 11427      5245454E 
 11427      54205F67 
 11427      6C6F6261 
 11428              	.LASF246:
 11429 65b4 5F5F5549 		.ascii	"__UINTPTR_TYPE__ unsigned int\000"
 11429      4E545054 
 11429      525F5459 
 11429      50455F5F 
 11429      20756E73 
 11430              	.LASF933:
 11431 65d2 74726163 		.ascii	"traceTASK_RESUME_FROM_ISR(pxTaskToResume) \000"
 11431      65544153 
 11431      4B5F5245 
 11431      53554D45 
 11431      5F46524F 
 11432              	.LASF804:
 11433 65fd 7374726E 		.ascii	"strnicmp strncasecmp\000"
 11433      69636D70 
 11433      20737472 
 11433      6E636173 
 11433      65636D70 
 11434              	.LASF481:
 11435 6612 5F5F5245 		.ascii	"__REGISTER_PREFIX__ \000"
 11435      47495354 
 11435      45525F50 
 11435      52454649 
 11435      585F5F20 
 11436              	.LASF364:
 11437 6627 5F5F4445 		.ascii	"__DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000"
 11437      43313238 
 11437      5F535542 
 11437      4E4F524D 
 11437      414C5F4D 
 11438 665a 30303030 		.ascii	"000000001E-6143DL\000"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 309


 11438      30303030 
 11438      31452D36 
 11438      31343344 
 11438      4C00
 11439              	.LASF317:
 11440 666c 5F5F4442 		.ascii	"__DBL_DIG__ 15\000"
 11440      4C5F4449 
 11440      475F5F20 
 11440      313500
 11441              	.LASF394:
 11442 667b 5F5F554C 		.ascii	"__ULFRACT_EPSILON__ 0x1P-32ULR\000"
 11442      46524143 
 11442      545F4550 
 11442      53494C4F 
 11442      4E5F5F20 
 11443              	.LASF897:
 11444 669a 74726163 		.ascii	"traceEND() \000"
 11444      65454E44 
 11444      28292000 
 11445              	.LASF736:
 11446 66a6 5F4E4557 		.ascii	"_NEWLIB_STDIO_H \000"
 11446      4C49425F 
 11446      53544449 
 11446      4F5F4820 
 11446      00
 11447              	.LASF170:
 11448 66b7 74736B52 		.ascii	"tskREADY_CHAR ( ( signed char ) 'R' )\000"
 11448      45414459 
 11448      5F434841 
 11448      52202820 
 11448      28207369 
 11449              	.LASF668:
 11450 66dd 5F524545 		.ascii	"_REENT_L64A_BUF(ptr) ((ptr)->_misc->_l64a_buf)\000"
 11450      4E545F4C 
 11450      3634415F 
 11450      42554628 
 11450      70747229 
 11451              	.LASF203:
 11452 670c 5F5F5349 		.ascii	"__SIZEOF_SIZE_T__ 4\000"
 11452      5A454F46 
 11452      5F53495A 
 11452      455F545F 
 11452      5F203400 
 11453              	.LASF126:
 11454 6720 70784465 		.ascii	"pxDelayedTaskList\000"
 11454      6C617965 
 11454      64546173 
 11454      6B4C6973 
 11454      7400
 11455              	.LASF23:
 11456 6732 784C4953 		.ascii	"xLIST\000"
 11456      5400
 11457              	.LASF228:
 11458 6738 5F5F5549 		.ascii	"__UINT64_TYPE__ long long unsigned int\000"
 11458      4E543634 
 11458      5F545950 
 11458      455F5F20 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 310


 11458      6C6F6E67 
 11459              	.LASF361:
 11460 675f 5F5F4445 		.ascii	"__DEC128_MIN__ 1E-6143DL\000"
 11460      43313238 
 11460      5F4D494E 
 11460      5F5F2031 
 11460      452D3631 
 11461              	.LASF280:
 11462 6778 5F5F494E 		.ascii	"__INT64_C(c) c ## LL\000"
 11462      5436345F 
 11462      43286329 
 11462      20632023 
 11462      23204C4C 
 11463              	.LASF277:
 11464 678d 5F5F494E 		.ascii	"__INT_LEAST32_MAX__ 2147483647L\000"
 11464      545F4C45 
 11464      41535433 
 11464      325F4D41 
 11464      585F5F20 
 11465              	.LASF537:
 11466 67ad 48415645 		.ascii	"HAVE_INITFINI_ARRAY 1\000"
 11466      5F494E49 
 11466      5446494E 
 11466      495F4152 
 11466      52415920 
 11467              	.LASF525:
 11468 67c3 4743435F 		.ascii	"GCC_ARMCM3 1\000"
 11468      41524D43 
 11468      4D332031 
 11468      00
 11469              	.LASF548:
 11470 67d0 5F484156 		.ascii	"_HAVE_STDC \000"
 11470      455F5354 
 11470      44432000 
 11471              	.LASF730:
 11472 67dc 46445F5A 		.ascii	"FD_ZERO(p) (__extension__ (void)({ size_t __i; char"
 11472      45524F28 
 11472      70292028 
 11472      5F5F6578 
 11472      74656E73 
 11473 680f 202A5F5F 		.ascii	" *__tmp = (char *)p; for (__i = 0; __i < sizeof (*("
 11473      746D7020 
 11473      3D202863 
 11473      68617220 
 11473      2A29703B 
 11474 6842 7029293B 		.ascii	"p)); ++__i) *__tmp++ = 0; }))\000"
 11474      202B2B5F 
 11474      5F692920 
 11474      2A5F5F74 
 11474      6D702B2B 
 11475              	.LASF531:
 11476 6860 5F5F4353 		.ascii	"__CS_SOURCERYGXX_REV__ 63\000"
 11476      5F534F55 
 11476      52434552 
 11476      59475858 
 11476      5F524556 
 11477              	.LASF295:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 311


 11478 687a 5F5F5549 		.ascii	"__UINT_FAST32_MAX__ 4294967295U\000"
 11478      4E545F46 
 11478      41535433 
 11478      325F4D41 
 11478      585F5F20 
 11479              	.LASF982:
 11480 689a 7854696D 		.ascii	"xTimerReset(xTimer,xBlockTime) xTimerGenericCommand"
 11480      65725265 
 11480      73657428 
 11480      7854696D 
 11480      65722C78 
 11481 68cd 28202820 		.ascii	"( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount"
 11481      7854696D 
 11481      65722029 
 11481      2C20746D 
 11481      72434F4D 
 11482 6900 28292029 		.ascii	"() ), NULL, ( xBlockTime ) )\000"
 11482      2C204E55 
 11482      4C4C2C20 
 11482      28207842 
 11482      6C6F636B 
 11483              	.LASF807:
 11484 691d 70644641 		.ascii	"pdFALSE ( 0 )\000"
 11484      4C534520 
 11484      28203020 
 11484      2900
 11485              	.LASF338:
 11486 692b 5F5F4C44 		.ascii	"__LDBL_MIN__ 2.2250738585072014e-308L\000"
 11486      424C5F4D 
 11486      494E5F5F 
 11486      20322E32 
 11486      32353037 
 11487              	.LASF416:
 11488 6951 5F5F4143 		.ascii	"__ACCUM_IBIT__ 16\000"
 11488      43554D5F 
 11488      49424954 
 11488      5F5F2031 
 11488      3600
 11489              	.LASF726:
 11490 6963 66645F73 		.ascii	"fd_set _types_fd_set\000"
 11490      6574205F 
 11490      74797065 
 11490      735F6664 
 11490      5F736574 
 11491              	.LASF127:
 11492 6978 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11492      6572666C 
 11492      6F774465 
 11492      6C617965 
 11492      64546173 
 11493              	.LASF270:
 11494 6992 5F5F5549 		.ascii	"__UINT16_MAX__ 65535\000"
 11494      4E543136 
 11494      5F4D4158 
 11494      5F5F2036 
 11494      35353335 
 11495              	.LASF847:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 312


 11496 69a7 706F7274 		.ascii	"portFLOAT float\000"
 11496      464C4F41 
 11496      5420666C 
 11496      6F617400 
 11497              	.LASF940:
 11498 69b7 636F6E66 		.ascii	"configGENERATE_RUN_TIME_STATS 0\000"
 11498      69674745 
 11498      4E455241 
 11498      54455F52 
 11498      554E5F54 
 11499              	.LASF930:
 11500 69d7 74726163 		.ascii	"traceTASK_PRIORITY_SET(pxTask,uxNewPriority) \000"
 11500      65544153 
 11500      4B5F5052 
 11500      494F5249 
 11500      54595F53 
 11501              	.LASF800:
 11502 6a05 5F535452 		.ascii	"_STRING_H_ \000"
 11502      494E475F 
 11502      485F2000 
 11503              	.LASF71:
 11504 6a11 76546173 		.ascii	"vTaskPrioritySet\000"
 11504      6B507269 
 11504      6F726974 
 11504      79536574 
 11504      00
 11505              	.LASF677:
 11506 6a22 5F535444 		.ascii	"_STDDEF_H \000"
 11506      4445465F 
 11506      482000
 11507              	.LASF911:
 11508 6a2d 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE(pxMutex) \000"
 11508      6554414B 
 11508      455F4D55 
 11508      5445585F 
 11508      52454355 
 11509              	.LASF284:
 11510 6a51 5F5F5549 		.ascii	"__UINT16_C(c) c\000"
 11510      4E543136 
 11510      5F432863 
 11510      29206300 
 11511              	.LASF741:
 11512 6a61 5F5F5352 		.ascii	"__SRD 0x0004\000"
 11512      44203078 
 11512      30303034 
 11512      00
 11513              	.LASF478:
 11514 6a6e 5F5F5544 		.ascii	"__UDA_IBIT__ 32\000"
 11514      415F4942 
 11514      49545F5F 
 11514      20333200 
 11515              	.LASF728:
 11516 6a7e 46445F43 		.ascii	"FD_CLR(n,p) ((p)->fds_bits[(n)/NFDBITS] &= ~(1L << "
 11516      4C52286E 
 11516      2C702920 
 11516      28287029 
 11516      2D3E6664 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 313


 11517 6ab1 28286E29 		.ascii	"((n) % NFDBITS)))\000"
 11517      2025204E 
 11517      46444249 
 11517      54532929 
 11517      2900
 11518              	.LASF484:
 11519 6ac3 5F5F4E4F 		.ascii	"__NO_INLINE__ 1\000"
 11519      5F494E4C 
 11519      494E455F 
 11519      5F203100 
 11520              	.LASF189:
 11521 6ad3 5F5F4154 		.ascii	"__ATOMIC_RELAXED 0\000"
 11521      4F4D4943 
 11521      5F52454C 
 11521      41584544 
 11521      203000
 11522              	.LASF570:
 11523 6ae6 5F415454 		.ascii	"_ATTRIBUTE(attrs) __attribute__ (attrs)\000"
 11523      52494255 
 11523      54452861 
 11523      74747273 
 11523      29205F5F 
 11524              	.LASF979:
 11525 6b0e 7854696D 		.ascii	"xTimerStop(xTimer,xBlockTime) xTimerGenericCommand("
 11525      65725374 
 11525      6F702878 
 11525      54696D65 
 11525      722C7842 
 11526 6b41 20282078 		.ascii	" ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xBlockTim"
 11526      54696D65 
 11526      7220292C 
 11526      20746D72 
 11526      434F4D4D 
 11527 6b74 65202920 		.ascii	"e ) )\000"
 11527      2900
 11528              	.LASF672:
 11529 6b7a 5F5F4154 		.ascii	"__ATTRIBUTE_IMPURE_PTR__ \000"
 11529      54524942 
 11529      5554455F 
 11529      494D5055 
 11529      52455F50 
 11530              	.LASF616:
 11531 6b94 5F5F6C6F 		.ascii	"__lock_release_recursive(lock) (_CAST_VOID 0)\000"
 11531      636B5F72 
 11531      656C6561 
 11531      73655F72 
 11531      65637572 
 11532              	.LASF867:
 11533 6bc2 706F7274 		.ascii	"portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPo"
 11533      53555050 
 11533      52455353 
 11533      5F544943 
 11533      4B535F41 
 11534 6bf5 72745375 		.ascii	"rtSuppressTicksAndSleep( xExpectedIdleTime )\000"
 11534      70707265 
 11534      73735469 
 11534      636B7341 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 314


 11534      6E64536C 
 11535              	.LASF72:
 11536 6c22 75784E65 		.ascii	"uxNewPriority\000"
 11536      77507269 
 11536      6F726974 
 11536      7900
 11537              	.LASF626:
 11538 6c30 5F52414E 		.ascii	"_RAND48_MULT_0 (0xe66d)\000"
 11538      4434385F 
 11538      4D554C54 
 11538      5F302028 
 11538      30786536 
 11539              	.LASF640:
 11540 6c48 5F524545 		.ascii	"_REENT_CHECK_RAND48(var) _REENT_CHECK(var, _r48, st"
 11540      4E545F43 
 11540      4845434B 
 11540      5F52414E 
 11540      44343828 
 11541 6c7b 72756374 		.ascii	"ruct _rand48 *, sizeof *((var)->_r48), _REENT_INIT_"
 11541      205F7261 
 11541      6E643438 
 11541      202A2C20 
 11541      73697A65 
 11542 6cae 52414E44 		.ascii	"RAND48((var)))\000"
 11542      34382828 
 11542      76617229 
 11542      292900
 11543              	.LASF845:
 11544 6cbd 504F5254 		.ascii	"PORTMACRO_H \000"
 11544      4D414352 
 11544      4F5F4820 
 11544      00
 11545              	.LASF187:
 11546 6cca 5F5F474E 		.ascii	"__GNUC_PATCHLEVEL__ 2\000"
 11546      55435F50 
 11546      41544348 
 11546      4C455645 
 11546      4C5F5F20 
 11547              	.LASF521:
 11548 6ce0 5F5F5553 		.ascii	"__USES_INITFINI__ 1\000"
 11548      45535F49 
 11548      4E495446 
 11548      494E495F 
 11548      5F203100 
 11549              	.LASF893:
 11550 6cf4 76517565 		.ascii	"vQueueAddToRegistry(xQueue,pcName) \000"
 11550      75654164 
 11550      64546F52 
 11550      65676973 
 11550      74727928 
 11551              	.LASF249:
 11552 6d18 5F5F5348 		.ascii	"__SHRT_MAX__ 32767\000"
 11552      52545F4D 
 11552      41585F5F 
 11552      20333237 
 11552      363700
 11553              	.LASF689:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 315


 11554 6d2b 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 11554      65645F70 
 11554      74726469 
 11554      66665F74 
 11554      00
 11555              	.LASF322:
 11556 6d3c 5F5F4442 		.ascii	"__DBL_DECIMAL_DIG__ 17\000"
 11556      4C5F4445 
 11556      43494D41 
 11556      4C5F4449 
 11556      475F5F20 
 11557              	.LASF685:
 11558 6d53 5F505452 		.ascii	"_PTRDIFF_T_ \000"
 11558      44494646 
 11558      5F545F20 
 11558      00
 11559              	.LASF285:
 11560 6d60 5F5F5549 		.ascii	"__UINT_LEAST32_MAX__ 4294967295UL\000"
 11560      4E545F4C 
 11560      45415354 
 11560      33325F4D 
 11560      41585F5F 
 11561              	.LASF619:
 11562 6d82 5F4E554C 		.ascii	"_NULL 0\000"
 11562      4C203000 
 11563              	.LASF905:
 11564 6d8a 74726163 		.ascii	"traceQUEUE_CREATE(pxNewQueue) \000"
 11564      65515545 
 11564      55455F43 
 11564      52454154 
 11564      45287078 
 11565              	.LASF162:
 11566 6da9 636F6E66 		.ascii	"configUSE_PORT_OPTIMISED_TASK_SELECTION 0\000"
 11566      69675553 
 11566      455F504F 
 11566      52545F4F 
 11566      5054494D 
 11567              	.LASF535:
 11568 6dd3 5F57414E 		.ascii	"_WANT_REGISTER_FINI 1\000"
 11568      545F5245 
 11568      47495354 
 11568      45525F46 
 11568      494E4920 
 11569              	.LASF851:
 11570 6de9 706F7274 		.ascii	"portSTACK_TYPE unsigned portLONG\000"
 11570      53544143 
 11570      4B5F5459 
 11570      50452075 
 11570      6E736967 
 11571              	.LASF140:
 11572 6e0a 784E756D 		.ascii	"xNumOfOverflows\000"
 11572      4F664F76 
 11572      6572666C 
 11572      6F777300 
 11573              	.LASF159:
 11574 6e1a 5F4D4143 		.ascii	"_MACHSTDLIB_H_ \000"
 11574      48535444 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 316


 11574      4C49425F 
 11574      485F2000 
 11575              	.LASF523:
 11576 6e2a 5553455F 		.ascii	"USE_STDPERIPH_DRIVER 1\000"
 11576      53544450 
 11576      45524950 
 11576      485F4452 
 11576      49564552 
 11577              	.LASF251:
 11578 6e41 5F5F4C4F 		.ascii	"__LONG_MAX__ 2147483647L\000"
 11578      4E475F4D 
 11578      41585F5F 
 11578      20323134 
 11578      37343833 
 11579              	.LASF445:
 11580 6e5a 5F5F5151 		.ascii	"__QQ_FBIT__ 7\000"
 11580      5F464249 
 11580      545F5F20 
 11580      3700
 11581              	.LASF759:
 11582 6e68 42554653 		.ascii	"BUFSIZ 1024\000"
 11582      495A2031 
 11582      30323400 
 11583              	.LASF903:
 11584 6e74 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_SEND(pxQueue) \000"
 11584      65424C4F 
 11584      434B494E 
 11584      475F4F4E 
 11584      5F515545 
 11585              	.LASF174:
 11586 6e9a 7461736B 		.ascii	"taskSELECT_HIGHEST_PRIORITY_TASK() { while( listLIS"
 11586      53454C45 
 11586      43545F48 
 11586      49474845 
 11586      53545F50 
 11587 6ecd 545F4953 		.ascii	"T_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriorit"
 11587      5F454D50 
 11587      54592820 
 11587      26282070 
 11587      78526561 
 11588 6f00 79205D20 		.ascii	"y ] ) ) ) { configASSERT( uxTopReadyPriority ); --u"
 11588      29202920 
 11588      29207B20 
 11588      636F6E66 
 11588      69674153 
 11589 6f33 78546F70 		.ascii	"xTopReadyPriority; } listGET_OWNER_OF_NEXT_ENTRY( p"
 11589      52656164 
 11589      79507269 
 11589      6F726974 
 11589      793B207D 
 11590 6f66 78437572 		.ascii	"xCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriori"
 11590      72656E74 
 11590      5443422C 
 11590      20262820 
 11590      70785265 
 11591 6f99 7479205D 		.ascii	"ty ] ) ); }\000"
 11591      20292029 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 317


 11591      3B207D00 
 11592              	.LASF865:
 11593 6fa5 706F7274 		.ascii	"portTASK_FUNCTION_PROTO(vFunction,pvParameters) voi"
 11593      5441534B 
 11593      5F46554E 
 11593      4354494F 
 11593      4E5F5052 
 11594 6fd8 64207646 		.ascii	"d vFunction( void *pvParameters )\000"
 11594      756E6374 
 11594      696F6E28 
 11594      20766F69 
 11594      64202A70 
 11595              	.LASF480:
 11596 6ffa 5F5F5554 		.ascii	"__UTA_IBIT__ 64\000"
 11596      415F4942 
 11596      49545F5F 
 11596      20363400 
 11597              	.LASF441:
 11598 700a 5F5F554C 		.ascii	"__ULLACCUM_IBIT__ 32\000"
 11598      4C414343 
 11598      554D5F49 
 11598      4249545F 
 11598      5F203332 
 11599              	.LASF861:
 11600 701f 706F7274 		.ascii	"portDISABLE_INTERRUPTS() ulPortSetInterruptMask()\000"
 11600      44495341 
 11600      424C455F 
 11600      494E5445 
 11600      52525550 
 11601              	.LASF952:
 11602 7051 6C697374 		.ascii	"listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( pxList"
 11602      5345545F 
 11602      4C495354 
 11602      5F495445 
 11602      4D5F5641 
 11603 7084 4974656D 		.ascii	"Item )->xItemValue = ( xValue )\000"
 11603      20292D3E 
 11603      78497465 
 11603      6D56616C 
 11603      7565203D 
 11604              	.LASF404:
 11605 70a4 5F5F554C 		.ascii	"__ULLFRACT_EPSILON__ 0x1P-64ULLR\000"
 11605      4C465241 
 11605      43545F45 
 11605      5053494C 
 11605      4F4E5F5F 
 11606              	.LASF503:
 11607 70c5 5F5F5349 		.ascii	"__SIZEOF_WINT_T__ 4\000"
 11607      5A454F46 
 11607      5F57494E 
 11607      545F545F 
 11607      5F203400 
 11608              	.LASF505:
 11609 70d9 5F5F4152 		.ascii	"__ARM_FEATURE_UNALIGNED 1\000"
 11609      4D5F4645 
 11609      41545552 
 11609      455F554E 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 318


 11609      414C4947 
 11610              	.LASF180:
 11611 70f3 5F5F5354 		.ascii	"__STDC__ 1\000"
 11611      44435F5F 
 11611      203100
 11612              	.LASF559:
 11613 70fe 5F564F49 		.ascii	"_VOID void\000"
 11613      4420766F 
 11613      696400
 11614              	.LASF427:
 11615 7109 5F5F4C41 		.ascii	"__LACCUM_MIN__ (-0X1P31LK-0X1P31LK)\000"
 11615      4343554D 
 11615      5F4D494E 
 11615      5F5F2028 
 11615      2D305831 
 11616              	.LASF751:
 11617 712d 5F5F534F 		.ascii	"__SOFF 0x1000\000"
 11617      46462030 
 11617      78313030 
 11617      3000
 11618              	.LASF442:
 11619 713b 5F5F554C 		.ascii	"__ULLACCUM_MIN__ 0.0ULLK\000"
 11619      4C414343 
 11619      554D5F4D 
 11619      494E5F5F 
 11619      20302E30 
 11620              	.LASF66:
 11621 7154 78546963 		.ascii	"xTicksToDelay\000"
 11621      6B73546F 
 11621      44656C61 
 11621      7900
 11622              	.LASF701:
 11623 7162 5F5F5F69 		.ascii	"___int_wchar_t_h \000"
 11623      6E745F77 
 11623      63686172 
 11623      5F745F68 
 11623      2000
 11624              	.LASF32:
 11625 7174 7854696D 		.ascii	"xTimeOutType\000"
 11625      654F7574 
 11625      54797065 
 11625      00
 11626              	.LASF788:
 11627 7181 4C5F6375 		.ascii	"L_cuserid 9\000"
 11627      73657269 
 11627      64203900 
 11628              	.LASF956:
 11629 718d 6C697374 		.ascii	"listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNum"
 11629      43555252 
 11629      454E545F 
 11629      4C495354 
 11629      5F4C454E 
 11630 71c0 6265724F 		.ascii	"berOfItems )\000"
 11630      66497465 
 11630      6D732029 
 11630      00
 11631              	.LASF799:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 319


 11632 71cd 73747274 		.ascii	"strtodf strtof\000"
 11632      6F646620 
 11632      73747274 
 11632      6F6600
 11633              	.LASF227:
 11634 71dc 5F5F5549 		.ascii	"__UINT32_TYPE__ long unsigned int\000"
 11634      4E543332 
 11634      5F545950 
 11634      455F5F20 
 11634      6C6F6E67 
 11635              	.LASF742:
 11636 71fe 5F5F5357 		.ascii	"__SWR 0x0008\000"
 11636      52203078 
 11636      30303038 
 11636      00
 11637              	.LASF50:
 11638 720b 70765061 		.ascii	"pvParameters\000"
 11638      72616D65 
 11638      74657273 
 11638      00
 11639              	.LASF968:
 11640 7218 7461736B 		.ascii	"taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()\000"
 11640      454E4142 
 11640      4C455F49 
 11640      4E544552 
 11640      52555054 
 11641              	.LASF588:
 11642 7248 5F474343 		.ascii	"_GCC_SIZE_T \000"
 11642      5F53495A 
 11642      455F5420 
 11642      00
 11643              	.LASF868:
 11644 7255 706F7274 		.ascii	"portNOP() \000"
 11644      4E4F5028 
 11644      292000
 11645              	.LASF402:
 11646 7260 5F5F554C 		.ascii	"__ULLFRACT_MIN__ 0.0ULLR\000"
 11646      4C465241 
 11646      43545F4D 
 11646      494E5F5F 
 11646      20302E30 
 11647              	.LASF693:
 11648 7279 5F545F57 		.ascii	"_T_WCHAR_ \000"
 11648      43484152 
 11648      5F2000
 11649              	.LASF718:
 11650 7284 5F425344 		.ascii	"_BSDTYPES_DEFINED \000"
 11650      54595045 
 11650      535F4445 
 11650      46494E45 
 11650      442000
 11651              	.LASF729:
 11652 7297 46445F49 		.ascii	"FD_ISSET(n,p) ((p)->fds_bits[(n)/NFDBITS] & (1L << "
 11652      53534554 
 11652      286E2C70 
 11652      29202828 
 11652      70292D3E 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 320


 11653 72ca 28286E29 		.ascii	"((n) % NFDBITS)))\000"
 11653      2025204E 
 11653      46444249 
 11653      54532929 
 11653      2900
 11654              	.LASF196:
 11655 72dc 5F5F5349 		.ascii	"__SIZEOF_INT__ 4\000"
 11655      5A454F46 
 11655      5F494E54 
 11655      5F5F2034 
 11655      00
 11656              	.LASF705:
 11657 72ed 5F425344 		.ascii	"_BSD_WCHAR_T_\000"
 11657      5F574348 
 11657      41525F54 
 11657      5F00
 11658              	.LASF139:
 11659 72fb 784D6973 		.ascii	"xMissedYield\000"
 11659      73656459 
 11659      69656C64 
 11659      00
 11660              	.LASF396:
 11661 7308 5F5F4C4C 		.ascii	"__LLFRACT_IBIT__ 0\000"
 11661      46524143 
 11661      545F4942 
 11661      49545F5F 
 11661      203000
 11662              	.LASF541:
 11663 731b 5F524545 		.ascii	"_REENT_SMALL \000"
 11663      4E545F53 
 11663      4D414C4C 
 11663      2000
 11664              	.LASF803:
 11665 7329 7374726E 		.ascii	"strncmpi strncasecmp\000"
 11665      636D7069 
 11665      20737472 
 11665      6E636173 
 11665      65636D70 
 11666              	.LASF634:
 11667 733e 5F524545 		.ascii	"_REENT_INIT_PTR(var) { (var)->_stdin = (__FILE *)&_"
 11667      4E545F49 
 11667      4E49545F 
 11667      50545228 
 11667      76617229 
 11668 7371 5F73665F 		.ascii	"_sf_fake_stdin; (var)->_stdout = (__FILE *)&__sf_fa"
 11668      66616B65 
 11668      5F737464 
 11668      696E3B20 
 11668      28766172 
 11669 73a4 6B655F73 		.ascii	"ke_stdout; (var)->_stderr = (__FILE *)&__sf_fake_st"
 11669      74646F75 
 11669      743B2028 
 11669      76617229 
 11669      2D3E5F73 
 11670 73d7 64657272 		.ascii	"derr; (var)->_errno = 0; (var)->_inc = 0; (var)->_e"
 11670      3B202876 
 11670      6172292D 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 321


 11670      3E5F6572 
 11670      726E6F20 
 11671 740a 6D657267 		.ascii	"mergency = _NULL; (var)->__sdidinit = 0; (var)->_cu"
 11671      656E6379 
 11671      203D205F 
 11671      4E554C4C 
 11671      3B202876 
 11672 743d 7272656E 		.ascii	"rrent_category = 0; (var)->_current_locale = \"C\";"
 11672      745F6361 
 11672      7465676F 
 11672      7279203D 
 11672      20303B20 
 11673 746e 20287661 		.ascii	" (var)->_mp = _NULL; (var)->__cleanup = _NULL; (var"
 11673      72292D3E 
 11673      5F6D7020 
 11673      3D205F4E 
 11673      554C4C3B 
 11674 74a1 292D3E5F 		.ascii	")->_gamma_signgam = 0; (var)->_cvtlen = 0; (var)->_"
 11674      67616D6D 
 11674      615F7369 
 11674      676E6761 
 11674      6D203D20 
 11675 74d4 63767462 		.ascii	"cvtbuf = _NULL; (var)->_r48 = _NULL; (var)->_localt"
 11675      7566203D 
 11675      205F4E55 
 11675      4C4C3B20 
 11675      28766172 
 11676 7507 696D655F 		.ascii	"ime_buf = _NULL; (var)->_asctime_buf = _NULL; (var)"
 11676      62756620 
 11676      3D205F4E 
 11676      554C4C3B 
 11676      20287661 
 11677 753a 2D3E5F73 		.ascii	"->_sig_func = _NULL; (var)->_atexit = _NULL; (var)-"
 11677      69675F66 
 11677      756E6320 
 11677      3D205F4E 
 11677      554C4C3B 
 11678 756d 3E5F6174 		.ascii	">_atexit0._next = _NULL; (var)->_atexit0._ind = 0; "
 11678      65786974 
 11678      302E5F6E 
 11678      65787420 
 11678      3D205F4E 
 11679 75a0 28766172 		.ascii	"(var)->_atexit0._fns[0] = _NULL; (var)->_atexit0._o"
 11679      292D3E5F 
 11679      61746578 
 11679      6974302E 
 11679      5F666E73 
 11680 75d3 6E5F6578 		.ascii	"n_exit_args_ptr = _NULL; (var)->__sglue._next = _NU"
 11680      69745F61 
 11680      7267735F 
 11680      70747220 
 11680      3D205F4E 
 11681 7606 4C4C3B20 		.ascii	"LL; (var)->__sglue._niobs = 0; (var)->__sglue._iobs"
 11681      28766172 
 11681      292D3E5F 
 11681      5F73676C 
 11681      75652E5F 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 322


 11682 7639 203D205F 		.ascii	" = _NULL; (var)->__sf = 0; (var)->_misc = _NULL; (v"
 11682      4E554C4C 
 11682      3B202876 
 11682      6172292D 
 11682      3E5F5F73 
 11683 766c 6172292D 		.ascii	"ar)->_signal_buf = _NULL; }\000"
 11683      3E5F7369 
 11683      676E616C 
 11683      5F627566 
 11683      203D205F 
 11684              	.LASF160:
 11685 7688 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE \000"
 11685      57524150 
 11685      50455253 
 11685      5F494E43 
 11685      4C554445 
 11686              	.LASF53:
 11687 76ad 78526567 		.ascii	"xRegions\000"
 11687      696F6E73 
 11687      00
 11688              	.LASF655:
 11689 76b6 5F524545 		.ascii	"_REENT_MP_FREELIST(ptr) ((ptr)->_mp->_freelist)\000"
 11689      4E545F4D 
 11689      505F4652 
 11689      45454C49 
 11689      53542870 
 11690              	.LASF242:
 11691 76e6 5F5F5549 		.ascii	"__UINT_FAST16_TYPE__ unsigned int\000"
 11691      4E545F46 
 11691      41535431 
 11691      365F5459 
 11691      50455F5F 
 11692              	.LASF660:
 11693 7708 5F524545 		.ascii	"_REENT_MBLEN_STATE(ptr) ((ptr)->_misc->_mblen_state"
 11693      4E545F4D 
 11693      424C454E 
 11693      5F535441 
 11693      54452870 
 11694 773b 2900     		.ascii	")\000"
 11695              	.LASF157:
 11696 773d 5F5F6E65 		.ascii	"__need_wint_t \000"
 11696      65645F77 
 11696      696E745F 
 11696      742000
 11697              	.LASF419:
 11698 774c 5F5F4143 		.ascii	"__ACCUM_EPSILON__ 0x1P-15K\000"
 11698      43554D5F 
 11698      45505349 
 11698      4C4F4E5F 
 11698      5F203078 
 11699              	.LASF434:
 11700 7767 5F5F554C 		.ascii	"__ULACCUM_EPSILON__ 0x1P-32ULK\000"
 11700      41434355 
 11700      4D5F4550 
 11700      53494C4F 
 11700      4E5F5F20 
 11701              	.LASF500:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 323


 11702 7786 5F5F4743 		.ascii	"__GCC_HAVE_DWARF2_CFI_ASM 1\000"
 11702      435F4841 
 11702      56455F44 
 11702      57415246 
 11702      325F4346 
 11703              	.LASF331:
 11704 77a2 5F5F4C44 		.ascii	"__LDBL_DIG__ 15\000"
 11704      424C5F44 
 11704      49475F5F 
 11704      20313500 
 11705              	.LASF771:
 11706 77b2 5F737464 		.ascii	"_stdin_r(x) ((x)->_stdin)\000"
 11706      696E5F72 
 11706      28782920 
 11706      28287829 
 11706      2D3E5F73 
 11707              	.LASF784:
 11708 77cc 5F5F7366 		.ascii	"__sfileno(p) ((p)->_file)\000"
 11708      696C656E 
 11708      6F287029 
 11708      20282870 
 11708      292D3E5F 
 11709              	.LASF652:
 11710 77e6 5F524545 		.ascii	"_REENT_MP_RESULT(ptr) ((ptr)->_mp->_result)\000"
 11710      4E545F4D 
 11710      505F5245 
 11710      53554C54 
 11710      28707472 
 11711              	.LASF256:
 11712 7812 5F5F5749 		.ascii	"__WINT_MIN__ 0U\000"
 11712      4E545F4D 
 11712      494E5F5F 
 11712      20305500 
 11713              	.LASF40:
 11714 7822 7847656E 		.ascii	"xGenericListItem\000"
 11714      65726963 
 11714      4C697374 
 11714      4974656D 
 11714      00
 11715              	.LASF356:
 11716 7833 5F5F4445 		.ascii	"__DEC64_EPSILON__ 1E-15DD\000"
 11716      4336345F 
 11716      45505349 
 11716      4C4F4E5F 
 11716      5F203145 
 11717              	.LASF879:
 11718 784d 636F6E66 		.ascii	"configUSE_APPLICATION_TASK_TAG 0\000"
 11718      69675553 
 11718      455F4150 
 11718      504C4943 
 11718      4154494F 
 11719              	.LASF81:
 11720 786e 70785461 		.ascii	"pxTaskToResume\000"
 11720      736B546F 
 11720      52657375 
 11720      6D6500
 11721              	.LASF653:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 324


 11722 787d 5F524545 		.ascii	"_REENT_MP_RESULT_K(ptr) ((ptr)->_mp->_result_k)\000"
 11722      4E545F4D 
 11722      505F5245 
 11722      53554C54 
 11722      5F4B2870 
 11723              	.LASF828:
 11724 78ad 636F6E66 		.ascii	"configIDLE_SHOULD_YIELD 1\000"
 11724      69674944 
 11724      4C455F53 
 11724      484F554C 
 11724      445F5949 
 11725              	.LASF230:
 11726 78c7 5F5F494E 		.ascii	"__INT_LEAST16_TYPE__ short int\000"
 11726      545F4C45 
 11726      41535431 
 11726      365F5459 
 11726      50455F5F 
 11727              	.LASF775:
 11728 78e6 66726F70 		.ascii	"fropen(__cookie,__fn) funopen(__cookie, __fn, (int "
 11728      656E285F 
 11728      5F636F6F 
 11728      6B69652C 
 11728      5F5F666E 
 11729 7919 282A2928 		.ascii	"(*)())0, (fpos_t (*)())0, (int (*)())0)\000"
 11729      2929302C 
 11729      20286670 
 11729      6F735F74 
 11729      20282A29 
 11730              	.LASF323:
 11731 7941 5F5F4442 		.ascii	"__DBL_MAX__ ((double)1.7976931348623157e+308L)\000"
 11731      4C5F4D41 
 11731      585F5F20 
 11731      2828646F 
 11731      75626C65 
 11732              	.LASF552:
 11733 7970 5F505452 		.ascii	"_PTR void *\000"
 11733      20766F69 
 11733      64202A00 
 11734              	.LASF395:
 11735 797c 5F5F4C4C 		.ascii	"__LLFRACT_FBIT__ 63\000"
 11735      46524143 
 11735      545F4642 
 11735      49545F5F 
 11735      20363300 
 11736              	.LASF690:
 11737 7990 5F5F7763 		.ascii	"__wchar_t__ \000"
 11737      6861725F 
 11737      745F5F20 
 11737      00
 11738              	.LASF508:
 11739 799d 5F5F7468 		.ascii	"__thumb__ 1\000"
 11739      756D625F 
 11739      5F203100 
 11740              	.LASF773:
 11741 79a9 5F737464 		.ascii	"_stderr_r(x) ((x)->_stderr)\000"
 11741      6572725F 
 11741      72287829 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 325


 11741      20282878 
 11741      292D3E5F 
 11742              	.LASF294:
 11743 79c5 5F5F5549 		.ascii	"__UINT_FAST16_MAX__ 4294967295U\000"
 11743      4E545F46 
 11743      41535431 
 11743      365F4D41 
 11743      585F5F20 
 11744              	.LASF608:
 11745 79e5 5F5F6C6F 		.ascii	"__lock_init_recursive(lock) (_CAST_VOID 0)\000"
 11745      636B5F69 
 11745      6E69745F 
 11745      72656375 
 11745      72736976 
 11746              	.LASF825:
 11747 7a10 636F6E66 		.ascii	"configMAX_TASK_NAME_LEN ( 16 )\000"
 11747      69674D41 
 11747      585F5441 
 11747      534B5F4E 
 11747      414D455F 
 11748              	.LASF447:
 11749 7a2f 5F5F4851 		.ascii	"__HQ_FBIT__ 15\000"
 11749      5F464249 
 11749      545F5F20 
 11749      313500
 11750              	.LASF108:
 11751 7a3e 70727649 		.ascii	"prvInitialiseTaskLists\000"
 11751      6E697469 
 11751      616C6973 
 11751      65546173 
 11751      6B4C6973 
 11752              	.LASF593:
 11753 7a55 5F5F6E65 		.ascii	"__need___va_list\000"
 11753      65645F5F 
 11753      5F76615F 
 11753      6C697374 
 11753      00
 11754              	.LASF464:
 11755 7a66 5F5F5554 		.ascii	"__UTQ_IBIT__ 0\000"
 11755      515F4942 
 11755      49545F5F 
 11755      203000
 11756              	.LASF124:
 11757 7a75 7844656C 		.ascii	"xDelayedTaskList1\000"
 11757      61796564 
 11757      5461736B 
 11757      4C697374 
 11757      3100
 11758              	.LASF125:
 11759 7a87 7844656C 		.ascii	"xDelayedTaskList2\000"
 11759      61796564 
 11759      5461736B 
 11759      4C697374 
 11759      3200
 11760              	.LASF749:
 11761 7a99 5F5F534F 		.ascii	"__SOPT 0x0400\000"
 11761      50542030 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 326


 11761      78303430 
 11761      3000
 11762              	.LASF297:
 11763 7aa7 5F5F494E 		.ascii	"__INTPTR_MAX__ 2147483647\000"
 11763      54505452 
 11763      5F4D4158 
 11763      5F5F2032 
 11763      31343734 
 11764              	.LASF366:
 11765 7ac1 5F5F5346 		.ascii	"__SFRACT_IBIT__ 0\000"
 11765      52414354 
 11765      5F494249 
 11765      545F5F20 
 11765      3000
 11766              	.LASF328:
 11767 7ad3 5F5F4442 		.ascii	"__DBL_HAS_INFINITY__ 1\000"
 11767      4C5F4841 
 11767      535F494E 
 11767      46494E49 
 11767      54595F5F 
 11768              	.LASF725:
 11769 7aea 686F776D 		.ascii	"howmany(x,y) (((x)+((y)-1))/(y))\000"
 11769      616E7928 
 11769      782C7929 
 11769      20282828 
 11769      78292B28 
 11770              	.LASF629:
 11771 7b0b 5F52414E 		.ascii	"_RAND48_ADD (0x000b)\000"
 11771      4434385F 
 11771      41444420 
 11771      28307830 
 11771      30306229 
 11772              	.LASF795:
 11773 7b20 45584954 		.ascii	"EXIT_FAILURE 1\000"
 11773      5F464149 
 11773      4C555245 
 11773      203100
 11774              	.LASF892:
 11775 7b2f 636F6E66 		.ascii	"configQUEUE_REGISTRY_SIZE 0U\000"
 11775      69675155 
 11775      4555455F 
 11775      52454749 
 11775      53545259 
 11776              	.LASF36:
 11777 7b4c 756C5061 		.ascii	"ulParameters\000"
 11777      72616D65 
 11777      74657273 
 11777      00
 11778              	.LASF814:
 11779 7b59 65727251 		.ascii	"errQUEUE_BLOCKED ( -4 )\000"
 11779      55455545 
 11779      5F424C4F 
 11779      434B4544 
 11779      2028202D 
 11780              	.LASF399:
 11781 7b71 5F5F4C4C 		.ascii	"__LLFRACT_EPSILON__ 0x1P-63LLR\000"
 11781      46524143 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 327


 11781      545F4550 
 11781      53494C4F 
 11781      4E5F5F20 
 11782              	.LASF171:
 11783 7b90 74736B44 		.ascii	"tskDELETED_CHAR ( ( signed char ) 'D' )\000"
 11783      454C4554 
 11783      45445F43 
 11783      48415220 
 11783      28202820 
 11784              	.LASF368:
 11785 7bb8 5F5F5346 		.ascii	"__SFRACT_MAX__ 0X7FP-7HR\000"
 11785      52414354 
 11785      5F4D4158 
 11785      5F5F2030 
 11785      58374650 
 11786              	.LASF721:
 11787 7bd1 5F535953 		.ascii	"_SYS_TYPES_FD_SET \000"
 11787      5F545950 
 11787      45535F46 
 11787      445F5345 
 11787      542000
 11788              	.LASF737:
 11789 7be4 5F666C6F 		.ascii	"_flockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __loc"
 11789      636B6669 
 11789      6C652866 
 11789      70292028 
 11789      28286670 
 11790 7c17 6B5F6163 		.ascii	"k_acquire_recursive((fp)->_lock))\000"
 11790      71756972 
 11790      655F7265 
 11790      63757273 
 11790      69766528 
 11791              	.LASF727:
 11792 7c39 46445F53 		.ascii	"FD_SET(n,p) ((p)->fds_bits[(n)/NFDBITS] |= (1L << ("
 11792      4554286E 
 11792      2C702920 
 11792      28287029 
 11792      2D3E6664 
 11793 7c6c 286E2920 		.ascii	"(n) % NFDBITS)))\000"
 11793      25204E46 
 11793      44424954 
 11793      53292929 
 11793      00
 11794              	.LASF276:
 11795 7c7d 5F5F494E 		.ascii	"__INT16_C(c) c\000"
 11795      5431365F 
 11795      43286329 
 11795      206300
 11796              	.LASF857:
 11797 7c8c 706F7274 		.ascii	"portYIELD() vPortYieldFromISR()\000"
 11797      5949454C 
 11797      44282920 
 11797      76506F72 
 11797      74596965 
 11798              	.LASF470:
 11799 7cac 5F5F4441 		.ascii	"__DA_IBIT__ 32\000"
 11799      5F494249 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 328


 11799      545F5F20 
 11799      333200
 11800              	.LASF953:
 11801 7cbb 6C697374 		.ascii	"listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem "
 11801      4745545F 
 11801      4C495354 
 11801      5F495445 
 11801      4D5F5641 
 11802 7cee 292D3E78 		.ascii	")->xItemValue )\000"
 11802      4974656D 
 11802      56616C75 
 11802      65202900 
 11803              	.LASF179:
 11804 7cfe 70727647 		.ascii	"prvGetTCBFromHandle(pxHandle) ( ( ( pxHandle ) == N"
 11804      65745443 
 11804      4246726F 
 11804      6D48616E 
 11804      646C6528 
 11805 7d31 554C4C20 		.ascii	"ULL ) ? ( tskTCB * ) pxCurrentTCB : ( tskTCB * ) ( "
 11805      29203F20 
 11805      28207473 
 11805      6B544342 
 11805      202A2029 
 11806 7d64 70784861 		.ascii	"pxHandle ) )\000"
 11806      6E646C65 
 11806      20292029 
 11806      00
 11807              	.LASF826:
 11808 7d71 636F6E66 		.ascii	"configUSE_TRACE_FACILITY 0\000"
 11808      69675553 
 11808      455F5452 
 11808      4143455F 
 11808      46414349 
 11809              	.LASF360:
 11810 7d8c 5F5F4445 		.ascii	"__DEC128_MAX_EXP__ 6145\000"
 11810      43313238 
 11810      5F4D4158 
 11810      5F455850 
 11810      5F5F2036 
 11811              	.LASF193:
 11812 7da4 5F5F4154 		.ascii	"__ATOMIC_ACQ_REL 4\000"
 11812      4F4D4943 
 11812      5F414351 
 11812      5F52454C 
 11812      203400
 11813              	.LASF448:
 11814 7db7 5F5F4851 		.ascii	"__HQ_IBIT__ 0\000"
 11814      5F494249 
 11814      545F5F20 
 11814      3000
 11815              	.LASF698:
 11816 7dc5 5F574348 		.ascii	"_WCHAR_T_DEFINED_ \000"
 11816      41525F54 
 11816      5F444546 
 11816      494E4544 
 11816      5F2000
 11817              	.LASF110:
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 329


 11818 7dd8 784C6973 		.ascii	"xListIsEmpty\000"
 11818      74497345 
 11818      6D707479 
 11818      00
 11819              	.LASF534:
 11820 7de5 5F57414E 		.ascii	"_WANT_IO_LONG_LONG 1\000"
 11820      545F494F 
 11820      5F4C4F4E 
 11820      475F4C4F 
 11820      4E472031 
 11821              	.LASF622:
 11822 7dfa 5F524545 		.ascii	"_REENT_SMALL_CHECK_INIT(ptr) do { if ((ptr) && !(pt"
 11822      4E545F53 
 11822      4D414C4C 
 11822      5F434845 
 11822      434B5F49 
 11823 7e2d 72292D3E 		.ascii	"r)->__sdidinit) __sinit (ptr); } while (0)\000"
 11823      5F5F7364 
 11823      6964696E 
 11823      69742920 
 11823      5F5F7369 
 11824              	.LASF134:
 11825 7e58 7578546F 		.ascii	"uxTopUsedPriority\000"
 11825      70557365 
 11825      64507269 
 11825      6F726974 
 11825      7900
 11826              	.LASF921:
 11827 7e6a 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) \000"
 11827      65515545 
 11827      55455F53 
 11827      454E445F 
 11827      46524F4D 
 11828              	.LASF631:
 11829 7e94 5F524545 		.ascii	"_REENT_ASCTIME_SIZE 26\000"
 11829      4E545F41 
 11829      53435449 
 11829      4D455F53 
 11829      495A4520 
 11830              	.LASF409:
 11831 7eab 5F5F5341 		.ascii	"__SACCUM_EPSILON__ 0x1P-7HK\000"
 11831      4343554D 
 11831      5F455053 
 11831      494C4F4E 
 11831      5F5F2030 
 11832              	.LASF281:
 11833 7ec7 5F5F5549 		.ascii	"__UINT_LEAST8_MAX__ 255\000"
 11833      4E545F4C 
 11833      45415354 
 11833      385F4D41 
 11833      585F5F20 
 11834              	.LASF119:
 11835 7edf 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11835      6B476574 
 11835      43757272 
 11835      656E7454 
 11835      61736B48 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 330


 11836              	.LASF733:
 11837 7ef9 5F5F636C 		.ascii	"__clockid_t_defined \000"
 11837      6F636B69 
 11837      645F745F 
 11837      64656669 
 11837      6E656420 
 11838              	.LASF875:
 11839 7f0e 494E434C 		.ascii	"INCLUDE_xTaskGetIdleTaskHandle 0\000"
 11839      5544455F 
 11839      78546173 
 11839      6B476574 
 11839      49646C65 
 11840              	.LASF14:
 11841 7f2f 78497465 		.ascii	"xItemValue\000"
 11841      6D56616C 
 11841      756500
 11842              	.LASF316:
 11843 7f3a 5F5F4442 		.ascii	"__DBL_MANT_DIG__ 53\000"
 11843      4C5F4D41 
 11843      4E545F44 
 11843      49475F5F 
 11843      20353300 
 11844              	.LASF57:
 11845 7f4e 70785443 		.ascii	"pxTCB\000"
 11845      4200
 11846              	.LASF391:
 11847 7f54 5F5F554C 		.ascii	"__ULFRACT_IBIT__ 0\000"
 11847      46524143 
 11847      545F4942 
 11847      49545F5F 
 11847      203000
 11848              	.LASF145:
 11849 7f67 433A5C55 		.ascii	"C:\\Users\\Grzybek\\workspace\\FreeRTOS\000"
 11849      73657273 
 11849      5C47727A 
 11849      7962656B 
 11849      5C776F72 
 11850              	.LASF604:
 11851 7f8b 5F5F5359 		.ascii	"__SYS_LOCK_H__ \000"
 11851      535F4C4F 
 11851      434B5F48 
 11851      5F5F2000 
 11852              	.LASF42:
 11853 7f9b 75785072 		.ascii	"uxPriority\000"
 11853      696F7269 
 11853      747900
 11854              	.LASF517:
 11855 7fa6 5F5F4152 		.ascii	"__ARM_EABI__ 1\000"
 11855      4D5F4541 
 11855      42495F5F 
 11855      203100
 11856              	.LASF232:
 11857 7fb5 5F5F494E 		.ascii	"__INT_LEAST64_TYPE__ long long int\000"
 11857      545F4C45 
 11857      41535436 
 11857      345F5459 
 11857      50455F5F 
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 331


 11858              	.LASF405:
 11859 7fd8 5F5F5341 		.ascii	"__SACCUM_FBIT__ 7\000"
 11859      4343554D 
 11859      5F464249 
 11859      545F5F20 
 11859      3700
 11860              	.LASF844:
 11861 7fea 636F6E66 		.ascii	"configLIBRARY_KERNEL_INTERRUPT_PRIORITY 15\000"
 11861      69674C49 
 11861      42524152 
 11861      595F4B45 
 11861      524E454C 
 11862              		.ident	"GCC: (Sourcery CodeBench Lite 2012.09-63) 4.7.2"
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 332


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:62     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:59     .bss.pxCurrentTCB:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:65     .bss.pxReadyTasksLists:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:68     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:71     .bss.xDelayedTaskList1:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:74     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:77     .bss.xDelayedTaskList2:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:80     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:83     .bss.pxDelayedTaskList:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:86     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:89     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:92     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:95     .bss.xPendingReadyList:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:98     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:101    .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:104    .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:107    .bss.uxTasksDeleted:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:110    .bss.uxTasksDeleted:00000000 uxTasksDeleted
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:113    .bss.xSuspendedTaskList:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:116    .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:119    .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:122    .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:125    .bss.xTickCount:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:128    .bss.xTickCount:00000000 xTickCount
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:131    .bss.uxTopUsedPriority:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:134    .bss.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:137    .bss.uxTopReadyPriority:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:140    .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:143    .bss.xSchedulerRunning:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:146    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:149    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:152    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:155    .bss.uxMissedTicks:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:158    .bss.uxMissedTicks:00000000 uxMissedTicks
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:161    .bss.xMissedYield:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:164    .bss.xMissedYield:00000000 xMissedYield
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:167    .bss.xNumOfOverflows:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:170    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:173    .bss.uxTaskNumber:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:176    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:179    .data.xNextTaskUnblockTime:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:182    .data.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:185    .text.xTaskGenericCreate:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:190    .text.xTaskGenericCreate:00000000 xTaskGenericCreate
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2918   .text.prvAllocateTCBAndStack:00000000 prvAllocateTCBAndStack
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2574   .text.prvInitialiseTCBVariables:00000000 prvInitialiseTCBVariables
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2657   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:391    .text.xTaskGenericCreate:00000140 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:402    .text.vTaskDelete:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:407    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:506    .text.vTaskDelete:00000090 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:515    .text.vTaskDelayUntil:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:520    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1469   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2838   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 333


C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1506   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:626    .text.vTaskDelayUntil:00000098 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:632    .text.vTaskDelay:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:637    .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:697    .text.vTaskDelay:00000050 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:703    .text.uxTaskPriorityGet:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:708    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:758    .text.uxTaskPriorityGet:00000034 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:763    .text.vTaskPrioritySet:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:768    .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:941    .text.vTaskPrioritySet:0000010c $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:948    .text.vTaskSuspend:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:953    .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2002   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1057   .text.vTaskSuspend:00000094 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1065   .text.xTaskIsTaskSuspended:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1070   .text.xTaskIsTaskSuspended:00000000 xTaskIsTaskSuspended
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1126   .text.xTaskIsTaskSuspended:00000044 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1132   .text.vTaskResume:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1137   .text.vTaskResume:00000000 vTaskResume
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1229   .text.vTaskResume:0000008c $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1236   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1241   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1345   .text.xTaskResumeFromISR:000000a8 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1354   .rodata:00000000 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1358   .text.vTaskStartScheduler:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1363   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1419   .text.vTaskStartScheduler:00000058 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2528   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1427   .text.vTaskEndScheduler:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1432   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1459   .text.vTaskEndScheduler:00000018 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1464   .text.vTaskSuspendAll:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1496   .text.vTaskSuspendAll:00000018 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1501   .text.xTaskResumeAll:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1806   .text.vTaskIncrementTick:00000000 vTaskIncrementTick
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1662   .text.xTaskResumeAll:000000f0 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1674   .text.xTaskGetTickCount:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1679   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1714   .text.xTaskGetTickCount:00000020 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1719   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1724   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1761   .text.xTaskGetTickCountFromISR:00000024 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1766   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1771   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1796   .text.uxTaskGetNumberOfTasks:00000010 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1801   .text.vTaskIncrementTick:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1984   .text.vTaskIncrementTick:00000118 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:1997   .text.vTaskSwitchContext:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2137   .text.vTaskSwitchContext:000000dc $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3411   .rodata.ucExpectedStackBytes.5891:00000000 ucExpectedStackBytes.5891
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2147   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2152   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2214   .text.vTaskPlaceOnEventList:0000005c $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2221   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2226   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2327   .text.xTaskRemoveFromEventList:000000a0 $d
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 334


C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2336   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2341   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2377   .text.vTaskSetTimeOutState:00000024 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2383   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2388   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2483   .text.xTaskCheckForTimeOut:0000008c $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2489   .text.vTaskMissedYield:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2494   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2519   .text.vTaskMissedYield:00000014 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2524   .text.prvIdleTask:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2744   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2565   .text.prvIdleTask:00000020 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2570   .text.prvInitialiseTCBVariables:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2653   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2728   .text.prvInitialiseTaskLists:00000068 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2740   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3119   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2827   .text.prvCheckTasksWaitingTermination:00000070 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2834   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2905   .text.prvAddCurrentTaskToDelayedList:0000005c $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2914   .text.prvAllocateTCBAndStack:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:2998   .text.usTaskCheckFreeStackSpace:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3002   .text.usTaskCheckFreeStackSpace:00000000 usTaskCheckFreeStackSpace
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3054   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3059   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3110   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3115   .text.prvDeleteTCB:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3153   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3158   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3190   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3195   .text.vTaskPriorityInherit:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3200   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3307   .text.vTaskPriorityInherit:000000ac $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3314   .text.vTaskPriorityDisinherit:00000000 $t
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3319   .text.vTaskPriorityDisinherit:00000000 vTaskPriorityDisinherit
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3402   .text.vTaskPriorityDisinherit:0000007c $d
C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s:3408   .rodata.ucExpectedStackBytes.5891:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.ce89de828273fac0ab1bbb9e83b278fe
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.8aa39ec63c47b0c474529e4131d42f04
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.cf962ebbec441b3ac67502735f0765db
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
ARM GAS  C:\Users\Grzybek\AppData\Local\Temp\cccVQrHj.s 			page 335


                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.58.3943707ca024393181a6211b2c8a1625
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.projdefs.h.70.dbccf9a6ca737be695addf5321434443
                           .group:00000000 wm4.FreeRTOSConfig.h.51.75288dd46c012b59f4d59ef4654b728b
                           .group:00000000 wm4.portmacro.h.71.52a50c2eeecf8808d04241ce2362cf60
                           .group:00000000 wm4.portable.h.326.d973d87d91a2870806201c5c4493d578
                           .group:00000000 wm4.mpu_wrappers.h.70.805d5308b530bfb35337fa0cda53b379
                           .group:00000000 wm4.FreeRTOS.h.153.96ab976bfb595dc71389a47535011fba
                           .group:00000000 wm4.list.h.99.4794e53f44ef377a7e8b918fd5c142a2
                           .group:00000000 wm4.task.h.87.ccd4c448460750abd1f398251d355800
                           .group:00000000 wm4.timers.h.88.1f6aa39fa72d19a328c2630c34ca71fc
                           .group:00000000 wm4.StackMacros.h.70.ce860816081eafea7abd036dd40dd896

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
uxListRemove
ulPortSetInterruptMask
vPortClearInterruptMask
xPortStartScheduler
vPortEndScheduler
vApplicationStackOverflowHook
memcmp
vListInsert
strncpy
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
